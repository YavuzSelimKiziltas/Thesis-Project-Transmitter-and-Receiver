
Camera_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da4  08007da4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dac  08007dac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dac  08007dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007db0  08007db0  00017db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007db4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0001f764  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001f7d4  2001f7d4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000da28  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026b8  00000000  00000000  0002db0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d58  00000000  00000000  000301c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a26  00000000  00000000  00030f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000228eb  00000000  00000000  00031946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000112a8  00000000  00000000  00054231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8856  00000000  00000000  000654d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003de0  00000000  00000000  0012dd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00131b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cb8 	.word	0x08007cb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007cb8 	.word	0x08007cb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <NRF24_DelayMicroSeconds>:
static SPI_HandleTypeDef nrf24_hspi;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <NRF24_DelayMicroSeconds+0x3c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <NRF24_DelayMicroSeconds+0x40>)
 800057e:	fba2 2303 	umull	r2, r3, r2, r3
 8000582:	0c9a      	lsrs	r2, r3, #18
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	fb02 f303 	mul.w	r3, r2, r3
 800058a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800058c:	bf00      	nop
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	60fa      	str	r2, [r7, #12]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1fa      	bne.n	800058e <NRF24_DelayMicroSeconds+0x22>
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000008 	.word	0x20000008
 80005ac:	165e9f81 	.word	0x165e9f81

080005b0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d008      	beq.n	80005d0 <NRF24_csn+0x20>
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <NRF24_csn+0x38>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <NRF24_csn+0x3c>)
 80005c4:	8811      	ldrh	r1, [r2, #0]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 ffd7 	bl	800457c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005ce:	e007      	b.n	80005e0 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <NRF24_csn+0x38>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a05      	ldr	r2, [pc, #20]	; (80005ec <NRF24_csn+0x3c>)
 80005d6:	8811      	ldrh	r1, [r2, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 ffce 	bl	800457c <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000094 	.word	0x20000094
 80005ec:	20000098 	.word	0x20000098

080005f0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <NRF24_ce+0x20>
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <NRF24_ce+0x38>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a0a      	ldr	r2, [pc, #40]	; (800062c <NRF24_ce+0x3c>)
 8000604:	8811      	ldrh	r1, [r2, #0]
 8000606:	2201      	movs	r2, #1
 8000608:	4618      	mov	r0, r3
 800060a:	f003 ffb7 	bl	800457c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800060e:	e007      	b.n	8000620 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <NRF24_ce+0x38>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a05      	ldr	r2, [pc, #20]	; (800062c <NRF24_ce+0x3c>)
 8000616:	8811      	ldrh	r1, [r2, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 ffae 	bl	800457c <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000094 	.word	0x20000094
 800062c:	2000009a 	.word	0x2000009a

08000630 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff ffb8 	bl	80005b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 031f 	and.w	r3, r3, #31
 8000646:	b2db      	uxtb	r3, r3
 8000648:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800064a:	f107 010c 	add.w	r1, r7, #12
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	2201      	movs	r2, #1
 8000652:	480a      	ldr	r0, [pc, #40]	; (800067c <NRF24_read_register+0x4c>)
 8000654:	f005 fe85 	bl	8006362 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	1c59      	adds	r1, r3, #1
 800065e:	2364      	movs	r3, #100	; 0x64
 8000660:	2201      	movs	r2, #1
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <NRF24_read_register+0x4c>)
 8000664:	f005 ffb9 	bl	80065da <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ff9f 	bl	80005b0 <NRF24_csn>
	return retData;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000009c 	.word	0x2000009c

08000680 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff8d 	bl	80005b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f003 031f 	and.w	r3, r3, #31
 800069c:	b2db      	uxtb	r3, r3
 800069e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006a0:	f107 010c 	add.w	r1, r7, #12
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <NRF24_read_registerN+0x4c>)
 80006aa:	f005 fe5a 	bl	8006362 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <NRF24_read_registerN+0x4c>)
 80006b8:	f005 ff8f 	bl	80065da <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ff77 	bl	80005b0 <NRF24_csn>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000009c 	.word	0x2000009c

080006d0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff ff65 	bl	80005b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f043 0320 	orr.w	r3, r3, #32
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80006f4:	f107 010c 	add.w	r1, r7, #12
 80006f8:	2364      	movs	r3, #100	; 0x64
 80006fa:	2202      	movs	r2, #2
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <NRF24_write_register+0x40>)
 80006fe:	f005 fe30 	bl	8006362 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ff54 	bl	80005b0 <NRF24_csn>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000009c 	.word	0x2000009c

08000714 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ff43 	bl	80005b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f043 0320 	orr.w	r3, r3, #32
 8000730:	b2db      	uxtb	r3, r3
 8000732:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000734:	f107 010c 	add.w	r1, r7, #12
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	2201      	movs	r2, #1
 800073c:	4808      	ldr	r0, [pc, #32]	; (8000760 <NRF24_write_registerN+0x4c>)
 800073e:	f005 fe10 	bl	8006362 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	b29a      	uxth	r2, r3
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	6839      	ldr	r1, [r7, #0]
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <NRF24_write_registerN+0x4c>)
 800074c:	f005 fe09 	bl	8006362 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff2d 	bl	80005b0 <NRF24_csn>
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000009c 	.word	0x2000009c

08000764 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff ff1d 	bl	80005b0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800077a:	f107 010f 	add.w	r1, r7, #15
 800077e:	2364      	movs	r3, #100	; 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <NRF24_write_payload+0x40>)
 8000784:	f005 fded 	bl	8006362 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	b29a      	uxth	r2, r3
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <NRF24_write_payload+0x40>)
 8000792:	f005 fde6 	bl	8006362 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff ff0a 	bl	80005b0 <NRF24_csn>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000009c 	.word	0x2000009c

080007a8 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80007ac:	21ff      	movs	r1, #255	; 0xff
 80007ae:	20e1      	movs	r0, #225	; 0xe1
 80007b0:	f7ff ff8e 	bl	80006d0 <NRF24_write_register>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80007bc:	21ff      	movs	r1, #255	; 0xff
 80007be:	20e2      	movs	r0, #226	; 0xe2
 80007c0:	f7ff ff86 	bl	80006d0 <NRF24_write_register>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80007ce:	2007      	movs	r0, #7
 80007d0:	f7ff ff2e 	bl	8000630 <NRF24_read_register>
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80007e4:	b082      	sub	sp, #8
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
 80007f4:	4613      	mov	r3, r2
 80007f6:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80007f8:	4b65      	ldr	r3, [pc, #404]	; (8000990 <NRF24_begin+0x1ac>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	2258      	movs	r2, #88	; 0x58
 8000802:	4619      	mov	r1, r3
 8000804:	f006 fd3c 	bl	8007280 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000808:	4a62      	ldr	r2, [pc, #392]	; (8000994 <NRF24_begin+0x1b0>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800080e:	4a62      	ldr	r2, [pc, #392]	; (8000998 <NRF24_begin+0x1b4>)
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000814:	4a61      	ldr	r2, [pc, #388]	; (800099c <NRF24_begin+0x1b8>)
 8000816:	883b      	ldrh	r3, [r7, #0]
 8000818:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff fec8 	bl	80005b0 <NRF24_csn>
	NRF24_ce(0);
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff fee5 	bl	80005f0 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000826:	2005      	movs	r0, #5
 8000828:	f001 fb9a 	bl	8001f60 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800082c:	2108      	movs	r1, #8
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff ff4e 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000834:	213f      	movs	r1, #63	; 0x3f
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff ff4a 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800083c:	2103      	movs	r1, #3
 800083e:	2002      	movs	r0, #2
 8000840:	f7ff ff46 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000844:	2103      	movs	r1, #3
 8000846:	2003      	movs	r0, #3
 8000848:	f7ff ff42 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800084c:	2103      	movs	r1, #3
 800084e:	2004      	movs	r0, #4
 8000850:	f7ff ff3e 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000854:	2102      	movs	r1, #2
 8000856:	2005      	movs	r0, #5
 8000858:	f7ff ff3a 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800085c:	210f      	movs	r1, #15
 800085e:	2006      	movs	r0, #6
 8000860:	f7ff ff36 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000864:	210e      	movs	r1, #14
 8000866:	2007      	movs	r0, #7
 8000868:	f7ff ff32 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800086c:	2100      	movs	r1, #0
 800086e:	2008      	movs	r0, #8
 8000870:	f7ff ff2e 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000874:	2100      	movs	r1, #0
 8000876:	2009      	movs	r0, #9
 8000878:	f7ff ff2a 	bl	80006d0 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800087c:	23e7      	movs	r3, #231	; 0xe7
 800087e:	733b      	strb	r3, [r7, #12]
 8000880:	23e7      	movs	r3, #231	; 0xe7
 8000882:	72fb      	strb	r3, [r7, #11]
 8000884:	23e7      	movs	r3, #231	; 0xe7
 8000886:	72bb      	strb	r3, [r7, #10]
 8000888:	23e7      	movs	r3, #231	; 0xe7
 800088a:	727b      	strb	r3, [r7, #9]
 800088c:	23e7      	movs	r3, #231	; 0xe7
 800088e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	2205      	movs	r2, #5
 8000896:	4619      	mov	r1, r3
 8000898:	200a      	movs	r0, #10
 800089a:	f7ff ff3b 	bl	8000714 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800089e:	23c2      	movs	r3, #194	; 0xc2
 80008a0:	733b      	strb	r3, [r7, #12]
 80008a2:	23c2      	movs	r3, #194	; 0xc2
 80008a4:	72fb      	strb	r3, [r7, #11]
 80008a6:	23c2      	movs	r3, #194	; 0xc2
 80008a8:	72bb      	strb	r3, [r7, #10]
 80008aa:	23c2      	movs	r3, #194	; 0xc2
 80008ac:	727b      	strb	r3, [r7, #9]
 80008ae:	23c2      	movs	r3, #194	; 0xc2
 80008b0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2205      	movs	r2, #5
 80008b8:	4619      	mov	r1, r3
 80008ba:	200b      	movs	r0, #11
 80008bc:	f7ff ff2a 	bl	8000714 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80008c0:	21c3      	movs	r1, #195	; 0xc3
 80008c2:	200c      	movs	r0, #12
 80008c4:	f7ff ff04 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80008c8:	21c4      	movs	r1, #196	; 0xc4
 80008ca:	200d      	movs	r0, #13
 80008cc:	f7ff ff00 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80008d0:	21c5      	movs	r1, #197	; 0xc5
 80008d2:	200e      	movs	r0, #14
 80008d4:	f7ff fefc 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80008d8:	21c6      	movs	r1, #198	; 0xc6
 80008da:	200f      	movs	r0, #15
 80008dc:	f7ff fef8 	bl	80006d0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80008e0:	23e7      	movs	r3, #231	; 0xe7
 80008e2:	733b      	strb	r3, [r7, #12]
 80008e4:	23e7      	movs	r3, #231	; 0xe7
 80008e6:	72fb      	strb	r3, [r7, #11]
 80008e8:	23e7      	movs	r3, #231	; 0xe7
 80008ea:	72bb      	strb	r3, [r7, #10]
 80008ec:	23e7      	movs	r3, #231	; 0xe7
 80008ee:	727b      	strb	r3, [r7, #9]
 80008f0:	23e7      	movs	r3, #231	; 0xe7
 80008f2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	2205      	movs	r2, #5
 80008fa:	4619      	mov	r1, r3
 80008fc:	2010      	movs	r0, #16
 80008fe:	f7ff ff09 	bl	8000714 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000902:	2100      	movs	r1, #0
 8000904:	2011      	movs	r0, #17
 8000906:	f7ff fee3 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800090a:	2100      	movs	r1, #0
 800090c:	2012      	movs	r0, #18
 800090e:	f7ff fedf 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000912:	2100      	movs	r1, #0
 8000914:	2013      	movs	r0, #19
 8000916:	f7ff fedb 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800091a:	2100      	movs	r1, #0
 800091c:	2014      	movs	r0, #20
 800091e:	f7ff fed7 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000922:	2100      	movs	r1, #0
 8000924:	2015      	movs	r0, #21
 8000926:	f7ff fed3 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800092a:	2100      	movs	r1, #0
 800092c:	2016      	movs	r0, #22
 800092e:	f7ff fecf 	bl	80006d0 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000932:	f000 fa87 	bl	8000e44 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000936:	2100      	movs	r1, #0
 8000938:	201c      	movs	r0, #28
 800093a:	f7ff fec9 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800093e:	2100      	movs	r1, #0
 8000940:	201d      	movs	r0, #29
 8000942:	f7ff fec5 	bl	80006d0 <NRF24_write_register>

	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000946:	210f      	movs	r1, #15
 8000948:	200f      	movs	r0, #15
 800094a:	f000 f8ad 	bl	8000aa8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800094e:	2003      	movs	r0, #3
 8000950:	f000 f927 	bl	8000ba2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000954:	2001      	movs	r0, #1
 8000956:	f000 f95d 	bl	8000c14 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800095a:	2002      	movs	r0, #2
 800095c:	f000 f9a0 	bl	8000ca0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000960:	f000 f8f2 	bl	8000b48 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000964:	2020      	movs	r0, #32
 8000966:	f000 f8cf 	bl	8000b08 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 800096a:	f000 fa62 	bl	8000e32 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800096e:	204c      	movs	r0, #76	; 0x4c
 8000970:	f000 f8b5 	bl	8000ade <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000974:	f7ff ff18 	bl	80007a8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000978:	f7ff ff1e 	bl	80007b8 <NRF24_flush_rx>

	NRF24_powerDown();
 800097c:	f000 f9b8 	bl	8000cf0 <NRF24_powerDown>

}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800098a:	b002      	add	sp, #8
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	2000009c 	.word	0x2000009c
 8000994:	20000094 	.word	0x20000094
 8000998:	20000098 	.word	0x20000098
 800099c:	2000009a 	.word	0x2000009a

080009a0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff fe23 	bl	80005f0 <NRF24_ce>
	NRF24_flush_tx();
 80009aa:	f7ff fefd 	bl	80007a8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80009ae:	f7ff ff03 	bl	80007b8 <NRF24_flush_rx>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80009c4:	f000 fa35 	bl	8000e32 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	4619      	mov	r1, r3
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f9ce 	bl	8000d6e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80009d2:	f001 fab9 	bl	8001f48 <HAL_GetTick>
 80009d6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80009d8:	230a      	movs	r3, #10
 80009da:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80009dc:	f107 030d 	add.w	r3, r7, #13
 80009e0:	2201      	movs	r2, #1
 80009e2:	4619      	mov	r1, r3
 80009e4:	2008      	movs	r0, #8
 80009e6:	f7ff fe4b 	bl	8000680 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80009ea:	f7ff feed 	bl	80007c8 <NRF24_get_status>
 80009ee:	4603      	mov	r3, r0
 80009f0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d107      	bne.n	8000a0c <NRF24_write+0x54>
 80009fc:	f001 faa4 	bl	8001f48 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8e7      	bhi.n	80009dc <NRF24_write+0x24>


	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000a0c:	f107 010b 	add.w	r1, r7, #11
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <NRF24_write+0x90>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f9d8 	bl	8000dcc <NRF24_whatHappened>
	retStatus = tx_ok;
 8000a1c:	7b3b      	ldrb	r3, [r7, #12]
 8000a1e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <NRF24_write+0x90>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d005      	beq.n	8000a34 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000a28:	f000 f886 	bl	8000b38 <NRF24_getDynamicPayloadSize>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <NRF24_write+0x94>)
 8000a32:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8000a34:	f000 f80c 	bl	8000a50 <NRF24_available>
	NRF24_flush_tx();
 8000a38:	f7ff feb6 	bl	80007a8 <NRF24_flush_tx>
	return retStatus;
 8000a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000008c 	.word	0x2000008c
 8000a4c:	2000008d 	.word	0x2000008d

08000a50 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f000 f95a 	bl	8000d0e <NRF24_availablePipe>
 8000a5a:	4603      	mov	r3, r0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	4619      	mov	r1, r3
 8000a70:	200a      	movs	r0, #10
 8000a72:	f7ff fe4f 	bl	8000714 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000a76:	463b      	mov	r3, r7
 8000a78:	2205      	movs	r2, #5
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	2010      	movs	r0, #16
 8000a7e:	f7ff fe49 	bl	8000714 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8000a82:	2320      	movs	r3, #32
 8000a84:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <NRF24_openWritingPipe+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	7bfa      	ldrb	r2, [r7, #15]
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	bf28      	it	cs
 8000a90:	4613      	movcs	r3, r2
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4619      	mov	r1, r3
 8000a96:	2011      	movs	r0, #17
 8000a98:	f7ff fe1a 	bl	80006d0 <NRF24_write_register>
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000008e 	.word	0x2000008e

08000aa8 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	b25a      	sxtb	r2, r3
 8000abe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4619      	mov	r1, r3
 8000ad0:	2004      	movs	r0, #4
 8000ad2:	f7ff fdfd 	bl	80006d0 <NRF24_write_register>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000ae8:	237f      	movs	r3, #127	; 0x7f
 8000aea:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000aec:	7bfa      	ldrb	r2, [r7, #15]
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4293      	cmp	r3, r2
 8000af2:	bf28      	it	cs
 8000af4:	4613      	movcs	r3, r2
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4619      	mov	r1, r3
 8000afa:	2005      	movs	r0, #5
 8000afc:	f7ff fde8 	bl	80006d0 <NRF24_write_register>
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000b12:	2320      	movs	r3, #32
 8000b14:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000b16:	7bfa      	ldrb	r2, [r7, #15]
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	bf28      	it	cs
 8000b1e:	4613      	movcs	r3, r2
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <NRF24_setPayloadSize+0x2c>)
 8000b24:	701a      	strb	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	2000008e 	.word	0x2000008e

08000b38 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b3c:	2060      	movs	r0, #96	; 0x60
 8000b3e:	f7ff fd77 	bl	8000630 <NRF24_read_register>
 8000b42:	4603      	mov	r3, r0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000b4c:	201d      	movs	r0, #29
 8000b4e:	f7ff fd6f 	bl	8000630 <NRF24_read_register>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f023 0304 	bic.w	r3, r3, #4
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	201d      	movs	r0, #29
 8000b5e:	f7ff fdb7 	bl	80006d0 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000b62:	2100      	movs	r1, #0
 8000b64:	201c      	movs	r0, #28
 8000b66:	f7ff fdb3 	bl	80006d0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000b6a:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <NRF24_disableDynamicPayloads+0x2c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000008f 	.word	0x2000008f

08000b78 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d004      	beq.n	8000b92 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000b88:	213f      	movs	r1, #63	; 0x3f
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f7ff fda0 	bl	80006d0 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000b90:	e003      	b.n	8000b9a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff fd9b 	bl	80006d0 <NRF24_write_register>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bac:	2006      	movs	r0, #6
 8000bae:	f7ff fd3f 	bl	8000630 <NRF24_read_register>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	f023 0306 	bic.w	r3, r3, #6
 8000bbc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d104      	bne.n	8000bce <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	f043 0306 	orr.w	r3, r3, #6
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e019      	b.n	8000c02 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d104      	bne.n	8000bde <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e011      	b.n	8000c02 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d104      	bne.n	8000bee <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e009      	b.n	8000c02 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d103      	bne.n	8000c02 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	f043 0306 	orr.w	r3, r3, #6
 8000c00:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	4619      	mov	r1, r3
 8000c06:	2006      	movs	r0, #6
 8000c08:	f7ff fd62 	bl	80006d0 <NRF24_write_register>
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c22:	2006      	movs	r0, #6
 8000c24:	f7ff fd04 	bl	8000630 <NRF24_read_register>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <NRF24_setDataRate+0x88>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c32:	7bbb      	ldrb	r3, [r7, #14]
 8000c34:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000c38:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d107      	bne.n	8000c50 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <NRF24_setDataRate+0x88>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000c46:	7bbb      	ldrb	r3, [r7, #14]
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	73bb      	strb	r3, [r7, #14]
 8000c4e:	e00d      	b.n	8000c6c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d107      	bne.n	8000c66 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <NRF24_setDataRate+0x88>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	73bb      	strb	r3, [r7, #14]
 8000c64:	e002      	b.n	8000c6c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <NRF24_setDataRate+0x88>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	2006      	movs	r0, #6
 8000c72:	f7ff fd2d 	bl	80006d0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000c76:	2006      	movs	r0, #6
 8000c78:	f7ff fcda 	bl	8000630 <NRF24_read_register>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	7bbb      	ldrb	r3, [r7, #14]
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d102      	bne.n	8000c8c <NRF24_setDataRate+0x78>
  {
    result = true;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e002      	b.n	8000c92 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <NRF24_setDataRate+0x88>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000090 	.word	0x20000090

08000ca0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fcc0 	bl	8000630 <NRF24_read_register>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f023 030c 	bic.w	r3, r3, #12
 8000cb6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00f      	beq.n	8000cde <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d104      	bne.n	8000cce <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e007      	b.n	8000cde <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff fcf4 	bl	80006d0 <NRF24_write_register>
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fc9b 	bl	8000630 <NRF24_read_register>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f023 0302 	bic.w	r3, r3, #2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fce3 	bl	80006d0 <NRF24_write_register>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000d16:	f7ff fd57 	bl	80007c8 <NRF24_get_status>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf14      	ite	ne
 8000d28:	2301      	movne	r3, #1
 8000d2a:	2300      	moveq	r3, #0
 8000d2c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d017      	beq.n	8000d64 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d007      	beq.n	8000d4a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	085b      	lsrs	r3, r3, #1
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000d4a:	2140      	movs	r1, #64	; 0x40
 8000d4c:	2007      	movs	r0, #7
 8000d4e:	f7ff fcbf 	bl	80006d0 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f7ff fcb6 	bl	80006d0 <NRF24_write_register>
    }
  }
  return result;
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fc38 	bl	80005f0 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fc55 	bl	8000630 <NRF24_read_register>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f023 0301 	bic.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4619      	mov	r1, r3
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff fc9a 	bl	80006d0 <NRF24_write_register>
  NRF24_ce(1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff fc27 	bl	80005f0 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000da2:	2096      	movs	r0, #150	; 0x96
 8000da4:	f7ff fbe2 	bl	800056c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	4619      	mov	r1, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fcd9 	bl	8000764 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f7ff fc1c 	bl	80005f0 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000db8:	200f      	movs	r0, #15
 8000dba:	f7ff fbd7 	bl	800056c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fc16 	bl	80005f0 <NRF24_ce>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000dd8:	f7ff fcf6 	bl	80007c8 <NRF24_get_status>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000de6:	2170      	movs	r1, #112	; 0x70
 8000de8:	2007      	movs	r0, #7
 8000dea:	f7ff fc71 	bl	80006d0 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bf14      	ite	ne
 8000df8:	2301      	movne	r3, #1
 8000dfa:	2300      	moveq	r3, #0
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
 8000e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bf14      	ite	ne
 8000e20:	2301      	movne	r3, #1
 8000e22:	2300      	moveq	r3, #0
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	701a      	strb	r2, [r3, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e36:	2170      	movs	r1, #112	; 0x70
 8000e38:	2007      	movs	r0, #7
 8000e3a:	f7ff fc49 	bl	80006d0 <NRF24_write_register>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fbb0 	bl	80005b0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000e50:	2350      	movs	r3, #80	; 0x50
 8000e52:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000e54:	2373      	movs	r3, #115	; 0x73
 8000e56:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000e58:	1d39      	adds	r1, r7, #4
 8000e5a:	2364      	movs	r3, #100	; 0x64
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <NRF24_ACTIVATE_cmd+0x30>)
 8000e60:	f005 fa7f 	bl	8006362 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff fba3 	bl	80005b0 <NRF24_csn>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000009c 	.word	0x2000009c

08000e78 <parseDcmiOutput>:

volatile uint16_t newIndex = 0;

// 8576 kere çağırılmalı
void parseDcmiOutput(uint32_t *pixel, uint8_t *tx_parsed, uint16_t indexToSend)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	4613      	mov	r3, r2
 8000e84:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < 8; i++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e0d1      	b.n	8001030 <parseDcmiOutput+0x1b8>
	{
		// Even Iterations
		if((i == 0) && (indexToSend % 2 == 0))
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d124      	bne.n	8000edc <parseDcmiOutput+0x64>
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d11e      	bne.n	8000edc <parseDcmiOutput+0x64>
		{
			tx_parsed[0]       = (uint8_t)((indexToSend & 0x00FF));
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	701a      	strb	r2, [r3, #0]
			tx_parsed[1] 	   = (uint8_t)((indexToSend & 0xFF00) >> 8);
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]
			tx_parsed[2]       = (uint8_t)((pixel[i] & 0x000000FF));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	701a      	strb	r2, [r3, #0]
			tx_parsed[3] 	   = (uint8_t)((pixel[i] & 0x0000FF00) >> 8);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0a1a      	lsrs	r2, r3, #8
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	3303      	adds	r3, #3
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e041      	b.n	8000f60 <parseDcmiOutput+0xe8>
		}
		else if((i != 0) && (indexToSend % 2 == 0))
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d03e      	beq.n	8000f60 <parseDcmiOutput+0xe8>
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d138      	bne.n	8000f60 <parseDcmiOutput+0xe8>
		{
			tx_parsed[i*4]       = (uint8_t)((pixel[i - 1] & 0x00FF0000) >> 16);
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0c1a      	lsrs	r2, r3, #16
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4619      	mov	r1, r3
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	440b      	add	r3, r1
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	701a      	strb	r2, [r3, #0]
			tx_parsed[(i*4) + 1] = (uint8_t)((pixel[i - 1] & 0xFF000000) >> 24);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f14:	3b01      	subs	r3, #1
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0e19      	lsrs	r1, r3, #24
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	3301      	adds	r3, #1
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2ca      	uxtb	r2, r1
 8000f2c:	701a      	strb	r2, [r3, #0]
			tx_parsed[(i*4) + 2] = (uint8_t)((pixel[i] & 0x000000FF));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4413      	add	r3, r2
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	4413      	add	r3, r2
 8000f42:	b2ca      	uxtb	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
			tx_parsed[(i*4) + 3] = (uint8_t)((pixel[i] & 0x0000FF00) >> 8);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0a19      	lsrs	r1, r3, #8
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	3303      	adds	r3, #3
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b2ca      	uxtb	r2, r1
 8000f5e:	701a      	strb	r2, [r3, #0]
		}

		// Odd Iterations
		// 1 = 8 --> 7 = 15
		if((i == 0) && (indexToSend % 2 == 1))
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d125      	bne.n	8000fb2 <parseDcmiOutput+0x13a>
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d01f      	beq.n	8000fb2 <parseDcmiOutput+0x13a>
		{
			tx_parsed[0]       = (uint8_t)((indexToSend & 0x00FF));
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	701a      	strb	r2, [r3, #0]
			tx_parsed[1] 	   = (uint8_t)((indexToSend & 0xFF00) >> 8);
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
			tx_parsed[2]       = (uint8_t)((pixel[i] & 0x00FF0000) >> 16);
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	0c1a      	lsrs	r2, r3, #16
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	3302      	adds	r3, #2
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	701a      	strb	r2, [r3, #0]
			tx_parsed[3] 	   = (uint8_t)((pixel[i] & 0xFF000000) >> 24);
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0e1a      	lsrs	r2, r3, #24
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	3303      	adds	r3, #3
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e03b      	b.n	800102a <parseDcmiOutput+0x1b2>
		}
		else if((i != 0) && (indexToSend % 2 == 1))
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d038      	beq.n	800102a <parseDcmiOutput+0x1b2>
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d032      	beq.n	800102a <parseDcmiOutput+0x1b2>
		{
			tx_parsed[i*4]       = (uint8_t)((pixel[i] & 0x000000FF));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	440b      	add	r3, r1
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	701a      	strb	r2, [r3, #0]
			tx_parsed[(i*4) + 1] = (uint8_t)((pixel[i] & 0x0000FF00) >> 8);
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0a19      	lsrs	r1, r3, #8
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	3301      	adds	r3, #1
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
			tx_parsed[(i*4) + 2] = (uint8_t)((pixel[i] & 0x00FF0000) >> 16);
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0c19      	lsrs	r1, r3, #16
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	b2ca      	uxtb	r2, r1
 800100e:	701a      	strb	r2, [r3, #0]
			tx_parsed[(i*4) + 3] = (uint8_t)((pixel[i] & 0xFF000000) >> 24);
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0e19      	lsrs	r1, r3, #24
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	3303      	adds	r3, #3
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	4413      	add	r3, r2
 8001026:	b2ca      	uxtb	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2b07      	cmp	r3, #7
 8001034:	f77f af2a 	ble.w	8000e8c <parseDcmiOutput+0x14>
		}



	}
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b097      	sub	sp, #92	; 0x5c
 800104c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f000 ff15 	bl	8001e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f8b7 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001056:	f000 f9d3 	bl	8001400 <MX_GPIO_Init>
  MX_DMA_Init();
 800105a:	f000 f9b1 	bl	80013c0 <MX_DMA_Init>
  MX_DCMI_Init();
 800105e:	f000 f923 	bl	80012a8 <MX_DCMI_Init>
  MX_I2C2_Init();
 8001062:	f000 f949 	bl	80012f8 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001066:	f000 f975 	bl	8001354 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  OV7670_Init(&hdcmi, &hi2c2);
 800106a:	494c      	ldr	r1, [pc, #304]	; (800119c <main+0x154>)
 800106c:	484c      	ldr	r0, [pc, #304]	; (80011a0 <main+0x158>)
 800106e:	f000 fa91 	bl	8001594 <OV7670_Init>
  OV7670_UploadSettings();
 8001072:	f000 fad5 	bl	8001620 <OV7670_UploadSettings>

  NRF24_begin(GPIOA, GPIO_PIN_2, GPIO_PIN_1, hspi2);
 8001076:	4c4b      	ldr	r4, [pc, #300]	; (80011a4 <main+0x15c>)
 8001078:	4668      	mov	r0, sp
 800107a:	1d23      	adds	r3, r4, #4
 800107c:	2254      	movs	r2, #84	; 0x54
 800107e:	4619      	mov	r1, r3
 8001080:	f006 f8fe 	bl	8007280 <memcpy>
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	2202      	movs	r2, #2
 8001088:	2104      	movs	r1, #4
 800108a:	4847      	ldr	r0, [pc, #284]	; (80011a8 <main+0x160>)
 800108c:	f7ff fbaa 	bl	80007e4 <NRF24_begin>
  NRF24_stopListening();
 8001090:	f7ff fc86 	bl	80009a0 <NRF24_stopListening>
  NRF24_openWritingPipe(TxpipeAddrs);
 8001094:	4b45      	ldr	r3, [pc, #276]	; (80011ac <main+0x164>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fcdf 	bl	8000a60 <NRF24_openWritingPipe>
  NRF24_setAutoAck(true);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff fd68 	bl	8000b78 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80010a8:	2034      	movs	r0, #52	; 0x34
 80010aa:	f7ff fd18 	bl	8000ade <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 80010ae:	2020      	movs	r0, #32
 80010b0:	f7ff fd2a 	bl	8000b08 <NRF24_setPayloadSize>

  OV7670_StartCap(OV7670_CAP_SINGLE_FRAME, pixel_array);
 80010b4:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <main+0x168>)
 80010b6:	4619      	mov	r1, r3
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 fb05 	bl	80016c8 <OV7670_StartCap>
  HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f000 ff4e 	bl	8001f60 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80010c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c8:	483a      	ldr	r0, [pc, #232]	; (80011b4 <main+0x16c>)
 80010ca:	f003 fa70 	bl	80045ae <HAL_GPIO_TogglePin>

  parseDcmiOutput(pixel_array, myTxData, newIndex++);
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <main+0x170>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	b291      	uxth	r1, r2
 80010d8:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <main+0x170>)
 80010da:	8011      	strh	r1, [r2, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4937      	ldr	r1, [pc, #220]	; (80011bc <main+0x174>)
 80010e0:	4833      	ldr	r0, [pc, #204]	; (80011b0 <main+0x168>)
 80010e2:	f7ff fec9 	bl	8000e78 <parseDcmiOutput>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(NRF24_write(myTxData, 32))
 80010e6:	2120      	movs	r1, #32
 80010e8:	4834      	ldr	r0, [pc, #208]	; (80011bc <main+0x174>)
 80010ea:	f7ff fc65 	bl	80009b8 <NRF24_write>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f8      	beq.n	80010e6 <main+0x9e>
	  {
		  printf("Transmitted Successfully\r\n");
 80010f4:	4832      	ldr	r0, [pc, #200]	; (80011c0 <main+0x178>)
 80010f6:	f005 ff69 	bl	8006fcc <puts>

		  if(newIndex != 4000)	// End Of pixel_array
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <main+0x170>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001104:	d018      	beq.n	8001138 <main+0xf0>
		  {
			  // Sends pixel array index 7 - 16 - 23 - 32 - 39 .....
			  parseDcmiOutput(&pixel_array[(newIndex * 8) - (newIndex % 2)], myTxData, newIndex++);
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <main+0x170>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	00da      	lsls	r2, r3, #3
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <main+0x170>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4a24      	ldr	r2, [pc, #144]	; (80011b0 <main+0x168>)
 800111e:	1898      	adds	r0, r3, r2
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <main+0x170>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	b291      	uxth	r1, r2
 800112a:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <main+0x170>)
 800112c:	8011      	strh	r1, [r2, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	4922      	ldr	r1, [pc, #136]	; (80011bc <main+0x174>)
 8001132:	f7ff fea1 	bl	8000e78 <parseDcmiOutput>
 8001136:	e7d6      	b.n	80010e6 <main+0x9e>
		  }
		  else
		  {
			  myTxData[0] = (uint8_t)((pixel_array[(OV7670_CAP_WIDTH * OV7670_CAP_HEIGHT / 2) - 1] & 0x000000FF));
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <main+0x168>)
 800113a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800113e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <main+0x174>)
 8001146:	701a      	strb	r2, [r3, #0]
			  myTxData[1] = (uint8_t)((pixel_array[(OV7670_CAP_WIDTH * OV7670_CAP_HEIGHT / 2) - 1] & 0x0000FF00) >> 8);
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <main+0x168>)
 800114a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800114e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <main+0x174>)
 8001158:	705a      	strb	r2, [r3, #1]
			  myTxData[2] = (uint8_t)((pixel_array[(OV7670_CAP_WIDTH * OV7670_CAP_HEIGHT / 2) - 1] & 0x00FF0000) >> 16);
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <main+0x168>)
 800115c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001160:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8001164:	0c1b      	lsrs	r3, r3, #16
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <main+0x174>)
 800116a:	709a      	strb	r2, [r3, #2]
			  myTxData[3] = (uint8_t)((pixel_array[(OV7670_CAP_WIDTH * OV7670_CAP_HEIGHT / 2) - 1] & 0xFF000000) >> 24);
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <main+0x168>)
 800116e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001172:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8001176:	0e1b      	lsrs	r3, r3, #24
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <main+0x174>)
 800117c:	70da      	strb	r2, [r3, #3]
			  if(NRF24_write(myTxData, 32))
 800117e:	2120      	movs	r1, #32
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <main+0x174>)
 8001182:	f7ff fc19 	bl	80009b8 <NRF24_write>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d100      	bne.n	800118e <main+0x146>
	  if(NRF24_write(myTxData, 32))
 800118c:	e7ab      	b.n	80010e6 <main+0x9e>
			  {
				  break;
 800118e:	bf00      	nop
 8001190:	2300      	movs	r3, #0
	  }


  }
  /* USER CODE END 3 */
}
 8001192:	4618      	mov	r0, r3
 8001194:	3704      	adds	r7, #4
 8001196:	46bd      	mov	sp, r7
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	bf00      	nop
 800119c:	20000194 	.word	0x20000194
 80011a0:	200000f4 	.word	0x200000f4
 80011a4:	200001e8 	.word	0x200001e8
 80011a8:	40020000 	.word	0x40020000
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000240 	.word	0x20000240
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	2001f660 	.word	0x2001f660
 80011bc:	2001f640 	.word	0x2001f640
 80011c0:	08007cd0 	.word	0x08007cd0

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2230      	movs	r2, #48	; 0x30
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f005 ffda 	bl	800718c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <SystemClock_Config+0xdc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a2b      	ldr	r2, [pc, #172]	; (80012a0 <SystemClock_Config+0xdc>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <SystemClock_Config+0xdc>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <SystemClock_Config+0xe0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <SystemClock_Config+0xe0>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <SystemClock_Config+0xe0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122a:	2302      	movs	r3, #2
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001234:	2308      	movs	r3, #8
 8001236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001238:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800123e:	2302      	movs	r3, #2
 8001240:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001242:	2307      	movs	r3, #7
 8001244:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fb14 	bl	8005878 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001256:	f000 f997 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2302      	movs	r3, #2
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001266:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800126a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800126c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001270:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2105      	movs	r1, #5
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fd75 	bl	8005d68 <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001284:	f000 f980 	bl	8001588 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8001288:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800128c:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8001290:	2000      	movs	r0, #0
 8001292:	f004 fe4f 	bl	8005f34 <HAL_RCC_MCOConfig>
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	; 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_DCMI_Init+0x48>)
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <MX_DCMI_Init+0x4c>)
 80012b0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_DCMI_Init+0x48>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_DCMI_Init+0x48>)
 80012ba:	2220      	movs	r2, #32
 80012bc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_DCMI_Init+0x48>)
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_DCMI_Init+0x48>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_DCMI_Init+0x48>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_DCMI_Init+0x48>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_DCMI_Init+0x48>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_DCMI_Init+0x48>)
 80012de:	f001 f9b9 	bl	8002654 <HAL_DCMI_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 80012e8:	f000 f94e 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200000f4 	.word	0x200000f4
 80012f4:	50050000 	.word	0x50050000

080012f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_I2C2_Init+0x50>)
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <MX_I2C2_Init+0x54>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_I2C2_Init+0x50>)
 8001304:	4a12      	ldr	r2, [pc, #72]	; (8001350 <MX_I2C2_Init+0x58>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_I2C2_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_I2C2_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_I2C2_Init+0x50>)
 8001316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800131a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <MX_I2C2_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_I2C2_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <MX_I2C2_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_I2C2_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	; (8001348 <MX_I2C2_Init+0x50>)
 8001336:	f003 f979 	bl	800462c <HAL_I2C_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001340:	f000 f922 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000194 	.word	0x20000194
 800134c:	40005800 	.word	0x40005800
 8001350:	000186a0 	.word	0x000186a0

08001354 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_SPI2_Init+0x64>)
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <MX_SPI2_Init+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001364:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_SPI2_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_SPI2_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001384:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001388:	2218      	movs	r2, #24
 800138a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_SPI2_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_SPI2_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_SPI2_Init+0x64>)
 80013a0:	220a      	movs	r2, #10
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_SPI2_Init+0x64>)
 80013a6:	f004 ff53 	bl	8006250 <HAL_SPI_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013b0:	f000 f8ea 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001e8 	.word	0x200001e8
 80013bc:	40003800 	.word	0x40003800

080013c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_DMA_Init+0x3c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <MX_DMA_Init+0x3c>)
 80013d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_DMA_Init+0x3c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2039      	movs	r0, #57	; 0x39
 80013e8:	f000 feb9 	bl	800215e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80013ec:	2039      	movs	r0, #57	; 0x39
 80013ee:	f000 fed2 	bl	8002196 <HAL_NVIC_EnableIRQ>

}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b57      	ldr	r3, [pc, #348]	; (8001578 <MX_GPIO_Init+0x178>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a56      	ldr	r2, [pc, #344]	; (8001578 <MX_GPIO_Init+0x178>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b54      	ldr	r3, [pc, #336]	; (8001578 <MX_GPIO_Init+0x178>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b50      	ldr	r3, [pc, #320]	; (8001578 <MX_GPIO_Init+0x178>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <MX_GPIO_Init+0x178>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <MX_GPIO_Init+0x178>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b49      	ldr	r3, [pc, #292]	; (8001578 <MX_GPIO_Init+0x178>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a48      	ldr	r2, [pc, #288]	; (8001578 <MX_GPIO_Init+0x178>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <MX_GPIO_Init+0x178>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <MX_GPIO_Init+0x178>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a41      	ldr	r2, [pc, #260]	; (8001578 <MX_GPIO_Init+0x178>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <MX_GPIO_Init+0x178>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <MX_GPIO_Init+0x178>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <MX_GPIO_Init+0x178>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <MX_GPIO_Init+0x178>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2102      	movs	r1, #2
 80014a6:	4835      	ldr	r0, [pc, #212]	; (800157c <MX_GPIO_Init+0x17c>)
 80014a8:	f003 f868 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2104      	movs	r1, #4
 80014b0:	4832      	ldr	r0, [pc, #200]	; (800157c <MX_GPIO_Init+0x17c>)
 80014b2:	f003 f863 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2120      	movs	r1, #32
 80014ba:	4831      	ldr	r0, [pc, #196]	; (8001580 <MX_GPIO_Init+0x180>)
 80014bc:	f003 f85e 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c6:	482f      	ldr	r0, [pc, #188]	; (8001584 <MX_GPIO_Init+0x184>)
 80014c8:	f003 f858 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014cc:	2301      	movs	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4826      	ldr	r0, [pc, #152]	; (800157c <MX_GPIO_Init+0x17c>)
 80014e2:	f002 feaf 	bl	8004244 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin SPI2_CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|SPI2_CSN_Pin;
 80014e6:	2306      	movs	r3, #6
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2302      	movs	r3, #2
 80014f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	481f      	ldr	r0, [pc, #124]	; (800157c <MX_GPIO_Init+0x17c>)
 80014fe:	f002 fea1 	bl	8004244 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8001502:	2320      	movs	r3, #32
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4819      	ldr	r0, [pc, #100]	; (8001580 <MX_GPIO_Init+0x180>)
 800151a:	f002 fe93 	bl	8004244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800151e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4813      	ldr	r0, [pc, #76]	; (8001584 <MX_GPIO_Init+0x184>)
 8001538:	f002 fe84 	bl	8004244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800153c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <MX_GPIO_Init+0x17c>)
 800155a:	f002 fe73 	bl	8004244 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2006      	movs	r0, #6
 8001564:	f000 fdfb 	bl	800215e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001568:	2006      	movs	r0, #6
 800156a:	f000 fe14 	bl	8002196 <HAL_NVIC_EnableIRQ>

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <OV7670_Init>:
static HAL_StatusTypeDef OV7670_Write(uint8_t regAddr, uint8_t data);
static HAL_StatusTypeDef OV7670_Read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
uint8_t OV7670_Init(DCMI_HandleTypeDef *p_hdcmi, I2C_HandleTypeDef *p_hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
	sp_hdcmi     = p_hdcmi;
 800159e:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <OV7670_Init+0x80>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6013      	str	r3, [r2, #0]
	sp_hi2c      = p_hi2c;
 80015a4:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <OV7670_Init+0x84>)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6013      	str	r3, [r2, #0]
	s_destAddressForContiuousMode = 0;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <OV7670_Init+0x88>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t errNum = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]

	OV7670_ResetHW();
 80015b4:	f000 f8d8 	bl	8001768 <OV7670_ResetHW>

	status = OV7670_ResetSW();
 80015b8:	f000 f8cc 	bl	8001754 <OV7670_ResetSW>
 80015bc:	4603      	mov	r3, r0
 80015be:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	4413      	add	r3, r2
 80015d2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(30);
 80015d4:	201e      	movs	r0, #30
 80015d6:	f000 fcc3 	bl	8001f60 <HAL_Delay>

	uint8_t buffer[4];
	status = OV7670_Read(0x0b, buffer);
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	200b      	movs	r0, #11
 80015e2:	f000 f939 	bl	8001858 <OV7670_Read>
 80015e6:	4603      	mov	r3, r0
 80015e8:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 80015ea:	7bbb      	ldrb	r3, [r7, #14]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	4413      	add	r3, r2
 80015fc:	73fb      	strb	r3, [r7, #15]

	if(buffer[0] != 0x73)
 80015fe:	7a3b      	ldrb	r3, [r7, #8]
 8001600:	2b73      	cmp	r3, #115	; 0x73
 8001602:	d001      	beq.n	8001608 <OV7670_Init+0x74>
		return 255;
 8001604:	23ff      	movs	r3, #255	; 0xff
 8001606:	e000      	b.n	800160a <OV7670_Init+0x76>

	return errNum;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2001f664 	.word	0x2001f664
 8001618:	2001f668 	.word	0x2001f668
 800161c:	2001f66c 	.word	0x2001f66c

08001620 <OV7670_UploadSettings>:

uint8_t OV7670_UploadSettings()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint8_t errNum = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]

	status = OV7670_StopCap();
 800162a:	f000 f887 	bl	800173c <OV7670_StopCap>
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
	errNum += ( status != HAL_OK );
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	4413      	add	r3, r2
 8001644:	73fb      	strb	r3, [r7, #15]

	status = OV7670_ResetSW();
 8001646:	f000 f885 	bl	8001754 <OV7670_ResetSW>
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	errNum += ( status != HAL_OK );
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	4413      	add	r3, r2
 8001660:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(30);
 8001662:	201e      	movs	r0, #30
 8001664:	f000 fc7c 	bl	8001f60 <HAL_Delay>

	for(int i = 0; OV7670_reg[i][0] != REG_END; i++)
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	e01e      	b.n	80016ac <OV7670_UploadSettings+0x8c>
	{
		status = OV7670_Write(OV7670_reg[i][0], OV7670_reg[i][1]);
 800166e:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <OV7670_UploadSettings+0xa4>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001676:	4913      	ldr	r1, [pc, #76]	; (80016c4 <OV7670_UploadSettings+0xa4>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	440b      	add	r3, r1
 800167e:	785b      	ldrb	r3, [r3, #1]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f000 f8c8 	bl	8001818 <OV7670_Write>
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
		errNum += ( status != HAL_OK );
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	4413      	add	r3, r2
 800169e:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(1);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f000 fc5d 	bl	8001f60 <HAL_Delay>
	for(int i = 0; OV7670_reg[i][0] != REG_END; i++)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3301      	adds	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <OV7670_UploadSettings+0xa4>)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016b4:	2bff      	cmp	r3, #255	; 0xff
 80016b6:	d1da      	bne.n	800166e <OV7670_UploadSettings+0x4e>
	}

  return errNum;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	08007cf8 	.word	0x08007cf8

080016c8 <OV7670_StartCap>:

HAL_StatusTypeDef OV7670_StartCap(uint32_t capMode, uint32_t destAddress)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	ret = OV7670_StopCap();
 80016d2:	f000 f833 	bl	800173c <OV7670_StopCap>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]
	if (capMode == OV7670_CAP_CONTINUOUS)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d110      	bne.n	8001702 <OV7670_StartCap+0x3a>
	{
		s_destAddressForContiuousMode = destAddress;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <OV7670_StartCap+0x6c>)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6013      	str	r3, [r2, #0]
		ret |= HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_CAP_WIDTH * OV7670_CAP_HEIGHT/2);
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <OV7670_StartCap+0x70>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	2100      	movs	r1, #0
 80016f2:	f000 fd6b 	bl	80021cc <HAL_DCMI_Start_DMA>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e012      	b.n	8001728 <OV7670_StartCap+0x60>
	}
	else if (capMode == OV7670_CAP_SINGLE_FRAME)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10f      	bne.n	8001728 <OV7670_StartCap+0x60>
	{
		s_destAddressForContiuousMode = 0;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <OV7670_StartCap+0x6c>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
		ret |= HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_CAP_WIDTH * OV7670_CAP_HEIGHT/2);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <OV7670_StartCap+0x70>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	2102      	movs	r1, #2
 800171a:	f000 fd57 	bl	80021cc <HAL_DCMI_Start_DMA>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	4313      	orrs	r3, r2
 8001726:	73fb      	strb	r3, [r7, #15]
	}

  return ret;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2001f66c 	.word	0x2001f66c
 8001738:	2001f664 	.word	0x2001f664

0800173c <OV7670_StopCap>:

HAL_StatusTypeDef OV7670_StopCap()
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	return HAL_DCMI_Stop(sp_hdcmi);
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <OV7670_StopCap+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fde1 	bl	800230c <HAL_DCMI_Stop>
 800174a:	4603      	mov	r3, r0
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2001f664 	.word	0x2001f664

08001754 <OV7670_ResetSW>:

HAL_StatusTypeDef OV7670_ResetSW()
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	return OV7670_Write(0x12, 0x80);
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	2012      	movs	r0, #18
 800175c:	f000 f85c 	bl	8001818 <OV7670_Write>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <OV7670_ResetHW>:

void OV7670_ResetHW()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2120      	movs	r1, #32
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <OV7670_ResetHW+0x28>)
 8001772:	f002 ff03 	bl	800457c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001776:	2064      	movs	r0, #100	; 0x64
 8001778:	f000 fbf2 	bl	8001f60 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2120      	movs	r1, #32
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <OV7670_ResetHW+0x28>)
 8001782:	f002 fefb 	bl	800457c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001786:	2064      	movs	r0, #100	; 0x64
 8001788:	f000 fbea 	bl	8001f60 <HAL_Delay>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40020800 	.word	0x40020800

08001794 <HAL_DCMI_FrameEventCallback>:
	s_cbHsync = cbHsync;
	s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	printf("FRAME %lu\n", HAL_GetTick());
 800179c:	f000 fbd4 	bl	8001f48 <HAL_GetTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4816      	ldr	r0, [pc, #88]	; (8001800 <HAL_DCMI_FrameEventCallback+0x6c>)
 80017a6:	f005 fbab 	bl	8006f00 <iprintf>
	frameCounter++;
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_DCMI_FrameEventCallback+0x70>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	4a14      	ldr	r2, [pc, #80]	; (8001804 <HAL_DCMI_FrameEventCallback+0x70>)
 80017b2:	6013      	str	r3, [r2, #0]

	if(s_cbVsync)
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_DCMI_FrameEventCallback+0x74>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_DCMI_FrameEventCallback+0x34>
		s_cbVsync(s_currentV);
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_DCMI_FrameEventCallback+0x74>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a12      	ldr	r2, [pc, #72]	; (800180c <HAL_DCMI_FrameEventCallback+0x78>)
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	4610      	mov	r0, r2
 80017c6:	4798      	blx	r3

	if(s_destAddressForContiuousMode != 0)
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_DCMI_FrameEventCallback+0x7c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00b      	beq.n	80017e8 <HAL_DCMI_FrameEventCallback+0x54>
	{
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_CAP_WIDTH * OV7670_CAP_HEIGHT/2);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3328      	adds	r3, #40	; 0x28
 80017da:	4619      	mov	r1, r3
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_DCMI_FrameEventCallback+0x7c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80017e4:	f001 f852 	bl	800288c <HAL_DMA_Start_IT>
	}

	s_currentV++;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_DCMI_FrameEventCallback+0x78>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_DCMI_FrameEventCallback+0x78>)
 80017f0:	6013      	str	r3, [r2, #0]
	s_currentH = 0;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_DCMI_FrameEventCallback+0x80>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	08007cec 	.word	0x08007cec
 8001804:	2001f67c 	.word	0x2001f67c
 8001808:	2001f678 	.word	0x2001f678
 800180c:	2001f674 	.word	0x2001f674
 8001810:	2001f66c 	.word	0x2001f66c
 8001814:	2001f670 	.word	0x2001f670

08001818 <OV7670_Write>:


/*** Internal Function Defines ***/

static HAL_StatusTypeDef OV7670_Write(uint8_t regAddr, uint8_t data)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af04      	add	r7, sp, #16
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, OV7670_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <OV7670_Write+0x3c>)
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	b29a      	uxth	r2, r3
 8001830:	2364      	movs	r3, #100	; 0x64
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	2301      	movs	r3, #1
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	1dbb      	adds	r3, r7, #6
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2301      	movs	r3, #1
 800183e:	2142      	movs	r1, #66	; 0x42
 8001840:	f003 fb5c 	bl	8004efc <HAL_I2C_Mem_Write>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]
	} while (ret != HAL_OK && 0);

	return ret;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2001f668 	.word	0x2001f668

08001858 <OV7670_Read>:

static HAL_StatusTypeDef OV7670_Read(uint8_t regAddr, uint8_t *data)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af02      	add	r7, sp, #8
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	do {
    ret = HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, &regAddr, 1, 100);
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <OV7670_Read+0x48>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	1dfa      	adds	r2, r7, #7
 800186a:	2364      	movs	r3, #100	; 0x64
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	2142      	movs	r1, #66	; 0x42
 8001872:	f003 f81f 	bl	80048b4 <HAL_I2C_Master_Transmit>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, OV7670_ADDR, data, 1, 100);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <OV7670_Read+0x48>)
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2301      	movs	r3, #1
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	2142      	movs	r1, #66	; 0x42
 8001888:	f003 f912 	bl	8004ab0 <HAL_I2C_Master_Receive>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	4313      	orrs	r3, r2
 8001894:	73fb      	strb	r3, [r7, #15]
	} while (ret != HAL_OK && 0);

	return ret;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2001f668 	.word	0x2001f668

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <HAL_MspInit+0x4c>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_MspInit+0x4c>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018e2:	2007      	movs	r0, #7
 80018e4:	f000 fc30 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a54      	ldr	r2, [pc, #336]	; (8001a64 <HAL_DCMI_MspInit+0x170>)
 8001912:	4293      	cmp	r3, r2
 8001914:	f040 80a2 	bne.w	8001a5c <HAL_DCMI_MspInit+0x168>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	4b52      	ldr	r3, [pc, #328]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6353      	str	r3, [r2, #52]	; 0x34
 8001928:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 800192a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	4a4a      	ldr	r2, [pc, #296]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6313      	str	r3, [r2, #48]	; 0x30
 8001944:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4a43      	ldr	r2, [pc, #268]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6313      	str	r3, [r2, #48]	; 0x30
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	4a3c      	ldr	r2, [pc, #240]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	6313      	str	r3, [r2, #48]	; 0x30
 800197c:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <HAL_DCMI_MspInit+0x174>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001988:	2350      	movs	r3, #80	; 0x50
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001990:	2302      	movs	r3, #2
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001998:	230d      	movs	r3, #13
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4832      	ldr	r0, [pc, #200]	; (8001a6c <HAL_DCMI_MspInit+0x178>)
 80019a4:	f002 fc4e 	bl	8004244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80019a8:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 80019ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019b2:	2302      	movs	r3, #2
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019ba:	230d      	movs	r3, #13
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	482a      	ldr	r0, [pc, #168]	; (8001a70 <HAL_DCMI_MspInit+0x17c>)
 80019c6:	f002 fc3d 	bl	8004244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80019ca:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019d4:	2302      	movs	r3, #2
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019dc:	230d      	movs	r3, #13
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4823      	ldr	r0, [pc, #140]	; (8001a74 <HAL_DCMI_MspInit+0x180>)
 80019e8:	f002 fc2c 	bl	8004244 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 80019ee:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_DCMI_MspInit+0x188>)
 80019f0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 80019f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 8001a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 8001a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a14:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 8001a18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001a30:	4811      	ldr	r0, [pc, #68]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 8001a32:	f000 fe7d 	bl	8002730 <HAL_DMA_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_DCMI_MspInit+0x14c>
    {
      Error_Handler();
 8001a3c:	f7ff fda4 	bl	8001588 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_DCMI_MspInit+0x184>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 2);
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	2100      	movs	r1, #0
 8001a50:	204e      	movs	r0, #78	; 0x4e
 8001a52:	f000 fb84 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001a56:	204e      	movs	r0, #78	; 0x4e
 8001a58:	f000 fb9d 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001a5c:	bf00      	nop
 8001a5e:	3730      	adds	r7, #48	; 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	50050000 	.word	0x50050000
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020400 	.word	0x40020400
 8001a78:	20000134 	.word	0x20000134
 8001a7c:	40026428 	.word	0x40026428

08001a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_I2C_MspInit+0x84>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12c      	bne.n	8001afc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001abe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480c      	ldr	r0, [pc, #48]	; (8001b0c <HAL_I2C_MspInit+0x8c>)
 8001adc:	f002 fbb2 	bl	8004244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40005800 	.word	0x40005800
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400

08001b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a28      	ldr	r2, [pc, #160]	; (8001bd0 <HAL_SPI_MspInit+0xc0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d14a      	bne.n	8001bc8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_SPI_MspInit+0xc4>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <HAL_SPI_MspInit+0xc4>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_SPI_MspInit+0xc4>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_SPI_MspInit+0xc4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <HAL_SPI_MspInit+0xc4>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_SPI_MspInit+0xc4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_SPI_MspInit+0xc4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <HAL_SPI_MspInit+0xc4>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_SPI_MspInit+0xc4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b86:	230c      	movs	r3, #12
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b96:	2305      	movs	r3, #5
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <HAL_SPI_MspInit+0xc8>)
 8001ba2:	f002 fb4f 	bl	8004244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bb8:	2305      	movs	r3, #5
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <HAL_SPI_MspInit+0xcc>)
 8001bc4:	f002 fb3e 	bl	8004244 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001bc8:	bf00      	nop
 8001bca:	3728      	adds	r7, #40	; 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40003800 	.word	0x40003800
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020400 	.word	0x40020400

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <NMI_Handler+0x4>

08001be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <UsageFault_Handler+0x4>

08001bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2c:	f000 f978 	bl	8001f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f002 fcd3 	bl	80045e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <DMA2_Stream1_IRQHandler+0x10>)
 8001c4a:	f000 ff09 	bl	8002a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000134 	.word	0x20000134

08001c58 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <DCMI_IRQHandler+0x10>)
 8001c5e:	f000 fbb1 	bl	80023c4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200000f4 	.word	0x200000f4

08001c6c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <ITM_SendChar+0x48>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <ITM_SendChar+0x48>)
 8001c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c80:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <ITM_SendChar+0x4c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <ITM_SendChar+0x4c>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001c8e:	bf00      	nop
 8001c90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f8      	beq.n	8001c90 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001c9e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	6013      	str	r3, [r2, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000edfc 	.word	0xe000edfc
 8001cb8:	e0000e00 	.word	0xe0000e00

08001cbc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e00a      	b.n	8001ce4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cce:	f3af 8000 	nop.w
 8001cd2:	4601      	mov	r1, r0
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	60ba      	str	r2, [r7, #8]
 8001cda:	b2ca      	uxtb	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf0      	blt.n	8001cce <_read+0x12>
  }

  return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e009      	b.n	8001d1c <_write+0x26>
  {
  //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	60ba      	str	r2, [r7, #8]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ffab 	bl	8001c6c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf1      	blt.n	8001d08 <_write+0x12>
  }
  return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_close>:

int _close(int file)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d56:	605a      	str	r2, [r3, #4]
  return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <_isatty>:

int _isatty(int file)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da0:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <_sbrk+0x5c>)
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <_sbrk+0x60>)
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <_sbrk+0x64>)
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <_sbrk+0x68>)
 8001db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d207      	bcs.n	8001dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc8:	f005 fa2e 	bl	8007228 <__errno>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	220c      	movs	r2, #12
 8001dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	e009      	b.n	8001dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <_sbrk+0x64>)
 8001de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20020000 	.word	0x20020000
 8001df8:	00000400 	.word	0x00000400
 8001dfc:	2001f680 	.word	0x2001f680
 8001e00:	2001f7d8 	.word	0x2001f7d8

08001e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <SystemInit+0x20>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <SystemInit+0x20>)
 8001e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e2e:	490e      	ldr	r1, [pc, #56]	; (8001e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e30:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e44:	4c0b      	ldr	r4, [pc, #44]	; (8001e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e52:	f7ff ffd7 	bl	8001e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e56:	f005 f9ed 	bl	8007234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5a:	f7ff f8f5 	bl	8001048 <main>
  bx  lr    
 8001e5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e6c:	08007db4 	.word	0x08007db4
  ldr r2, =_sbss
 8001e70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e74:	2001f7d4 	.word	0x2001f7d4

08001e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC_IRQHandler>
	...

08001e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <HAL_Init+0x40>)
 8001e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_Init+0x40>)
 8001e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_Init+0x40>)
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f000 f94f 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f000 f808 	bl	8001ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb0:	f7ff fcf8 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x54>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_InitTick+0x58>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f967 	bl	80021b2 <HAL_SYSTICK_Config>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00e      	b.n	8001f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d80a      	bhi.n	8001f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f000 f92f 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f00:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <HAL_InitTick+0x5c>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e000      	b.n	8001f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000010 	.word	0x20000010
 8001f1c:	2000000c 	.word	0x2000000c

08001f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x20>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_IncTick+0x24>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <HAL_IncTick+0x24>)
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000010 	.word	0x20000010
 8001f44:	2001f684 	.word	0x2001f684

08001f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_GetTick+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	2001f684 	.word	0x2001f684

08001f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff ffee 	bl	8001f48 <HAL_GetTick>
 8001f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d005      	beq.n	8001f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_Delay+0x44>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f86:	bf00      	nop
 8001f88:	f7ff ffde 	bl	8001f48 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8f7      	bhi.n	8001f88 <HAL_Delay+0x28>
  {
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000010 	.word	0x20000010

08001fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fda:	4a04      	ldr	r2, [pc, #16]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	60d3      	str	r3, [r2, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 0307 	and.w	r3, r3, #7
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db0b      	blt.n	8002036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4907      	ldr	r1, [pc, #28]	; (8002044 <__NVIC_EnableIRQ+0x38>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f7ff ff8e 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff29 	bl	8001fa8 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff3e 	bl	8001ff0 <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff8e 	bl	800209c <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff31 	bl	800200c <__NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ffa2 	bl	8002104 <SysTick_Config>
 80021c0:	4603      	mov	r3, r0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_DCMI_Start_DMA+0x20>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e086      	b.n	80022fa <HAL_DCMI_Start_DMA+0x12e>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800220a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0202 	bic.w	r2, r2, #2
 800221a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	4a34      	ldr	r2, [pc, #208]	; (8002304 <HAL_DCMI_Start_DMA+0x138>)
 8002232:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002238:	4a33      	ldr	r2, [pc, #204]	; (8002308 <HAL_DCMI_Start_DMA+0x13c>)
 800223a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	2200      	movs	r2, #0
 8002242:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d20a      	bcs.n	800226e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3328      	adds	r3, #40	; 0x28
 8002262:	4619      	mov	r1, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	f000 fb10 	bl	800288c <HAL_DMA_Start_IT>
 800226c:	e038      	b.n	80022e0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	4a24      	ldr	r2, [pc, #144]	; (8002304 <HAL_DCMI_Start_DMA+0x138>)
 8002274:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8002288:	e009      	b.n	800229e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	085a      	lsrs	r2, r3, #1
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	005a      	lsls	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a6:	d2f0      	bcs.n	800228a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	1e9a      	subs	r2, r3, #2
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3328      	adds	r3, #40	; 0x28
 80022d0:	4619      	mov	r1, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	f000 fe2a 	bl	8002f34 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	080024fd 	.word	0x080024fd
 8002308:	08002627 	.word	0x08002627

0800230c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <HAL_DCMI_Stop+0xb0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	085b      	lsrs	r3, r3, #1
 800231a:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <HAL_DCMI_Stop+0xb4>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_DCMI_Stop+0x2a>
 8002332:	2302      	movs	r3, #2
 8002334:	e03e      	b.n	80023b4 <HAL_DCMI_Stop+0xa8>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1e5a      	subs	r2, r3, #1
 800235a:	60ba      	str	r2, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d108      	bne.n	8002372 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	73fb      	strb	r3, [r7, #15]
      break;
 8002370:	e006      	b.n	8002380 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ea      	bne.n	8002356 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800238e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fad1 	bl	800293c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000008 	.word	0x20000008
 80023c0:	92492493 	.word	0x92492493

080023c4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2204      	movs	r2, #4
 80023e4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	f043 0202 	orr.w	r2, r3, #2
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2204      	movs	r2, #4
 80023f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	4a2f      	ldr	r2, [pc, #188]	; (80024bc <HAL_DCMI_IRQHandler+0xf8>)
 8002400:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fb08 	bl	8002a1c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2202      	movs	r2, #2
 800241c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2204      	movs	r2, #4
 800242e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	4a21      	ldr	r2, [pc, #132]	; (80024bc <HAL_DCMI_IRQHandler+0xf8>)
 8002438:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	4618      	mov	r0, r3
 8002440:	f000 faec 	bl	8002a1c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2210      	movs	r2, #16
 8002454:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f83c 	bl	80024d4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2208      	movs	r2, #8
 800246c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f83a 	bl	80024e8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d019      	beq.n	80024b2 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b02      	cmp	r3, #2
 800248a:	d107      	bne.n	800249c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 021e 	bic.w	r2, r2, #30
 800249a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff f971 	bl	8001794 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	08002627 	.word	0x08002627

080024c0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	2b00      	cmp	r3, #0
 8002514:	d043      	beq.n	800259e <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002522:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d118      	bne.n	8002562 <DCMI_DMAXferCplt+0x66>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d015      	beq.n	8002562 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	00da      	lsls	r2, r3, #3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4413      	add	r3, r2
 800254e:	2200      	movs	r2, #0
 8002550:	4619      	mov	r1, r3
 8002552:	f001 fe37 	bl	80041c4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	1e5a      	subs	r2, r3, #1
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
 8002560:	e044      	b.n	80025ec <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d13c      	bne.n	80025ec <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	00da      	lsls	r2, r3, #3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4413      	add	r3, r2
 800258a:	2201      	movs	r2, #1
 800258c:	4619      	mov	r1, r3
 800258e:	f001 fe19 	bl	80041c4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
 800259c:	e026      	b.n	80025ec <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	e017      	b.n	80025ec <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10f      	bne.n	80025ec <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d0:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	0099      	lsls	r1, r3, #2
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	440a      	add	r2, r1
 80025e2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d112      	bne.n	800261e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d103      	bne.n	800261e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	2b02      	cmp	r3, #2
 800263c:	d003      	beq.n	8002646 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff ff3a 	bl	80024c0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e05f      	b.n	8002726 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff f93a 	bl	80018f4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff f937 	bl	80018f4 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800269c:	f023 0308 	bic.w	r3, r3, #8
 80026a0:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6819      	ldr	r1, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026b6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80026c2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80026ce:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d112      	bne.n	8002706 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7f1b      	ldrb	r3, [r3, #28]
 80026e4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7f5b      	ldrb	r3, [r3, #29]
 80026ea:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80026ec:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7f9b      	ldrb	r3, [r3, #30]
 80026f2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80026f4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7fdb      	ldrb	r3, [r3, #31]
 80026fc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002702:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002704:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 021e 	orr.w	r2, r2, #30
 8002714:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff fc04 	bl	8001f48 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e099      	b.n	8002880 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276c:	e00f      	b.n	800278e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800276e:	f7ff fbeb 	bl	8001f48 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b05      	cmp	r3, #5
 800277a:	d908      	bls.n	800278e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2203      	movs	r2, #3
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e078      	b.n	8002880 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e8      	bne.n	800276e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_DMA_Init+0x158>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d107      	bne.n	80027f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	4313      	orrs	r3, r2
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f023 0307 	bic.w	r3, r3, #7
 800280e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	2b04      	cmp	r3, #4
 8002820:	d117      	bne.n	8002852 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00e      	beq.n	8002852 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fb01 	bl	8002e3c <DMA_CheckFifoParam>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2240      	movs	r2, #64	; 0x40
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800284e:	2301      	movs	r3, #1
 8002850:	e016      	b.n	8002880 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fab8 	bl	8002dd0 <DMA_CalcBaseAndBitshift>
 8002860:	4603      	mov	r3, r0
 8002862:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	223f      	movs	r2, #63	; 0x3f
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	f010803f 	.word	0xf010803f

0800288c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_DMA_Start_IT+0x26>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e040      	b.n	8002934 <HAL_DMA_Start_IT+0xa8>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d12f      	bne.n	8002926 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fa4a 	bl	8002d74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	223f      	movs	r2, #63	; 0x3f
 80028e6:	409a      	lsls	r2, r3
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0216 	orr.w	r2, r2, #22
 80028fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0208 	orr.w	r2, r2, #8
 8002912:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e005      	b.n	8002932 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002932:	7dfb      	ldrb	r3, [r7, #23]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800294a:	f7ff fafd 	bl	8001f48 <HAL_GetTick>
 800294e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d008      	beq.n	800296e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e052      	b.n	8002a14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0216 	bic.w	r2, r2, #22
 800297c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800298c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_DMA_Abort+0x62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0208 	bic.w	r2, r2, #8
 80029ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0201 	bic.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029be:	e013      	b.n	80029e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029c0:	f7ff fac2 	bl	8001f48 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d90c      	bls.n	80029e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2203      	movs	r2, #3
 80029d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e015      	b.n	8002a14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1e4      	bne.n	80029c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	223f      	movs	r2, #63	; 0x3f
 80029fc:	409a      	lsls	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d004      	beq.n	8002a3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00c      	b.n	8002a54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2205      	movs	r2, #5
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a6c:	4b8e      	ldr	r3, [pc, #568]	; (8002ca8 <HAL_DMA_IRQHandler+0x248>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a8e      	ldr	r2, [pc, #568]	; (8002cac <HAL_DMA_IRQHandler+0x24c>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0a9b      	lsrs	r3, r3, #10
 8002a78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01a      	beq.n	8002acc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d013      	beq.n	8002acc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0204 	bic.w	r2, r2, #4
 8002ab2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	2208      	movs	r2, #8
 8002aba:	409a      	lsls	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d012      	beq.n	8002b02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	2201      	movs	r2, #1
 8002af0:	409a      	lsls	r2, r3
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	f043 0202 	orr.w	r2, r3, #2
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2204      	movs	r2, #4
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d012      	beq.n	8002b38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2204      	movs	r2, #4
 8002b26:	409a      	lsls	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	f043 0204 	orr.w	r2, r3, #4
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d043      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03c      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d018      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d108      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d024      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
 8002b8e:	e01f      	b.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01b      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
 8002ba0:	e016      	b.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0208 	bic.w	r2, r2, #8
 8002bbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 808f 	beq.w	8002d00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8087 	beq.w	8002d00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	d136      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0216 	bic.w	r2, r2, #22
 8002c18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d103      	bne.n	8002c3a <HAL_DMA_IRQHandler+0x1da>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0208 	bic.w	r2, r2, #8
 8002c48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	223f      	movs	r2, #63	; 0x3f
 8002c50:	409a      	lsls	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d07e      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
        }
        return;
 8002c76:	e079      	b.n	8002d6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01d      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10d      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d031      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
 8002ca4:	e02c      	b.n	8002d00 <HAL_DMA_IRQHandler+0x2a0>
 8002ca6:	bf00      	nop
 8002ca8:	20000008 	.word	0x20000008
 8002cac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d023      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
 8002cc0:	e01e      	b.n	8002d00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10f      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0210 	bic.w	r2, r2, #16
 8002cde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d032      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d022      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2205      	movs	r2, #5
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d307      	bcc.n	8002d48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f2      	bne.n	8002d2c <HAL_DMA_IRQHandler+0x2cc>
 8002d46:	e000      	b.n	8002d4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
 8002d6a:	e000      	b.n	8002d6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d6c:	bf00      	nop
    }
  }
}
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d108      	bne.n	8002db4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002db2:	e007      	b.n	8002dc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	3b10      	subs	r3, #16
 8002de0:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <DMA_CalcBaseAndBitshift+0x64>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dea:	4a13      	ldr	r2, [pc, #76]	; (8002e38 <DMA_CalcBaseAndBitshift+0x68>)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d909      	bls.n	8002e12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e06:	f023 0303 	bic.w	r3, r3, #3
 8002e0a:	1d1a      	adds	r2, r3, #4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e10:	e007      	b.n	8002e22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	aaaaaaab 	.word	0xaaaaaaab
 8002e38:	08007d68 	.word	0x08007d68

08002e3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d11f      	bne.n	8002e96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d856      	bhi.n	8002f0a <DMA_CheckFifoParam+0xce>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <DMA_CheckFifoParam+0x28>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002e75 	.word	0x08002e75
 8002e68:	08002e87 	.word	0x08002e87
 8002e6c:	08002e75 	.word	0x08002e75
 8002e70:	08002f0b 	.word	0x08002f0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d046      	beq.n	8002f0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e84:	e043      	b.n	8002f0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e8e:	d140      	bne.n	8002f12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e94:	e03d      	b.n	8002f12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9e:	d121      	bne.n	8002ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d837      	bhi.n	8002f16 <DMA_CheckFifoParam+0xda>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <DMA_CheckFifoParam+0x70>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ec3 	.word	0x08002ec3
 8002eb4:	08002ebd 	.word	0x08002ebd
 8002eb8:	08002ed5 	.word	0x08002ed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec0:	e030      	b.n	8002f24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d025      	beq.n	8002f1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed2:	e022      	b.n	8002f1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002edc:	d11f      	bne.n	8002f1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ee2:	e01c      	b.n	8002f1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d903      	bls.n	8002ef2 <DMA_CheckFifoParam+0xb6>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d003      	beq.n	8002ef8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ef0:	e018      	b.n	8002f24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef6:	e015      	b.n	8002f24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00e      	beq.n	8002f22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      break;
 8002f08:	e00b      	b.n	8002f22 <DMA_CheckFifoParam+0xe6>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e00a      	b.n	8002f24 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e008      	b.n	8002f24 <DMA_CheckFifoParam+0xe8>
      break;
 8002f12:	bf00      	nop
 8002f14:	e006      	b.n	8002f24 <DMA_CheckFifoParam+0xe8>
      break;
 8002f16:	bf00      	nop
 8002f18:	e004      	b.n	8002f24 <DMA_CheckFifoParam+0xe8>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e002      	b.n	8002f24 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f1e:	bf00      	nop
 8002f20:	e000      	b.n	8002f24 <DMA_CheckFifoParam+0xe8>
      break;
 8002f22:	bf00      	nop
    }
  } 
  
  return status; 
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop

08002f34 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b80      	cmp	r3, #128	; 0x80
 8002f4c:	d106      	bne.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f001 b911 	b.w	800417e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2240      	movs	r2, #64	; 0x40
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f001 b8ff 	b.w	800417e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	f001 b8f7 	b.w	800417e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f041 80e5 	bne.w	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fc2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f001 f910 	bl	80041f8 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b8d      	ldr	r3, [pc, #564]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d960      	bls.n	80030a6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a8b      	ldr	r2, [pc, #556]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d057      	beq.n	800309e <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a8a      	ldr	r2, [pc, #552]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d050      	beq.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a88      	ldr	r2, [pc, #544]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d049      	beq.n	8003096 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a87      	ldr	r2, [pc, #540]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d042      	beq.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a85      	ldr	r2, [pc, #532]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d03a      	beq.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a84      	ldr	r2, [pc, #528]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d032      	beq.n	8003086 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a82      	ldr	r2, [pc, #520]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d02a      	beq.n	8003080 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a81      	ldr	r2, [pc, #516]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d022      	beq.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a7f      	ldr	r2, [pc, #508]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01a      	beq.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a7e      	ldr	r2, [pc, #504]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d012      	beq.n	800306e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a7c      	ldr	r2, [pc, #496]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00a      	beq.n	8003068 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a7b      	ldr	r2, [pc, #492]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d102      	bne.n	8003062 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 800305c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003060:	e01e      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003062:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003066:	e01b      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003068:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800306c:	e018      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800306e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003072:	e015      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003074:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003078:	e012      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800307a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800307e:	e00f      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003080:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003084:	e00c      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003086:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800308a:	e009      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800308c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003090:	e006      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003092:	2320      	movs	r3, #32
 8003094:	e004      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003096:	2320      	movs	r3, #32
 8003098:	e002      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800309a:	2320      	movs	r3, #32
 800309c:	e000      	b.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800309e:	2320      	movs	r3, #32
 80030a0:	4a69      	ldr	r2, [pc, #420]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80030a2:	60d3      	str	r3, [r2, #12]
 80030a4:	e14f      	b.n	8003346 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d960      	bls.n	8003174 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d057      	beq.n	800316c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a56      	ldr	r2, [pc, #344]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d050      	beq.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a55      	ldr	r2, [pc, #340]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d049      	beq.n	8003164 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a53      	ldr	r2, [pc, #332]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d042      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d03a      	beq.n	800315a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a50      	ldr	r2, [pc, #320]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d032      	beq.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a4f      	ldr	r2, [pc, #316]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d02a      	beq.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a4d      	ldr	r2, [pc, #308]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d022      	beq.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a4c      	ldr	r2, [pc, #304]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d01a      	beq.n	8003142 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a4a      	ldr	r2, [pc, #296]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d012      	beq.n	800313c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a49      	ldr	r2, [pc, #292]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00a      	beq.n	8003136 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a47      	ldr	r2, [pc, #284]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d102      	bne.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800312a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800312e:	e01e      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003130:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003134:	e01b      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003136:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800313a:	e018      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800313c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003140:	e015      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003142:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003146:	e012      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800314c:	e00f      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800314e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003152:	e00c      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003158:	e009      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800315a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800315e:	e006      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003160:	2320      	movs	r3, #32
 8003162:	e004      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003164:	2320      	movs	r3, #32
 8003166:	e002      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003168:	2320      	movs	r3, #32
 800316a:	e000      	b.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800316c:	2320      	movs	r3, #32
 800316e:	4a36      	ldr	r2, [pc, #216]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003170:	6093      	str	r3, [r2, #8]
 8003172:	e0e8      	b.n	8003346 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	4b35      	ldr	r3, [pc, #212]	; (8003250 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800317c:	429a      	cmp	r2, r3
 800317e:	f240 8082 	bls.w	8003286 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d078      	beq.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d071      	beq.n	800327a <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a21      	ldr	r2, [pc, #132]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d06a      	beq.n	8003276 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d063      	beq.n	8003272 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d05b      	beq.n	800326c <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d053      	beq.n	8003266 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d04b      	beq.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d043      	beq.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d03b      	beq.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d012      	beq.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a15      	ldr	r2, [pc, #84]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00a      	beq.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d102      	bne.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80031fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031fe:	e03f      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003200:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003204:	e03c      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003206:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800320a:	e039      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800320c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003210:	e036      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003212:	bf00      	nop
 8003214:	40026458 	.word	0x40026458
 8003218:	40026010 	.word	0x40026010
 800321c:	40026410 	.word	0x40026410
 8003220:	40026070 	.word	0x40026070
 8003224:	40026470 	.word	0x40026470
 8003228:	40026028 	.word	0x40026028
 800322c:	40026428 	.word	0x40026428
 8003230:	40026088 	.word	0x40026088
 8003234:	40026488 	.word	0x40026488
 8003238:	40026040 	.word	0x40026040
 800323c:	40026440 	.word	0x40026440
 8003240:	400260a0 	.word	0x400260a0
 8003244:	400264a0 	.word	0x400264a0
 8003248:	40026400 	.word	0x40026400
 800324c:	400260b8 	.word	0x400260b8
 8003250:	40026058 	.word	0x40026058
 8003254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003258:	e012      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800325a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800325e:	e00f      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003264:	e00c      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003266:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800326a:	e009      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800326c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003270:	e006      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003272:	2320      	movs	r3, #32
 8003274:	e004      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003276:	2320      	movs	r3, #32
 8003278:	e002      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800327a:	2320      	movs	r3, #32
 800327c:	e000      	b.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800327e:	2320      	movs	r3, #32
 8003280:	4a8c      	ldr	r2, [pc, #560]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003282:	60d3      	str	r3, [r2, #12]
 8003284:	e05f      	b.n	8003346 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a8b      	ldr	r2, [pc, #556]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d057      	beq.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a89      	ldr	r2, [pc, #548]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d050      	beq.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a88      	ldr	r2, [pc, #544]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d049      	beq.n	8003338 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a86      	ldr	r2, [pc, #536]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d042      	beq.n	8003334 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a85      	ldr	r2, [pc, #532]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d03a      	beq.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a83      	ldr	r2, [pc, #524]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d032      	beq.n	8003328 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a82      	ldr	r2, [pc, #520]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d02a      	beq.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a80      	ldr	r2, [pc, #512]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d022      	beq.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7f      	ldr	r2, [pc, #508]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d01a      	beq.n	8003316 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a7d      	ldr	r2, [pc, #500]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d012      	beq.n	8003310 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7c      	ldr	r2, [pc, #496]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00a      	beq.n	800330a <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7a      	ldr	r2, [pc, #488]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d102      	bne.n	8003304 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80032fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003302:	e01e      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003304:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003308:	e01b      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800330a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800330e:	e018      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003314:	e015      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003316:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800331a:	e012      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800331c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003320:	e00f      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003326:	e00c      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003328:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800332c:	e009      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800332e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003332:	e006      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003334:	2320      	movs	r3, #32
 8003336:	e004      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003338:	2320      	movs	r3, #32
 800333a:	e002      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800333c:	2320      	movs	r3, #32
 800333e:	e000      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003340:	2320      	movs	r3, #32
 8003342:	4a5c      	ldr	r2, [pc, #368]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003344:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	4b66      	ldr	r3, [pc, #408]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800334e:	429a      	cmp	r2, r3
 8003350:	d960      	bls.n	8003414 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a58      	ldr	r2, [pc, #352]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d057      	beq.n	800340c <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a56      	ldr	r2, [pc, #344]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d050      	beq.n	8003408 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a55      	ldr	r2, [pc, #340]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d049      	beq.n	8003404 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a53      	ldr	r2, [pc, #332]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d042      	beq.n	8003400 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d03a      	beq.n	80033fa <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a50      	ldr	r2, [pc, #320]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d032      	beq.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4f      	ldr	r2, [pc, #316]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d02a      	beq.n	80033ee <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a4d      	ldr	r2, [pc, #308]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d022      	beq.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a4c      	ldr	r2, [pc, #304]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d01a      	beq.n	80033e2 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a4a      	ldr	r2, [pc, #296]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d012      	beq.n	80033dc <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a49      	ldr	r2, [pc, #292]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00a      	beq.n	80033d6 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a47      	ldr	r2, [pc, #284]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d102      	bne.n	80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80033ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033ce:	e01e      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033d4:	e01b      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033da:	e018      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033e0:	e015      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033e6:	e012      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ec:	e00f      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f2:	e00c      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f8:	e009      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fe:	e006      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003400:	2310      	movs	r3, #16
 8003402:	e004      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003404:	2310      	movs	r3, #16
 8003406:	e002      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003408:	2310      	movs	r3, #16
 800340a:	e000      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800340c:	2310      	movs	r3, #16
 800340e:	4a37      	ldr	r2, [pc, #220]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003410:	60d3      	str	r3, [r2, #12]
 8003412:	e14f      	b.n	80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800341c:	429a      	cmp	r2, r3
 800341e:	f240 8082 	bls.w	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a24      	ldr	r2, [pc, #144]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d078      	beq.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d071      	beq.n	800351a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d06a      	beq.n	8003516 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d063      	beq.n	8003512 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d05b      	beq.n	800350c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d053      	beq.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04b      	beq.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a19      	ldr	r2, [pc, #100]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d043      	beq.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d03b      	beq.n	80034f4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a16      	ldr	r2, [pc, #88]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d012      	beq.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a15      	ldr	r2, [pc, #84]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00a      	beq.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d102      	bne.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800349a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800349e:	e03f      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80034a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034a4:	e03c      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80034a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034aa:	e039      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80034ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034b0:	e036      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80034b2:	bf00      	nop
 80034b4:	40026000 	.word	0x40026000
 80034b8:	40026010 	.word	0x40026010
 80034bc:	40026410 	.word	0x40026410
 80034c0:	40026070 	.word	0x40026070
 80034c4:	40026470 	.word	0x40026470
 80034c8:	40026028 	.word	0x40026028
 80034cc:	40026428 	.word	0x40026428
 80034d0:	40026088 	.word	0x40026088
 80034d4:	40026488 	.word	0x40026488
 80034d8:	40026040 	.word	0x40026040
 80034dc:	40026440 	.word	0x40026440
 80034e0:	400260a0 	.word	0x400260a0
 80034e4:	400264a0 	.word	0x400264a0
 80034e8:	40026458 	.word	0x40026458
 80034ec:	40026400 	.word	0x40026400
 80034f0:	400260b8 	.word	0x400260b8
 80034f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034f8:	e012      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80034fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034fe:	e00f      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003504:	e00c      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350a:	e009      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800350c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003510:	e006      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003512:	2310      	movs	r3, #16
 8003514:	e004      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003516:	2310      	movs	r3, #16
 8003518:	e002      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800351a:	2310      	movs	r3, #16
 800351c:	e000      	b.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800351e:	2310      	movs	r3, #16
 8003520:	4a8c      	ldr	r2, [pc, #560]	; (8003754 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8003522:	6093      	str	r3, [r2, #8]
 8003524:	e0c6      	b.n	80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	4b8a      	ldr	r3, [pc, #552]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800352e:	429a      	cmp	r2, r3
 8003530:	d960      	bls.n	80035f4 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a89      	ldr	r2, [pc, #548]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d057      	beq.n	80035ec <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a87      	ldr	r2, [pc, #540]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d050      	beq.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a86      	ldr	r2, [pc, #536]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d049      	beq.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a84      	ldr	r2, [pc, #528]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d042      	beq.n	80035e0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a83      	ldr	r2, [pc, #524]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d03a      	beq.n	80035da <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a81      	ldr	r2, [pc, #516]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d032      	beq.n	80035d4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a80      	ldr	r2, [pc, #512]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d02a      	beq.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7e      	ldr	r2, [pc, #504]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d022      	beq.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a7d      	ldr	r2, [pc, #500]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d01a      	beq.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a7b      	ldr	r2, [pc, #492]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d012      	beq.n	80035bc <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a7a      	ldr	r2, [pc, #488]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00a      	beq.n	80035b6 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a78      	ldr	r2, [pc, #480]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d102      	bne.n	80035b0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80035aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035ae:	e01e      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035b4:	e01b      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035ba:	e018      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035c0:	e015      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035c6:	e012      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035cc:	e00f      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d2:	e00c      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d8:	e009      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035de:	e006      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035e0:	2310      	movs	r3, #16
 80035e2:	e004      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035e4:	2310      	movs	r3, #16
 80035e6:	e002      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035e8:	2310      	movs	r3, #16
 80035ea:	e000      	b.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035ec:	2310      	movs	r3, #16
 80035ee:	4a67      	ldr	r2, [pc, #412]	; (800378c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80035f0:	60d3      	str	r3, [r2, #12]
 80035f2:	e05f      	b.n	80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a58      	ldr	r2, [pc, #352]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d057      	beq.n	80036ae <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a57      	ldr	r2, [pc, #348]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d050      	beq.n	80036aa <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a55      	ldr	r2, [pc, #340]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d049      	beq.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a54      	ldr	r2, [pc, #336]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d042      	beq.n	80036a2 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a52      	ldr	r2, [pc, #328]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d03a      	beq.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a51      	ldr	r2, [pc, #324]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d032      	beq.n	8003696 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a4f      	ldr	r2, [pc, #316]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02a      	beq.n	8003690 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a4e      	ldr	r2, [pc, #312]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a4c      	ldr	r2, [pc, #304]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01a      	beq.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d012      	beq.n	800367e <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a49      	ldr	r2, [pc, #292]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00a      	beq.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a48      	ldr	r2, [pc, #288]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d102      	bne.n	8003672 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 800366c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003670:	e01e      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003672:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003676:	e01b      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003678:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800367c:	e018      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800367e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003682:	e015      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003684:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003688:	e012      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800368a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368e:	e00f      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003694:	e00c      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800369a:	e009      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a0:	e006      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036a2:	2310      	movs	r3, #16
 80036a4:	e004      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036a6:	2310      	movs	r3, #16
 80036a8:	e002      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036aa:	2310      	movs	r3, #16
 80036ac:	e000      	b.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036ae:	2310      	movs	r3, #16
 80036b0:	4a36      	ldr	r2, [pc, #216]	; (800378c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80036b2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	4b35      	ldr	r3, [pc, #212]	; (8003790 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80036bc:	429a      	cmp	r2, r3
 80036be:	f240 8082 	bls.w	80037c6 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a25      	ldr	r2, [pc, #148]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d078      	beq.n	80037be <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a23      	ldr	r2, [pc, #140]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d071      	beq.n	80037ba <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a22      	ldr	r2, [pc, #136]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d06a      	beq.n	80037b6 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a20      	ldr	r2, [pc, #128]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d063      	beq.n	80037b2 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1f      	ldr	r2, [pc, #124]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d05b      	beq.n	80037ac <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d053      	beq.n	80037a6 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d04b      	beq.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d043      	beq.n	800379a <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a19      	ldr	r2, [pc, #100]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d03b      	beq.n	8003794 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d012      	beq.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00a      	beq.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d102      	bne.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800373a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800373e:	e03f      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003740:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003744:	e03c      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003746:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800374a:	e039      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800374c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003750:	e036      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003752:	bf00      	nop
 8003754:	40026400 	.word	0x40026400
 8003758:	40026058 	.word	0x40026058
 800375c:	40026010 	.word	0x40026010
 8003760:	40026410 	.word	0x40026410
 8003764:	40026070 	.word	0x40026070
 8003768:	40026470 	.word	0x40026470
 800376c:	40026028 	.word	0x40026028
 8003770:	40026428 	.word	0x40026428
 8003774:	40026088 	.word	0x40026088
 8003778:	40026488 	.word	0x40026488
 800377c:	40026040 	.word	0x40026040
 8003780:	40026440 	.word	0x40026440
 8003784:	400260a0 	.word	0x400260a0
 8003788:	400264a0 	.word	0x400264a0
 800378c:	40026000 	.word	0x40026000
 8003790:	40026458 	.word	0x40026458
 8003794:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003798:	e012      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800379a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800379e:	e00f      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037a4:	e00c      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037aa:	e009      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b0:	e006      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037b2:	2308      	movs	r3, #8
 80037b4:	e004      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037b6:	2308      	movs	r3, #8
 80037b8:	e002      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037ba:	2308      	movs	r3, #8
 80037bc:	e000      	b.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037be:	2308      	movs	r3, #8
 80037c0:	4a8c      	ldr	r2, [pc, #560]	; (80039f4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80037c2:	60d3      	str	r3, [r2, #12]
 80037c4:	e14e      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b8a      	ldr	r3, [pc, #552]	; (80039f8 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d960      	bls.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a89      	ldr	r2, [pc, #548]	; (80039fc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d057      	beq.n	800388c <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a87      	ldr	r2, [pc, #540]	; (8003a00 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d050      	beq.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a86      	ldr	r2, [pc, #536]	; (8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d049      	beq.n	8003884 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a84      	ldr	r2, [pc, #528]	; (8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d042      	beq.n	8003880 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a83      	ldr	r2, [pc, #524]	; (8003a0c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d03a      	beq.n	800387a <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a81      	ldr	r2, [pc, #516]	; (8003a10 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d032      	beq.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a80      	ldr	r2, [pc, #512]	; (8003a14 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d02a      	beq.n	800386e <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a7e      	ldr	r2, [pc, #504]	; (8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d022      	beq.n	8003868 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7d      	ldr	r2, [pc, #500]	; (8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d01a      	beq.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a7b      	ldr	r2, [pc, #492]	; (8003a20 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d012      	beq.n	800385c <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7a      	ldr	r2, [pc, #488]	; (8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00a      	beq.n	8003856 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a78      	ldr	r2, [pc, #480]	; (8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d102      	bne.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800384a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800384e:	e01e      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003854:	e01b      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003856:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800385a:	e018      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800385c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003860:	e015      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003862:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003866:	e012      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800386c:	e00f      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800386e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003872:	e00c      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003878:	e009      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800387a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800387e:	e006      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003880:	2308      	movs	r3, #8
 8003882:	e004      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003884:	2308      	movs	r3, #8
 8003886:	e002      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003888:	2308      	movs	r3, #8
 800388a:	e000      	b.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800388c:	2308      	movs	r3, #8
 800388e:	4a59      	ldr	r2, [pc, #356]	; (80039f4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003890:	6093      	str	r3, [r2, #8]
 8003892:	e0e7      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	4b64      	ldr	r3, [pc, #400]	; (8003a2c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800389c:	429a      	cmp	r2, r3
 800389e:	d960      	bls.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a55      	ldr	r2, [pc, #340]	; (80039fc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d057      	beq.n	800395a <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a54      	ldr	r2, [pc, #336]	; (8003a00 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d050      	beq.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a52      	ldr	r2, [pc, #328]	; (8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d049      	beq.n	8003952 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a51      	ldr	r2, [pc, #324]	; (8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d042      	beq.n	800394e <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a4f      	ldr	r2, [pc, #316]	; (8003a0c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d03a      	beq.n	8003948 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a4e      	ldr	r2, [pc, #312]	; (8003a10 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d032      	beq.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a4c      	ldr	r2, [pc, #304]	; (8003a14 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d02a      	beq.n	800393c <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a4b      	ldr	r2, [pc, #300]	; (8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a49      	ldr	r2, [pc, #292]	; (8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01a      	beq.n	8003930 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a48      	ldr	r2, [pc, #288]	; (8003a20 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d012      	beq.n	800392a <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a46      	ldr	r2, [pc, #280]	; (8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00a      	beq.n	8003924 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a45      	ldr	r2, [pc, #276]	; (8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d102      	bne.n	800391e <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003918:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800391c:	e01e      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800391e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003922:	e01b      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003924:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003928:	e018      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800392a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800392e:	e015      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003930:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003934:	e012      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800393a:	e00f      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800393c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003940:	e00c      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003946:	e009      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800394c:	e006      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800394e:	2308      	movs	r3, #8
 8003950:	e004      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003952:	2308      	movs	r3, #8
 8003954:	e002      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003956:	2308      	movs	r3, #8
 8003958:	e000      	b.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800395a:	2308      	movs	r3, #8
 800395c:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800395e:	60d3      	str	r3, [r2, #12]
 8003960:	e080      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a25      	ldr	r2, [pc, #148]	; (80039fc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d078      	beq.n	8003a5e <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a23      	ldr	r2, [pc, #140]	; (8003a00 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d071      	beq.n	8003a5a <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d06a      	beq.n	8003a56 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d063      	beq.n	8003a52 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d05b      	beq.n	8003a4c <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d053      	beq.n	8003a46 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d04b      	beq.n	8003a40 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1a      	ldr	r2, [pc, #104]	; (8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d043      	beq.n	8003a3a <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d03b      	beq.n	8003a34 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d012      	beq.n	80039ec <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a16      	ldr	r2, [pc, #88]	; (8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00a      	beq.n	80039e6 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d102      	bne.n	80039e0 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80039da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039de:	e03f      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80039e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e4:	e03c      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80039e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039ea:	e039      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80039ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039f0:	e036      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80039f2:	bf00      	nop
 80039f4:	40026400 	.word	0x40026400
 80039f8:	400260b8 	.word	0x400260b8
 80039fc:	40026010 	.word	0x40026010
 8003a00:	40026410 	.word	0x40026410
 8003a04:	40026070 	.word	0x40026070
 8003a08:	40026470 	.word	0x40026470
 8003a0c:	40026028 	.word	0x40026028
 8003a10:	40026428 	.word	0x40026428
 8003a14:	40026088 	.word	0x40026088
 8003a18:	40026488 	.word	0x40026488
 8003a1c:	40026040 	.word	0x40026040
 8003a20:	40026440 	.word	0x40026440
 8003a24:	400260a0 	.word	0x400260a0
 8003a28:	400264a0 	.word	0x400264a0
 8003a2c:	40026058 	.word	0x40026058
 8003a30:	40026000 	.word	0x40026000
 8003a34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a38:	e012      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a3e:	e00f      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a44:	e00c      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4a:	e009      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a50:	e006      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a52:	2308      	movs	r3, #8
 8003a54:	e004      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a56:	2308      	movs	r3, #8
 8003a58:	e002      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	e000      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a5e:	2308      	movs	r3, #8
 8003a60:	4a8a      	ldr	r2, [pc, #552]	; (8003c8c <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003a62:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b89      	ldr	r3, [pc, #548]	; (8003c90 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d960      	bls.n	8003b32 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a87      	ldr	r2, [pc, #540]	; (8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d057      	beq.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a86      	ldr	r2, [pc, #536]	; (8003c98 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d050      	beq.n	8003b26 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a84      	ldr	r2, [pc, #528]	; (8003c9c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d049      	beq.n	8003b22 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a83      	ldr	r2, [pc, #524]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d042      	beq.n	8003b1e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a81      	ldr	r2, [pc, #516]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d03a      	beq.n	8003b18 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a80      	ldr	r2, [pc, #512]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d032      	beq.n	8003b12 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a7e      	ldr	r2, [pc, #504]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d02a      	beq.n	8003b0c <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a7d      	ldr	r2, [pc, #500]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d022      	beq.n	8003b06 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a7b      	ldr	r2, [pc, #492]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01a      	beq.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7a      	ldr	r2, [pc, #488]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d012      	beq.n	8003afa <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a78      	ldr	r2, [pc, #480]	; (8003cbc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00a      	beq.n	8003af4 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a77      	ldr	r2, [pc, #476]	; (8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d102      	bne.n	8003aee <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003ae8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003aec:	e01e      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003af2:	e01b      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003af4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003af8:	e018      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003afa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003afe:	e015      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b04:	e012      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b0a:	e00f      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b10:	e00c      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b16:	e009      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b1c:	e006      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b1e:	2304      	movs	r3, #4
 8003b20:	e004      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b22:	2304      	movs	r3, #4
 8003b24:	e002      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b26:	2304      	movs	r3, #4
 8003b28:	e000      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	4a65      	ldr	r2, [pc, #404]	; (8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003b2e:	60d3      	str	r3, [r2, #12]
 8003b30:	e150      	b.n	8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b63      	ldr	r3, [pc, #396]	; (8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d960      	bls.n	8003c00 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a54      	ldr	r2, [pc, #336]	; (8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d057      	beq.n	8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a52      	ldr	r2, [pc, #328]	; (8003c98 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d050      	beq.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a51      	ldr	r2, [pc, #324]	; (8003c9c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d049      	beq.n	8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a4f      	ldr	r2, [pc, #316]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d042      	beq.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4e      	ldr	r2, [pc, #312]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d03a      	beq.n	8003be6 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a4c      	ldr	r2, [pc, #304]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d032      	beq.n	8003be0 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a4b      	ldr	r2, [pc, #300]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d02a      	beq.n	8003bda <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a49      	ldr	r2, [pc, #292]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d022      	beq.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a48      	ldr	r2, [pc, #288]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d01a      	beq.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d012      	beq.n	8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a45      	ldr	r2, [pc, #276]	; (8003cbc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00a      	beq.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a43      	ldr	r2, [pc, #268]	; (8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d102      	bne.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003bb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bba:	e01e      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bc0:	e01b      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bc6:	e018      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bcc:	e015      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bd2:	e012      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd8:	e00f      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bde:	e00c      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be4:	e009      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bea:	e006      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bec:	2304      	movs	r3, #4
 8003bee:	e004      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	e002      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e000      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	4a32      	ldr	r2, [pc, #200]	; (8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003bfc:	6093      	str	r3, [r2, #8]
 8003bfe:	e0e9      	b.n	8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b31      	ldr	r3, [pc, #196]	; (8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f240 8083 	bls.w	8003d14 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d079      	beq.n	8003d0c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d072      	beq.n	8003d08 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d06b      	beq.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d064      	beq.n	8003d00 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d05c      	beq.n	8003cfa <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d054      	beq.n	8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d04c      	beq.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d044      	beq.n	8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d03c      	beq.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d034      	beq.n	8003cdc <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a11      	ldr	r2, [pc, #68]	; (8003cbc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d02c      	beq.n	8003cd6 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0f      	ldr	r2, [pc, #60]	; (8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d124      	bne.n	8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003c86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c8a:	e040      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003c8c:	40026000 	.word	0x40026000
 8003c90:	40026458 	.word	0x40026458
 8003c94:	40026010 	.word	0x40026010
 8003c98:	40026410 	.word	0x40026410
 8003c9c:	40026070 	.word	0x40026070
 8003ca0:	40026470 	.word	0x40026470
 8003ca4:	40026028 	.word	0x40026028
 8003ca8:	40026428 	.word	0x40026428
 8003cac:	40026088 	.word	0x40026088
 8003cb0:	40026488 	.word	0x40026488
 8003cb4:	40026040 	.word	0x40026040
 8003cb8:	40026440 	.word	0x40026440
 8003cbc:	400260a0 	.word	0x400260a0
 8003cc0:	400264a0 	.word	0x400264a0
 8003cc4:	40026400 	.word	0x40026400
 8003cc8:	400260b8 	.word	0x400260b8
 8003ccc:	40026058 	.word	0x40026058
 8003cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cd4:	e01b      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003cd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cda:	e018      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003cdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ce0:	e015      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ce2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ce6:	e012      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cec:	e00f      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf2:	e00c      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf8:	e009      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfe:	e006      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d00:	2304      	movs	r3, #4
 8003d02:	e004      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d04:	2304      	movs	r3, #4
 8003d06:	e002      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	e000      	b.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	4a8b      	ldr	r2, [pc, #556]	; (8003f3c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003d10:	60d3      	str	r3, [r2, #12]
 8003d12:	e05f      	b.n	8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a89      	ldr	r2, [pc, #548]	; (8003f40 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d057      	beq.n	8003dce <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a88      	ldr	r2, [pc, #544]	; (8003f44 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d050      	beq.n	8003dca <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a86      	ldr	r2, [pc, #536]	; (8003f48 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d049      	beq.n	8003dc6 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a85      	ldr	r2, [pc, #532]	; (8003f4c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d042      	beq.n	8003dc2 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a83      	ldr	r2, [pc, #524]	; (8003f50 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d03a      	beq.n	8003dbc <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a82      	ldr	r2, [pc, #520]	; (8003f54 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d032      	beq.n	8003db6 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a80      	ldr	r2, [pc, #512]	; (8003f58 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d02a      	beq.n	8003db0 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7f      	ldr	r2, [pc, #508]	; (8003f5c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a7d      	ldr	r2, [pc, #500]	; (8003f60 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01a      	beq.n	8003da4 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7c      	ldr	r2, [pc, #496]	; (8003f64 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d012      	beq.n	8003d9e <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a7a      	ldr	r2, [pc, #488]	; (8003f68 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00a      	beq.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a79      	ldr	r2, [pc, #484]	; (8003f6c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d102      	bne.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003d8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d90:	e01e      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003d92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d96:	e01b      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003d98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d9c:	e018      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003d9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003da2:	e015      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003da4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003da8:	e012      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dae:	e00f      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003db4:	e00c      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dba:	e009      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc0:	e006      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	e004      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	e002      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	e000      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	4a5a      	ldr	r2, [pc, #360]	; (8003f3c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003dd2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d95c      	bls.n	8003e9a <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a56      	ldr	r2, [pc, #344]	; (8003f40 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d053      	beq.n	8003e92 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a55      	ldr	r2, [pc, #340]	; (8003f44 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d04c      	beq.n	8003e8e <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a53      	ldr	r2, [pc, #332]	; (8003f48 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d045      	beq.n	8003e8a <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a52      	ldr	r2, [pc, #328]	; (8003f4c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d03e      	beq.n	8003e86 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a50      	ldr	r2, [pc, #320]	; (8003f50 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d037      	beq.n	8003e82 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a4f      	ldr	r2, [pc, #316]	; (8003f54 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d030      	beq.n	8003e7e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a4d      	ldr	r2, [pc, #308]	; (8003f58 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d029      	beq.n	8003e7a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a4c      	ldr	r2, [pc, #304]	; (8003f5c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d022      	beq.n	8003e76 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a4a      	ldr	r2, [pc, #296]	; (8003f60 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01a      	beq.n	8003e70 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a49      	ldr	r2, [pc, #292]	; (8003f64 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d012      	beq.n	8003e6a <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a47      	ldr	r2, [pc, #284]	; (8003f68 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00a      	beq.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a46      	ldr	r2, [pc, #280]	; (8003f6c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d102      	bne.n	8003e5e <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e5c:	e01a      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e62:	e017      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e68:	e014      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e6e:	e011      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e74:	e00e      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e76:	2340      	movs	r3, #64	; 0x40
 8003e78:	e00c      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e7a:	2340      	movs	r3, #64	; 0x40
 8003e7c:	e00a      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e7e:	2340      	movs	r3, #64	; 0x40
 8003e80:	e008      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	e006      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e004      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e002      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e92:	2301      	movs	r3, #1
 8003e94:	4a37      	ldr	r2, [pc, #220]	; (8003f74 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003e96:	60d3      	str	r3, [r2, #12]
 8003e98:	e141      	b.n	800411e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4b35      	ldr	r3, [pc, #212]	; (8003f78 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d97c      	bls.n	8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d073      	beq.n	8003f98 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d06c      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d065      	beq.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a20      	ldr	r2, [pc, #128]	; (8003f4c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d05e      	beq.n	8003f8c <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d057      	beq.n	8003f88 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d050      	beq.n	8003f84 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d049      	beq.n	8003f80 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d042      	beq.n	8003f7c <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a19      	ldr	r2, [pc, #100]	; (8003f60 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01a      	beq.n	8003f36 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d012      	beq.n	8003f30 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00a      	beq.n	8003f2a <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d102      	bne.n	8003f24 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f22:	e03a      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f28:	e037      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f2e:	e034      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f34:	e031      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f3a:	e02e      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f3c:	40026000 	.word	0x40026000
 8003f40:	40026010 	.word	0x40026010
 8003f44:	40026410 	.word	0x40026410
 8003f48:	40026070 	.word	0x40026070
 8003f4c:	40026470 	.word	0x40026470
 8003f50:	40026028 	.word	0x40026028
 8003f54:	40026428 	.word	0x40026428
 8003f58:	40026088 	.word	0x40026088
 8003f5c:	40026488 	.word	0x40026488
 8003f60:	40026040 	.word	0x40026040
 8003f64:	40026440 	.word	0x40026440
 8003f68:	400260a0 	.word	0x400260a0
 8003f6c:	400264a0 	.word	0x400264a0
 8003f70:	40026458 	.word	0x40026458
 8003f74:	40026400 	.word	0x40026400
 8003f78:	400260b8 	.word	0x400260b8
 8003f7c:	2340      	movs	r3, #64	; 0x40
 8003f7e:	e00c      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f80:	2340      	movs	r3, #64	; 0x40
 8003f82:	e00a      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f84:	2340      	movs	r3, #64	; 0x40
 8003f86:	e008      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f88:	2340      	movs	r3, #64	; 0x40
 8003f8a:	e006      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e004      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e002      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	4a7b      	ldr	r2, [pc, #492]	; (8004188 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003f9c:	6093      	str	r3, [r2, #8]
 8003f9e:	e0be      	b.n	800411e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b79      	ldr	r3, [pc, #484]	; (800418c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d95c      	bls.n	8004066 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a77      	ldr	r2, [pc, #476]	; (8004190 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d053      	beq.n	800405e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a76      	ldr	r2, [pc, #472]	; (8004194 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d04c      	beq.n	800405a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a74      	ldr	r2, [pc, #464]	; (8004198 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d045      	beq.n	8004056 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a73      	ldr	r2, [pc, #460]	; (800419c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d03e      	beq.n	8004052 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a71      	ldr	r2, [pc, #452]	; (80041a0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d037      	beq.n	800404e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a70      	ldr	r2, [pc, #448]	; (80041a4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d030      	beq.n	800404a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a6e      	ldr	r2, [pc, #440]	; (80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d029      	beq.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6d      	ldr	r2, [pc, #436]	; (80041ac <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a6b      	ldr	r2, [pc, #428]	; (80041b0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01a      	beq.n	800403c <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a6a      	ldr	r2, [pc, #424]	; (80041b4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d012      	beq.n	8004036 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a68      	ldr	r2, [pc, #416]	; (80041b8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00a      	beq.n	8004030 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a67      	ldr	r2, [pc, #412]	; (80041bc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d102      	bne.n	800402a <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8004024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004028:	e01a      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800402a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800402e:	e017      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004034:	e014      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800403a:	e011      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800403c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004040:	e00e      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004042:	2340      	movs	r3, #64	; 0x40
 8004044:	e00c      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004046:	2340      	movs	r3, #64	; 0x40
 8004048:	e00a      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	e008      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	e006      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004052:	2301      	movs	r3, #1
 8004054:	e004      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004056:	2301      	movs	r3, #1
 8004058:	e002      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800405e:	2301      	movs	r3, #1
 8004060:	4a57      	ldr	r2, [pc, #348]	; (80041c0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004062:	60d3      	str	r3, [r2, #12]
 8004064:	e05b      	b.n	800411e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a49      	ldr	r2, [pc, #292]	; (8004190 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d053      	beq.n	8004118 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a47      	ldr	r2, [pc, #284]	; (8004194 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d04c      	beq.n	8004114 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a46      	ldr	r2, [pc, #280]	; (8004198 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d045      	beq.n	8004110 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a44      	ldr	r2, [pc, #272]	; (800419c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d03e      	beq.n	800410c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a43      	ldr	r2, [pc, #268]	; (80041a0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d037      	beq.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a41      	ldr	r2, [pc, #260]	; (80041a4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d030      	beq.n	8004104 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a40      	ldr	r2, [pc, #256]	; (80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d029      	beq.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a3e      	ldr	r2, [pc, #248]	; (80041ac <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d022      	beq.n	80040fc <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a3d      	ldr	r2, [pc, #244]	; (80041b0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d01a      	beq.n	80040f6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a3b      	ldr	r2, [pc, #236]	; (80041b4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d012      	beq.n	80040f0 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3a      	ldr	r2, [pc, #232]	; (80041b8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00a      	beq.n	80040ea <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a38      	ldr	r2, [pc, #224]	; (80041bc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d102      	bne.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80040de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040e2:	e01a      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80040e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040e8:	e017      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80040ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ee:	e014      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80040f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040f4:	e011      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80040f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040fa:	e00e      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80040fc:	2340      	movs	r3, #64	; 0x40
 80040fe:	e00c      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004100:	2340      	movs	r3, #64	; 0x40
 8004102:	e00a      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004104:	2340      	movs	r3, #64	; 0x40
 8004106:	e008      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004108:	2340      	movs	r3, #64	; 0x40
 800410a:	e006      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800410c:	2301      	movs	r3, #1
 800410e:	e004      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004110:	2301      	movs	r3, #1
 8004112:	e002      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004118:	2301      	movs	r3, #1
 800411a:	4a29      	ldr	r2, [pc, #164]	; (80041c0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800411c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0216 	orr.w	r2, r2, #22
 800412c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800413c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0208 	orr.w	r2, r2, #8
 800415c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0201 	orr.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e005      	b.n	800417c <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004178:	2302      	movs	r3, #2
 800417a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800417c:	7dfb      	ldrb	r3, [r7, #23]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40026400 	.word	0x40026400
 800418c:	40026058 	.word	0x40026058
 8004190:	40026010 	.word	0x40026010
 8004194:	40026410 	.word	0x40026410
 8004198:	40026070 	.word	0x40026070
 800419c:	40026470 	.word	0x40026470
 80041a0:	40026028 	.word	0x40026028
 80041a4:	40026428 	.word	0x40026428
 80041a8:	40026088 	.word	0x40026088
 80041ac:	40026488 	.word	0x40026488
 80041b0:	40026040 	.word	0x40026040
 80041b4:	40026440 	.word	0x40026440
 80041b8:	400260a0 	.word	0x400260a0
 80041bc:	400264a0 	.word	0x400264a0
 80041c0:	40026000 	.word	0x40026000

080041c4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	60da      	str	r2, [r3, #12]
 80041e0:	e003      	b.n	80041ea <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d108      	bne.n	8004228 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004226:	e007      	b.n	8004238 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	60da      	str	r2, [r3, #12]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004244:	b480      	push	{r7}
 8004246:	b089      	sub	sp, #36	; 0x24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e16b      	b.n	8004538 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004260:	2201      	movs	r2, #1
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	429a      	cmp	r2, r3
 800427a:	f040 815a 	bne.w	8004532 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d005      	beq.n	8004296 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004292:	2b02      	cmp	r3, #2
 8004294:	d130      	bne.n	80042f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	2203      	movs	r2, #3
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042cc:	2201      	movs	r2, #1
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 0201 	and.w	r2, r3, #1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b03      	cmp	r3, #3
 8004302:	d017      	beq.n	8004334 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	2203      	movs	r2, #3
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d123      	bne.n	8004388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	08da      	lsrs	r2, r3, #3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3208      	adds	r2, #8
 8004348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	220f      	movs	r2, #15
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	08da      	lsrs	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3208      	adds	r2, #8
 8004382:	69b9      	ldr	r1, [r7, #24]
 8004384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	2203      	movs	r2, #3
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0203 	and.w	r2, r3, #3
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80b4 	beq.w	8004532 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b60      	ldr	r3, [pc, #384]	; (8004550 <HAL_GPIO_Init+0x30c>)
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	4a5f      	ldr	r2, [pc, #380]	; (8004550 <HAL_GPIO_Init+0x30c>)
 80043d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d8:	6453      	str	r3, [r2, #68]	; 0x44
 80043da:	4b5d      	ldr	r3, [pc, #372]	; (8004550 <HAL_GPIO_Init+0x30c>)
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043e6:	4a5b      	ldr	r2, [pc, #364]	; (8004554 <HAL_GPIO_Init+0x310>)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	089b      	lsrs	r3, r3, #2
 80043ec:	3302      	adds	r3, #2
 80043ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	220f      	movs	r2, #15
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4013      	ands	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a52      	ldr	r2, [pc, #328]	; (8004558 <HAL_GPIO_Init+0x314>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d02b      	beq.n	800446a <HAL_GPIO_Init+0x226>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a51      	ldr	r2, [pc, #324]	; (800455c <HAL_GPIO_Init+0x318>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d025      	beq.n	8004466 <HAL_GPIO_Init+0x222>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a50      	ldr	r2, [pc, #320]	; (8004560 <HAL_GPIO_Init+0x31c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01f      	beq.n	8004462 <HAL_GPIO_Init+0x21e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a4f      	ldr	r2, [pc, #316]	; (8004564 <HAL_GPIO_Init+0x320>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d019      	beq.n	800445e <HAL_GPIO_Init+0x21a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a4e      	ldr	r2, [pc, #312]	; (8004568 <HAL_GPIO_Init+0x324>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_GPIO_Init+0x216>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a4d      	ldr	r2, [pc, #308]	; (800456c <HAL_GPIO_Init+0x328>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00d      	beq.n	8004456 <HAL_GPIO_Init+0x212>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4c      	ldr	r2, [pc, #304]	; (8004570 <HAL_GPIO_Init+0x32c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d007      	beq.n	8004452 <HAL_GPIO_Init+0x20e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a4b      	ldr	r2, [pc, #300]	; (8004574 <HAL_GPIO_Init+0x330>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d101      	bne.n	800444e <HAL_GPIO_Init+0x20a>
 800444a:	2307      	movs	r3, #7
 800444c:	e00e      	b.n	800446c <HAL_GPIO_Init+0x228>
 800444e:	2308      	movs	r3, #8
 8004450:	e00c      	b.n	800446c <HAL_GPIO_Init+0x228>
 8004452:	2306      	movs	r3, #6
 8004454:	e00a      	b.n	800446c <HAL_GPIO_Init+0x228>
 8004456:	2305      	movs	r3, #5
 8004458:	e008      	b.n	800446c <HAL_GPIO_Init+0x228>
 800445a:	2304      	movs	r3, #4
 800445c:	e006      	b.n	800446c <HAL_GPIO_Init+0x228>
 800445e:	2303      	movs	r3, #3
 8004460:	e004      	b.n	800446c <HAL_GPIO_Init+0x228>
 8004462:	2302      	movs	r3, #2
 8004464:	e002      	b.n	800446c <HAL_GPIO_Init+0x228>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_GPIO_Init+0x228>
 800446a:	2300      	movs	r3, #0
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f002 0203 	and.w	r2, r2, #3
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	4093      	lsls	r3, r2
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800447c:	4935      	ldr	r1, [pc, #212]	; (8004554 <HAL_GPIO_Init+0x310>)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	3302      	adds	r3, #2
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448a:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <HAL_GPIO_Init+0x334>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ae:	4a32      	ldr	r2, [pc, #200]	; (8004578 <HAL_GPIO_Init+0x334>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b4:	4b30      	ldr	r3, [pc, #192]	; (8004578 <HAL_GPIO_Init+0x334>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d8:	4a27      	ldr	r2, [pc, #156]	; (8004578 <HAL_GPIO_Init+0x334>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044de:	4b26      	ldr	r3, [pc, #152]	; (8004578 <HAL_GPIO_Init+0x334>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004502:	4a1d      	ldr	r2, [pc, #116]	; (8004578 <HAL_GPIO_Init+0x334>)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <HAL_GPIO_Init+0x334>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800452c:	4a12      	ldr	r2, [pc, #72]	; (8004578 <HAL_GPIO_Init+0x334>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	f67f ae90 	bls.w	8004260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	40013800 	.word	0x40013800
 8004558:	40020000 	.word	0x40020000
 800455c:	40020400 	.word	0x40020400
 8004560:	40020800 	.word	0x40020800
 8004564:	40020c00 	.word	0x40020c00
 8004568:	40021000 	.word	0x40021000
 800456c:	40021400 	.word	0x40021400
 8004570:	40021800 	.word	0x40021800
 8004574:	40021c00 	.word	0x40021c00
 8004578:	40013c00 	.word	0x40013c00

0800457c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
 8004588:	4613      	mov	r3, r2
 800458a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800458c:	787b      	ldrb	r3, [r7, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004598:	e003      	b.n	80045a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	041a      	lsls	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	619a      	str	r2, [r3, #24]
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045c0:	887a      	ldrh	r2, [r7, #2]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4013      	ands	r3, r2
 80045c6:	041a      	lsls	r2, r3, #16
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	43d9      	mvns	r1, r3
 80045cc:	887b      	ldrh	r3, [r7, #2]
 80045ce:	400b      	ands	r3, r1
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	619a      	str	r2, [r3, #24]
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d006      	beq.n	8004608 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045fa:	4a05      	ldr	r2, [pc, #20]	; (8004610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f806 	bl	8004614 <HAL_GPIO_EXTI_Callback>
  }
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40013c00 	.word	0x40013c00

08004614 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e12b      	b.n	8004896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fd fa14 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2224      	movs	r2, #36	; 0x24
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800467e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800468e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004690:	f001 fdca 	bl	8006228 <HAL_RCC_GetPCLK1Freq>
 8004694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4a81      	ldr	r2, [pc, #516]	; (80048a0 <HAL_I2C_Init+0x274>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d807      	bhi.n	80046b0 <HAL_I2C_Init+0x84>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a80      	ldr	r2, [pc, #512]	; (80048a4 <HAL_I2C_Init+0x278>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bf94      	ite	ls
 80046a8:	2301      	movls	r3, #1
 80046aa:	2300      	movhi	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e006      	b.n	80046be <HAL_I2C_Init+0x92>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a7d      	ldr	r2, [pc, #500]	; (80048a8 <HAL_I2C_Init+0x27c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	bf94      	ite	ls
 80046b8:	2301      	movls	r3, #1
 80046ba:	2300      	movhi	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0e7      	b.n	8004896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a78      	ldr	r2, [pc, #480]	; (80048ac <HAL_I2C_Init+0x280>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0c9b      	lsrs	r3, r3, #18
 80046d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a6a      	ldr	r2, [pc, #424]	; (80048a0 <HAL_I2C_Init+0x274>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d802      	bhi.n	8004700 <HAL_I2C_Init+0xd4>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3301      	adds	r3, #1
 80046fe:	e009      	b.n	8004714 <HAL_I2C_Init+0xe8>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	4a69      	ldr	r2, [pc, #420]	; (80048b0 <HAL_I2C_Init+0x284>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	3301      	adds	r3, #1
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	430b      	orrs	r3, r1
 800471a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004726:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	495c      	ldr	r1, [pc, #368]	; (80048a0 <HAL_I2C_Init+0x274>)
 8004730:	428b      	cmp	r3, r1
 8004732:	d819      	bhi.n	8004768 <HAL_I2C_Init+0x13c>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1e59      	subs	r1, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004742:	1c59      	adds	r1, r3, #1
 8004744:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004748:	400b      	ands	r3, r1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_I2C_Init+0x138>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1e59      	subs	r1, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	fbb1 f3f3 	udiv	r3, r1, r3
 800475c:	3301      	adds	r3, #1
 800475e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004762:	e051      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 8004764:	2304      	movs	r3, #4
 8004766:	e04f      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d111      	bne.n	8004794 <HAL_I2C_Init+0x168>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1e58      	subs	r0, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	440b      	add	r3, r1
 800477e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e012      	b.n	80047ba <HAL_I2C_Init+0x18e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1e58      	subs	r0, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	0099      	lsls	r1, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047aa:	3301      	adds	r3, #1
 80047ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Init+0x196>
 80047be:	2301      	movs	r3, #1
 80047c0:	e022      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10e      	bne.n	80047e8 <HAL_I2C_Init+0x1bc>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1e58      	subs	r0, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6859      	ldr	r1, [r3, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	440b      	add	r3, r1
 80047d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	e00f      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1e58      	subs	r0, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	0099      	lsls	r1, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	6809      	ldr	r1, [r1, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6911      	ldr	r1, [r2, #16]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68d2      	ldr	r2, [r2, #12]
 8004842:	4311      	orrs	r1, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	430b      	orrs	r3, r1
 800484a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	000186a0 	.word	0x000186a0
 80048a4:	001e847f 	.word	0x001e847f
 80048a8:	003d08ff 	.word	0x003d08ff
 80048ac:	431bde83 	.word	0x431bde83
 80048b0:	10624dd3 	.word	0x10624dd3

080048b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	607a      	str	r2, [r7, #4]
 80048be:	461a      	mov	r2, r3
 80048c0:	460b      	mov	r3, r1
 80048c2:	817b      	strh	r3, [r7, #10]
 80048c4:	4613      	mov	r3, r2
 80048c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048c8:	f7fd fb3e 	bl	8001f48 <HAL_GetTick>
 80048cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	f040 80e0 	bne.w	8004a9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	2319      	movs	r3, #25
 80048e2:	2201      	movs	r2, #1
 80048e4:	4970      	ldr	r1, [pc, #448]	; (8004aa8 <HAL_I2C_Master_Transmit+0x1f4>)
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fde8 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
 80048f4:	e0d3      	b.n	8004a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_I2C_Master_Transmit+0x50>
 8004900:	2302      	movs	r3, #2
 8004902:	e0cc      	b.n	8004a9e <HAL_I2C_Master_Transmit+0x1ea>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b01      	cmp	r3, #1
 8004918:	d007      	beq.n	800492a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004938:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2221      	movs	r2, #33	; 0x21
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2210      	movs	r2, #16
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	893a      	ldrh	r2, [r7, #8]
 800495a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a50      	ldr	r2, [pc, #320]	; (8004aac <HAL_I2C_Master_Transmit+0x1f8>)
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800496c:	8979      	ldrh	r1, [r7, #10]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fbbc 	bl	80050f0 <I2C_MasterRequestWrite>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e08d      	b.n	8004a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004998:	e066      	b.n	8004a68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	6a39      	ldr	r1, [r7, #32]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fe62 	bl	8005668 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00d      	beq.n	80049c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d107      	bne.n	80049c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e06b      	b.n	8004a9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	781a      	ldrb	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d11b      	bne.n	8004a3c <HAL_I2C_Master_Transmit+0x188>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d017      	beq.n	8004a3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	781a      	ldrb	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	6a39      	ldr	r1, [r7, #32]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fe52 	bl	80056ea <I2C_WaitOnBTFFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d107      	bne.n	8004a64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e01a      	b.n	8004a9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d194      	bne.n	800499a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e000      	b.n	8004a9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	00100002 	.word	0x00100002
 8004aac:	ffff0000 	.word	0xffff0000

08004ab0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08c      	sub	sp, #48	; 0x30
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	461a      	mov	r2, r3
 8004abc:	460b      	mov	r3, r1
 8004abe:	817b      	strh	r3, [r7, #10]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ac4:	f7fd fa40 	bl	8001f48 <HAL_GetTick>
 8004ac8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	f040 820b 	bne.w	8004eee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2319      	movs	r3, #25
 8004ade:	2201      	movs	r2, #1
 8004ae0:	497c      	ldr	r1, [pc, #496]	; (8004cd4 <HAL_I2C_Master_Receive+0x224>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fcea 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
 8004af0:	e1fe      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_I2C_Master_Receive+0x50>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e1f7      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x440>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d007      	beq.n	8004b26 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2222      	movs	r2, #34	; 0x22
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2210      	movs	r2, #16
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	893a      	ldrh	r2, [r7, #8]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a5c      	ldr	r2, [pc, #368]	; (8004cd8 <HAL_I2C_Master_Receive+0x228>)
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b68:	8979      	ldrh	r1, [r7, #10]
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fb40 	bl	80051f4 <I2C_MasterRequestRead>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e1b8      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d113      	bne.n	8004bae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b86:	2300      	movs	r3, #0
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	623b      	str	r3, [r7, #32]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	623b      	str	r3, [r7, #32]
 8004b9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e18c      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d11b      	bne.n	8004bee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e16c      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d11b      	bne.n	8004c2e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	e14c      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c54:	e138      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	f200 80f1 	bhi.w	8004e42 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d123      	bne.n	8004cb0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fd7d 	bl	800576c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e139      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cae:	e10b      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d14e      	bne.n	8004d56 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4906      	ldr	r1, [pc, #24]	; (8004cdc <HAL_I2C_Master_Receive+0x22c>)
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fbfa 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e10e      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x440>
 8004cd2:	bf00      	nop
 8004cd4:	00100002 	.word	0x00100002
 8004cd8:	ffff0000 	.word	0xffff0000
 8004cdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d54:	e0b8      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	4966      	ldr	r1, [pc, #408]	; (8004ef8 <HAL_I2C_Master_Receive+0x448>)
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fbab 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0bf      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	2200      	movs	r2, #0
 8004dba:	494f      	ldr	r1, [pc, #316]	; (8004ef8 <HAL_I2C_Master_Receive+0x448>)
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fb7d 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e091      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e40:	e042      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fc90 	bl	800576c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e04c      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d118      	bne.n	8004ec8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f47f aec2 	bne.w	8004c56 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e000      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004eee:	2302      	movs	r3, #2
  }
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3728      	adds	r7, #40	; 0x28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	00010004 	.word	0x00010004

08004efc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	817b      	strh	r3, [r7, #10]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	813b      	strh	r3, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f16:	f7fd f817 	bl	8001f48 <HAL_GetTick>
 8004f1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	f040 80d9 	bne.w	80050dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2319      	movs	r3, #25
 8004f30:	2201      	movs	r2, #1
 8004f32:	496d      	ldr	r1, [pc, #436]	; (80050e8 <HAL_I2C_Mem_Write+0x1ec>)
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fac1 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
 8004f42:	e0cc      	b.n	80050de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_I2C_Mem_Write+0x56>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e0c5      	b.n	80050de <HAL_I2C_Mem_Write+0x1e2>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d007      	beq.n	8004f78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2221      	movs	r2, #33	; 0x21
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2240      	movs	r2, #64	; 0x40
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a3a      	ldr	r2, [r7, #32]
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a4d      	ldr	r2, [pc, #308]	; (80050ec <HAL_I2C_Mem_Write+0x1f0>)
 8004fb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fba:	88f8      	ldrh	r0, [r7, #6]
 8004fbc:	893a      	ldrh	r2, [r7, #8]
 8004fbe:	8979      	ldrh	r1, [r7, #10]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	9301      	str	r3, [sp, #4]
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	4603      	mov	r3, r0
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f9e0 	bl	8005390 <I2C_RequestMemoryWrite>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d052      	beq.n	800507c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e081      	b.n	80050de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fb42 	bl	8005668 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00d      	beq.n	8005006 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d107      	bne.n	8005002 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005000:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e06b      	b.n	80050de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	781a      	ldrb	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b04      	cmp	r3, #4
 8005042:	d11b      	bne.n	800507c <HAL_I2C_Mem_Write+0x180>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d017      	beq.n	800507c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	781a      	ldrb	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1aa      	bne.n	8004fda <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fb2e 	bl	80056ea <I2C_WaitOnBTFFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00d      	beq.n	80050b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	2b04      	cmp	r3, #4
 800509a:	d107      	bne.n	80050ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e016      	b.n	80050de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	00100002 	.word	0x00100002
 80050ec:	ffff0000 	.word	0xffff0000

080050f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	460b      	mov	r3, r1
 80050fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d006      	beq.n	800511a <I2C_MasterRequestWrite+0x2a>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d003      	beq.n	800511a <I2C_MasterRequestWrite+0x2a>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005118:	d108      	bne.n	800512c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e00b      	b.n	8005144 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	2b12      	cmp	r3, #18
 8005132:	d107      	bne.n	8005144 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005142:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f9b3 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00d      	beq.n	8005178 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d103      	bne.n	8005174 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005172:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e035      	b.n	80051e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005180:	d108      	bne.n	8005194 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005182:	897b      	ldrh	r3, [r7, #10]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005190:	611a      	str	r2, [r3, #16]
 8005192:	e01b      	b.n	80051cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005194:	897b      	ldrh	r3, [r7, #10]
 8005196:	11db      	asrs	r3, r3, #7
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f003 0306 	and.w	r3, r3, #6
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f063 030f 	orn	r3, r3, #15
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	490e      	ldr	r1, [pc, #56]	; (80051ec <I2C_MasterRequestWrite+0xfc>)
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f9d9 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e010      	b.n	80051e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051c2:	897b      	ldrh	r3, [r7, #10]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4907      	ldr	r1, [pc, #28]	; (80051f0 <I2C_MasterRequestWrite+0x100>)
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f9c9 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	00010008 	.word	0x00010008
 80051f0:	00010002 	.word	0x00010002

080051f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	460b      	mov	r3, r1
 8005202:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005218:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b08      	cmp	r3, #8
 800521e:	d006      	beq.n	800522e <I2C_MasterRequestRead+0x3a>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d003      	beq.n	800522e <I2C_MasterRequestRead+0x3a>
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800522c:	d108      	bne.n	8005240 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e00b      	b.n	8005258 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	2b11      	cmp	r3, #17
 8005246:	d107      	bne.n	8005258 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005256:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f929 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00d      	beq.n	800528c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527e:	d103      	bne.n	8005288 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e079      	b.n	8005380 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005294:	d108      	bne.n	80052a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005296:	897b      	ldrh	r3, [r7, #10]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	611a      	str	r2, [r3, #16]
 80052a6:	e05f      	b.n	8005368 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052a8:	897b      	ldrh	r3, [r7, #10]
 80052aa:	11db      	asrs	r3, r3, #7
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f003 0306 	and.w	r3, r3, #6
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f063 030f 	orn	r3, r3, #15
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	4930      	ldr	r1, [pc, #192]	; (8005388 <I2C_MasterRequestRead+0x194>)
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f94f 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e054      	b.n	8005380 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052d6:	897b      	ldrh	r3, [r7, #10]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4929      	ldr	r1, [pc, #164]	; (800538c <I2C_MasterRequestRead+0x198>)
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f93f 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e044      	b.n	8005380 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f8c7 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005342:	d103      	bne.n	800534c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e017      	b.n	8005380 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005350:	897b      	ldrh	r3, [r7, #10]
 8005352:	11db      	asrs	r3, r3, #7
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f003 0306 	and.w	r3, r3, #6
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f063 030e 	orn	r3, r3, #14
 8005360:	b2da      	uxtb	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4907      	ldr	r1, [pc, #28]	; (800538c <I2C_MasterRequestRead+0x198>)
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f8fb 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	00010008 	.word	0x00010008
 800538c:	00010002 	.word	0x00010002

08005390 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	461a      	mov	r2, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	817b      	strh	r3, [r7, #10]
 80053a2:	460b      	mov	r3, r1
 80053a4:	813b      	strh	r3, [r7, #8]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f878 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00d      	beq.n	80053ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e0:	d103      	bne.n	80053ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e05f      	b.n	80054ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ee:	897b      	ldrh	r3, [r7, #10]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	492d      	ldr	r1, [pc, #180]	; (80054b8 <I2C_RequestMemoryWrite+0x128>)
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f8b0 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e04c      	b.n	80054ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800542a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542c:	6a39      	ldr	r1, [r7, #32]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f91a 	bl	8005668 <I2C_WaitOnTXEFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2b04      	cmp	r3, #4
 8005440:	d107      	bne.n	8005452 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005450:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e02b      	b.n	80054ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d105      	bne.n	8005468 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800545c:	893b      	ldrh	r3, [r7, #8]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	611a      	str	r2, [r3, #16]
 8005466:	e021      	b.n	80054ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005468:	893b      	ldrh	r3, [r7, #8]
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	b29b      	uxth	r3, r3
 800546e:	b2da      	uxtb	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005478:	6a39      	ldr	r1, [r7, #32]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f8f4 	bl	8005668 <I2C_WaitOnTXEFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	2b04      	cmp	r3, #4
 800548c:	d107      	bne.n	800549e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e005      	b.n	80054ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a2:	893b      	ldrh	r3, [r7, #8]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	00010002 	.word	0x00010002

080054bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054cc:	e025      	b.n	800551a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d4:	d021      	beq.n	800551a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d6:	f7fc fd37 	bl	8001f48 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d302      	bcc.n	80054ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d116      	bne.n	800551a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f043 0220 	orr.w	r2, r3, #32
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e023      	b.n	8005562 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	d10d      	bne.n	8005540 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	43da      	mvns	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4013      	ands	r3, r2
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf0c      	ite	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	2300      	movne	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	e00c      	b.n	800555a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	43da      	mvns	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4013      	ands	r3, r2
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	bf0c      	ite	eq
 8005552:	2301      	moveq	r3, #1
 8005554:	2300      	movne	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	429a      	cmp	r2, r3
 800555e:	d0b6      	beq.n	80054ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005578:	e051      	b.n	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005588:	d123      	bne.n	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005598:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f043 0204 	orr.w	r2, r3, #4
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e046      	b.n	8005660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d021      	beq.n	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055da:	f7fc fcb5 	bl	8001f48 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d302      	bcc.n	80055f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d116      	bne.n	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e020      	b.n	8005660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d10c      	bne.n	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	43da      	mvns	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4013      	ands	r3, r2
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	bf14      	ite	ne
 800563a:	2301      	movne	r3, #1
 800563c:	2300      	moveq	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	e00b      	b.n	800565a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	43da      	mvns	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4013      	ands	r3, r2
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d18d      	bne.n	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005674:	e02d      	b.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f8ce 	bl	8005818 <I2C_IsAcknowledgeFailed>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e02d      	b.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d021      	beq.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568e:	f7fc fc5b 	bl	8001f48 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	d302      	bcc.n	80056a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d116      	bne.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f043 0220 	orr.w	r2, r3, #32
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e007      	b.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056dc:	2b80      	cmp	r3, #128	; 0x80
 80056de:	d1ca      	bne.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056f6:	e02d      	b.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f88d 	bl	8005818 <I2C_IsAcknowledgeFailed>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e02d      	b.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d021      	beq.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005710:	f7fc fc1a 	bl	8001f48 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	d302      	bcc.n	8005726 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d116      	bne.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e007      	b.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b04      	cmp	r3, #4
 8005760:	d1ca      	bne.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005778:	e042      	b.n	8005800 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b10      	cmp	r3, #16
 8005786:	d119      	bne.n	80057bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0210 	mvn.w	r2, #16
 8005790:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e029      	b.n	8005810 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057bc:	f7fc fbc4 	bl	8001f48 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d302      	bcc.n	80057d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d116      	bne.n	8005800 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e007      	b.n	8005810 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580a:	2b40      	cmp	r3, #64	; 0x40
 800580c:	d1b5      	bne.n	800577a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582e:	d11b      	bne.n	8005868 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005838:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f043 0204 	orr.w	r2, r3, #4
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
	...

08005878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e267      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d075      	beq.n	8005982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005896:	4b88      	ldr	r3, [pc, #544]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d00c      	beq.n	80058bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058a2:	4b85      	ldr	r3, [pc, #532]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d112      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ae:	4b82      	ldr	r3, [pc, #520]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ba:	d10b      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058bc:	4b7e      	ldr	r3, [pc, #504]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d05b      	beq.n	8005980 <HAL_RCC_OscConfig+0x108>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d157      	bne.n	8005980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e242      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d106      	bne.n	80058ec <HAL_RCC_OscConfig+0x74>
 80058de:	4b76      	ldr	r3, [pc, #472]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a75      	ldr	r2, [pc, #468]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e01d      	b.n	8005928 <HAL_RCC_OscConfig+0xb0>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058f4:	d10c      	bne.n	8005910 <HAL_RCC_OscConfig+0x98>
 80058f6:	4b70      	ldr	r3, [pc, #448]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a6f      	ldr	r2, [pc, #444]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80058fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	4b6d      	ldr	r3, [pc, #436]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a6c      	ldr	r2, [pc, #432]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e00b      	b.n	8005928 <HAL_RCC_OscConfig+0xb0>
 8005910:	4b69      	ldr	r3, [pc, #420]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a68      	ldr	r2, [pc, #416]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b66      	ldr	r3, [pc, #408]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a65      	ldr	r2, [pc, #404]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d013      	beq.n	8005958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005930:	f7fc fb0a 	bl	8001f48 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005938:	f7fc fb06 	bl	8001f48 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b64      	cmp	r3, #100	; 0x64
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e207      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594a:	4b5b      	ldr	r3, [pc, #364]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0xc0>
 8005956:	e014      	b.n	8005982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005958:	f7fc faf6 	bl	8001f48 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005960:	f7fc faf2 	bl	8001f48 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	; 0x64
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e1f3      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005972:	4b51      	ldr	r3, [pc, #324]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0xe8>
 800597e:	e000      	b.n	8005982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d063      	beq.n	8005a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800598e:	4b4a      	ldr	r3, [pc, #296]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800599a:	4b47      	ldr	r3, [pc, #284]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d11c      	bne.n	80059e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059a6:	4b44      	ldr	r3, [pc, #272]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d116      	bne.n	80059e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059b2:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <HAL_RCC_OscConfig+0x152>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d001      	beq.n	80059ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e1c7      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ca:	4b3b      	ldr	r3, [pc, #236]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	4937      	ldr	r1, [pc, #220]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059de:	e03a      	b.n	8005a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d020      	beq.n	8005a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059e8:	4b34      	ldr	r3, [pc, #208]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ee:	f7fc faab 	bl	8001f48 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059f6:	f7fc faa7 	bl	8001f48 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e1a8      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a08:	4b2b      	ldr	r3, [pc, #172]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a14:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	4925      	ldr	r1, [pc, #148]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	600b      	str	r3, [r1, #0]
 8005a28:	e015      	b.n	8005a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a2a:	4b24      	ldr	r3, [pc, #144]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a30:	f7fc fa8a 	bl	8001f48 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a38:	f7fc fa86 	bl	8001f48 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e187      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a4a:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f0      	bne.n	8005a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d036      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d016      	beq.n	8005a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a6a:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <HAL_RCC_OscConfig+0x248>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a70:	f7fc fa6a 	bl	8001f48 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a78:	f7fc fa66 	bl	8001f48 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e167      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0x200>
 8005a96:	e01b      	b.n	8005ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a98:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <HAL_RCC_OscConfig+0x248>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9e:	f7fc fa53 	bl	8001f48 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa4:	e00e      	b.n	8005ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aa6:	f7fc fa4f 	bl	8001f48 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d907      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e150      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	42470000 	.word	0x42470000
 8005ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac4:	4b88      	ldr	r3, [pc, #544]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1ea      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8097 	beq.w	8005c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ae2:	4b81      	ldr	r3, [pc, #516]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10f      	bne.n	8005b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aee:	2300      	movs	r3, #0
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	4b7d      	ldr	r3, [pc, #500]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	4a7c      	ldr	r2, [pc, #496]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afc:	6413      	str	r3, [r2, #64]	; 0x40
 8005afe:	4b7a      	ldr	r3, [pc, #488]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b06:	60bb      	str	r3, [r7, #8]
 8005b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0e:	4b77      	ldr	r3, [pc, #476]	; (8005cec <HAL_RCC_OscConfig+0x474>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d118      	bne.n	8005b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b1a:	4b74      	ldr	r3, [pc, #464]	; (8005cec <HAL_RCC_OscConfig+0x474>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a73      	ldr	r2, [pc, #460]	; (8005cec <HAL_RCC_OscConfig+0x474>)
 8005b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b26:	f7fc fa0f 	bl	8001f48 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b2e:	f7fc fa0b 	bl	8001f48 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e10c      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b40:	4b6a      	ldr	r3, [pc, #424]	; (8005cec <HAL_RCC_OscConfig+0x474>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d106      	bne.n	8005b62 <HAL_RCC_OscConfig+0x2ea>
 8005b54:	4b64      	ldr	r3, [pc, #400]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b58:	4a63      	ldr	r2, [pc, #396]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b60:	e01c      	b.n	8005b9c <HAL_RCC_OscConfig+0x324>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b05      	cmp	r3, #5
 8005b68:	d10c      	bne.n	8005b84 <HAL_RCC_OscConfig+0x30c>
 8005b6a:	4b5f      	ldr	r3, [pc, #380]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	4a5e      	ldr	r2, [pc, #376]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b70:	f043 0304 	orr.w	r3, r3, #4
 8005b74:	6713      	str	r3, [r2, #112]	; 0x70
 8005b76:	4b5c      	ldr	r3, [pc, #368]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	4a5b      	ldr	r2, [pc, #364]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b7c:	f043 0301 	orr.w	r3, r3, #1
 8005b80:	6713      	str	r3, [r2, #112]	; 0x70
 8005b82:	e00b      	b.n	8005b9c <HAL_RCC_OscConfig+0x324>
 8005b84:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	4a57      	ldr	r2, [pc, #348]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b90:	4b55      	ldr	r3, [pc, #340]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b94:	4a54      	ldr	r2, [pc, #336]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005b96:	f023 0304 	bic.w	r3, r3, #4
 8005b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d015      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba4:	f7fc f9d0 	bl	8001f48 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005baa:	e00a      	b.n	8005bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bac:	f7fc f9cc 	bl	8001f48 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e0cb      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc2:	4b49      	ldr	r3, [pc, #292]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0ee      	beq.n	8005bac <HAL_RCC_OscConfig+0x334>
 8005bce:	e014      	b.n	8005bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bd0:	f7fc f9ba 	bl	8001f48 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd6:	e00a      	b.n	8005bee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bd8:	f7fc f9b6 	bl	8001f48 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e0b5      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bee:	4b3e      	ldr	r3, [pc, #248]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1ee      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d105      	bne.n	8005c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c00:	4b39      	ldr	r3, [pc, #228]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	4a38      	ldr	r2, [pc, #224]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 80a1 	beq.w	8005d58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c16:	4b34      	ldr	r3, [pc, #208]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d05c      	beq.n	8005cdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d141      	bne.n	8005cae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2a:	4b31      	ldr	r3, [pc, #196]	; (8005cf0 <HAL_RCC_OscConfig+0x478>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c30:	f7fc f98a 	bl	8001f48 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c38:	f7fc f986 	bl	8001f48 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e087      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c4a:	4b27      	ldr	r3, [pc, #156]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1f0      	bne.n	8005c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69da      	ldr	r2, [r3, #28]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	019b      	lsls	r3, r3, #6
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	041b      	lsls	r3, r3, #16
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	061b      	lsls	r3, r3, #24
 8005c7a:	491b      	ldr	r1, [pc, #108]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c80:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <HAL_RCC_OscConfig+0x478>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c86:	f7fc f95f 	bl	8001f48 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fc f95b 	bl	8001f48 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e05c      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca0:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x416>
 8005cac:	e054      	b.n	8005d58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <HAL_RCC_OscConfig+0x478>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb4:	f7fc f948 	bl	8001f48 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fc f944 	bl	8001f48 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e045      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cce:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <HAL_RCC_OscConfig+0x444>
 8005cda:	e03d      	b.n	8005d58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d107      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e038      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	40007000 	.word	0x40007000
 8005cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cf4:	4b1b      	ldr	r3, [pc, #108]	; (8005d64 <HAL_RCC_OscConfig+0x4ec>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d028      	beq.n	8005d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d121      	bne.n	8005d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d11a      	bne.n	8005d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d24:	4013      	ands	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d111      	bne.n	8005d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d107      	bne.n	8005d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d001      	beq.n	8005d58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40023800 	.word	0x40023800

08005d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0cc      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d7c:	4b68      	ldr	r3, [pc, #416]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d90c      	bls.n	8005da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8a:	4b65      	ldr	r3, [pc, #404]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d92:	4b63      	ldr	r3, [pc, #396]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0b8      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d020      	beq.n	8005df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dbc:	4b59      	ldr	r3, [pc, #356]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	4a58      	ldr	r2, [pc, #352]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dd4:	4b53      	ldr	r3, [pc, #332]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	4a52      	ldr	r2, [pc, #328]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005de0:	4b50      	ldr	r3, [pc, #320]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	494d      	ldr	r1, [pc, #308]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d044      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d107      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e06:	4b47      	ldr	r3, [pc, #284]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d119      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e07f      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d107      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e26:	4b3f      	ldr	r3, [pc, #252]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e06f      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e36:	4b3b      	ldr	r3, [pc, #236]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e067      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e46:	4b37      	ldr	r3, [pc, #220]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f023 0203 	bic.w	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	4934      	ldr	r1, [pc, #208]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e58:	f7fc f876 	bl	8001f48 <HAL_GetTick>
 8005e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e60:	f7fc f872 	bl	8001f48 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e04f      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e76:	4b2b      	ldr	r3, [pc, #172]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 020c 	and.w	r2, r3, #12
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d1eb      	bne.n	8005e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e88:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d20c      	bcs.n	8005eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e96:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9e:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d001      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e032      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d008      	beq.n	8005ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ebc:	4b19      	ldr	r3, [pc, #100]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4916      	ldr	r1, [pc, #88]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eda:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	490e      	ldr	r1, [pc, #56]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eee:	f000 f889 	bl	8006004 <HAL_RCC_GetSysClockFreq>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	490a      	ldr	r1, [pc, #40]	; (8005f28 <HAL_RCC_ClockConfig+0x1c0>)
 8005f00:	5ccb      	ldrb	r3, [r1, r3]
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <HAL_RCC_ClockConfig+0x1c4>)
 8005f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f0a:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <HAL_RCC_ClockConfig+0x1c8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fb ffd6 	bl	8001ec0 <HAL_InitTick>

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40023c00 	.word	0x40023c00
 8005f24:	40023800 	.word	0x40023800
 8005f28:	08007d50 	.word	0x08007d50
 8005f2c:	20000008 	.word	0x20000008
 8005f30:	2000000c 	.word	0x2000000c

08005f34 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08c      	sub	sp, #48	; 0x30
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d129      	bne.n	8005f9a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005f46:	2300      	movs	r3, #0
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <HAL_RCC_MCOConfig+0xc4>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	4a2a      	ldr	r2, [pc, #168]	; (8005ff8 <HAL_RCC_MCOConfig+0xc4>)
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	6313      	str	r3, [r2, #48]	; 0x30
 8005f56:	4b28      	ldr	r3, [pc, #160]	; (8005ff8 <HAL_RCC_MCOConfig+0xc4>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005f74:	2300      	movs	r3, #0
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005f78:	f107 031c 	add.w	r3, r7, #28
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	481f      	ldr	r0, [pc, #124]	; (8005ffc <HAL_RCC_MCOConfig+0xc8>)
 8005f80:	f7fe f960 	bl	8004244 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005f84:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <HAL_RCC_MCOConfig+0xc4>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	430b      	orrs	r3, r1
 8005f92:	4919      	ldr	r1, [pc, #100]	; (8005ff8 <HAL_RCC_MCOConfig+0xc4>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005f98:	e029      	b.n	8005fee <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <HAL_RCC_MCOConfig+0xc4>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <HAL_RCC_MCOConfig+0xc4>)
 8005fa4:	f043 0304 	orr.w	r3, r3, #4
 8005fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8005faa:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <HAL_RCC_MCOConfig+0xc4>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005fcc:	f107 031c 	add.w	r3, r7, #28
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	480b      	ldr	r0, [pc, #44]	; (8006000 <HAL_RCC_MCOConfig+0xcc>)
 8005fd4:	f7fe f936 	bl	8004244 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005fd8:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <HAL_RCC_MCOConfig+0xc4>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	00d9      	lsls	r1, r3, #3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	4903      	ldr	r1, [pc, #12]	; (8005ff8 <HAL_RCC_MCOConfig+0xc4>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
}
 8005fee:	bf00      	nop
 8005ff0:	3730      	adds	r7, #48	; 0x30
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	40020000 	.word	0x40020000
 8006000:	40020800 	.word	0x40020800

08006004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006008:	b094      	sub	sp, #80	; 0x50
 800600a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	647b      	str	r3, [r7, #68]	; 0x44
 8006010:	2300      	movs	r3, #0
 8006012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006014:	2300      	movs	r3, #0
 8006016:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800601c:	4b79      	ldr	r3, [pc, #484]	; (8006204 <HAL_RCC_GetSysClockFreq+0x200>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 030c 	and.w	r3, r3, #12
 8006024:	2b08      	cmp	r3, #8
 8006026:	d00d      	beq.n	8006044 <HAL_RCC_GetSysClockFreq+0x40>
 8006028:	2b08      	cmp	r3, #8
 800602a:	f200 80e1 	bhi.w	80061f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <HAL_RCC_GetSysClockFreq+0x34>
 8006032:	2b04      	cmp	r3, #4
 8006034:	d003      	beq.n	800603e <HAL_RCC_GetSysClockFreq+0x3a>
 8006036:	e0db      	b.n	80061f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006038:	4b73      	ldr	r3, [pc, #460]	; (8006208 <HAL_RCC_GetSysClockFreq+0x204>)
 800603a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800603c:	e0db      	b.n	80061f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800603e:	4b73      	ldr	r3, [pc, #460]	; (800620c <HAL_RCC_GetSysClockFreq+0x208>)
 8006040:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006042:	e0d8      	b.n	80061f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006044:	4b6f      	ldr	r3, [pc, #444]	; (8006204 <HAL_RCC_GetSysClockFreq+0x200>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800604c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800604e:	4b6d      	ldr	r3, [pc, #436]	; (8006204 <HAL_RCC_GetSysClockFreq+0x200>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d063      	beq.n	8006122 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800605a:	4b6a      	ldr	r3, [pc, #424]	; (8006204 <HAL_RCC_GetSysClockFreq+0x200>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	099b      	lsrs	r3, r3, #6
 8006060:	2200      	movs	r2, #0
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38
 8006064:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606c:	633b      	str	r3, [r7, #48]	; 0x30
 800606e:	2300      	movs	r3, #0
 8006070:	637b      	str	r3, [r7, #52]	; 0x34
 8006072:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006076:	4622      	mov	r2, r4
 8006078:	462b      	mov	r3, r5
 800607a:	f04f 0000 	mov.w	r0, #0
 800607e:	f04f 0100 	mov.w	r1, #0
 8006082:	0159      	lsls	r1, r3, #5
 8006084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006088:	0150      	lsls	r0, r2, #5
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	4621      	mov	r1, r4
 8006090:	1a51      	subs	r1, r2, r1
 8006092:	6139      	str	r1, [r7, #16]
 8006094:	4629      	mov	r1, r5
 8006096:	eb63 0301 	sbc.w	r3, r3, r1
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	f04f 0300 	mov.w	r3, #0
 80060a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060a8:	4659      	mov	r1, fp
 80060aa:	018b      	lsls	r3, r1, #6
 80060ac:	4651      	mov	r1, sl
 80060ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060b2:	4651      	mov	r1, sl
 80060b4:	018a      	lsls	r2, r1, #6
 80060b6:	4651      	mov	r1, sl
 80060b8:	ebb2 0801 	subs.w	r8, r2, r1
 80060bc:	4659      	mov	r1, fp
 80060be:	eb63 0901 	sbc.w	r9, r3, r1
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060d6:	4690      	mov	r8, r2
 80060d8:	4699      	mov	r9, r3
 80060da:	4623      	mov	r3, r4
 80060dc:	eb18 0303 	adds.w	r3, r8, r3
 80060e0:	60bb      	str	r3, [r7, #8]
 80060e2:	462b      	mov	r3, r5
 80060e4:	eb49 0303 	adc.w	r3, r9, r3
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060f6:	4629      	mov	r1, r5
 80060f8:	024b      	lsls	r3, r1, #9
 80060fa:	4621      	mov	r1, r4
 80060fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006100:	4621      	mov	r1, r4
 8006102:	024a      	lsls	r2, r1, #9
 8006104:	4610      	mov	r0, r2
 8006106:	4619      	mov	r1, r3
 8006108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610a:	2200      	movs	r2, #0
 800610c:	62bb      	str	r3, [r7, #40]	; 0x28
 800610e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006110:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006114:	f7fa f8ac 	bl	8000270 <__aeabi_uldivmod>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4613      	mov	r3, r2
 800611e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006120:	e058      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006122:	4b38      	ldr	r3, [pc, #224]	; (8006204 <HAL_RCC_GetSysClockFreq+0x200>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	099b      	lsrs	r3, r3, #6
 8006128:	2200      	movs	r2, #0
 800612a:	4618      	mov	r0, r3
 800612c:	4611      	mov	r1, r2
 800612e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006132:	623b      	str	r3, [r7, #32]
 8006134:	2300      	movs	r3, #0
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
 8006138:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800613c:	4642      	mov	r2, r8
 800613e:	464b      	mov	r3, r9
 8006140:	f04f 0000 	mov.w	r0, #0
 8006144:	f04f 0100 	mov.w	r1, #0
 8006148:	0159      	lsls	r1, r3, #5
 800614a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800614e:	0150      	lsls	r0, r2, #5
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4641      	mov	r1, r8
 8006156:	ebb2 0a01 	subs.w	sl, r2, r1
 800615a:	4649      	mov	r1, r9
 800615c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800616c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006170:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006174:	ebb2 040a 	subs.w	r4, r2, sl
 8006178:	eb63 050b 	sbc.w	r5, r3, fp
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	00eb      	lsls	r3, r5, #3
 8006186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800618a:	00e2      	lsls	r2, r4, #3
 800618c:	4614      	mov	r4, r2
 800618e:	461d      	mov	r5, r3
 8006190:	4643      	mov	r3, r8
 8006192:	18e3      	adds	r3, r4, r3
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	464b      	mov	r3, r9
 8006198:	eb45 0303 	adc.w	r3, r5, r3
 800619c:	607b      	str	r3, [r7, #4]
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061aa:	4629      	mov	r1, r5
 80061ac:	028b      	lsls	r3, r1, #10
 80061ae:	4621      	mov	r1, r4
 80061b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061b4:	4621      	mov	r1, r4
 80061b6:	028a      	lsls	r2, r1, #10
 80061b8:	4610      	mov	r0, r2
 80061ba:	4619      	mov	r1, r3
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	2200      	movs	r2, #0
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	61fa      	str	r2, [r7, #28]
 80061c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061c8:	f7fa f852 	bl	8000270 <__aeabi_uldivmod>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4613      	mov	r3, r2
 80061d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <HAL_RCC_GetSysClockFreq+0x200>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	3301      	adds	r3, #1
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80061e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061ee:	e002      	b.n	80061f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061f0:	4b05      	ldr	r3, [pc, #20]	; (8006208 <HAL_RCC_GetSysClockFreq+0x204>)
 80061f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3750      	adds	r7, #80	; 0x50
 80061fc:	46bd      	mov	sp, r7
 80061fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006202:	bf00      	nop
 8006204:	40023800 	.word	0x40023800
 8006208:	00f42400 	.word	0x00f42400
 800620c:	007a1200 	.word	0x007a1200

08006210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006214:	4b03      	ldr	r3, [pc, #12]	; (8006224 <HAL_RCC_GetHCLKFreq+0x14>)
 8006216:	681b      	ldr	r3, [r3, #0]
}
 8006218:	4618      	mov	r0, r3
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000008 	.word	0x20000008

08006228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800622c:	f7ff fff0 	bl	8006210 <HAL_RCC_GetHCLKFreq>
 8006230:	4602      	mov	r2, r0
 8006232:	4b05      	ldr	r3, [pc, #20]	; (8006248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	0a9b      	lsrs	r3, r3, #10
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	4903      	ldr	r1, [pc, #12]	; (800624c <HAL_RCC_GetPCLK1Freq+0x24>)
 800623e:	5ccb      	ldrb	r3, [r1, r3]
 8006240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006244:	4618      	mov	r0, r3
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40023800 	.word	0x40023800
 800624c:	08007d60 	.word	0x08007d60

08006250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e07b      	b.n	800635a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d108      	bne.n	800627c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006272:	d009      	beq.n	8006288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	61da      	str	r2, [r3, #28]
 800627a:	e005      	b.n	8006288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fb fc34 	bl	8001b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630c:	ea42 0103 	orr.w	r1, r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	f003 0104 	and.w	r1, r3, #4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	f003 0210 	and.w	r2, r3, #16
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006348:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b088      	sub	sp, #32
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_SPI_Transmit+0x22>
 8006380:	2302      	movs	r3, #2
 8006382:	e126      	b.n	80065d2 <HAL_SPI_Transmit+0x270>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800638c:	f7fb fddc 	bl	8001f48 <HAL_GetTick>
 8006390:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d002      	beq.n	80063a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
 80063a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063a6:	e10b      	b.n	80065c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_SPI_Transmit+0x52>
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063b8:	e102      	b.n	80065c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2203      	movs	r2, #3
 80063be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006400:	d10f      	bne.n	8006422 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006410:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006420:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642c:	2b40      	cmp	r3, #64	; 0x40
 800642e:	d007      	beq.n	8006440 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800643e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006448:	d14b      	bne.n	80064e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_SPI_Transmit+0xf6>
 8006452:	8afb      	ldrh	r3, [r7, #22]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d13e      	bne.n	80064d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	881a      	ldrh	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	1c9a      	adds	r2, r3, #2
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800647c:	e02b      	b.n	80064d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b02      	cmp	r3, #2
 800648a:	d112      	bne.n	80064b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	881a      	ldrh	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	1c9a      	adds	r2, r3, #2
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80064b0:	e011      	b.n	80064d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b2:	f7fb fd49 	bl	8001f48 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d803      	bhi.n	80064ca <HAL_SPI_Transmit+0x168>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d102      	bne.n	80064d0 <HAL_SPI_Transmit+0x16e>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064d4:	e074      	b.n	80065c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1ce      	bne.n	800647e <HAL_SPI_Transmit+0x11c>
 80064e0:	e04c      	b.n	800657c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_SPI_Transmit+0x18e>
 80064ea:	8afb      	ldrh	r3, [r7, #22]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d140      	bne.n	8006572 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	7812      	ldrb	r2, [r2, #0]
 80064fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006516:	e02c      	b.n	8006572 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b02      	cmp	r3, #2
 8006524:	d113      	bne.n	800654e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	7812      	ldrb	r2, [r2, #0]
 8006532:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	86da      	strh	r2, [r3, #54]	; 0x36
 800654c:	e011      	b.n	8006572 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800654e:	f7fb fcfb 	bl	8001f48 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d803      	bhi.n	8006566 <HAL_SPI_Transmit+0x204>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d102      	bne.n	800656c <HAL_SPI_Transmit+0x20a>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006570:	e026      	b.n	80065c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1cd      	bne.n	8006518 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fbcb 	bl	8006d1c <SPI_EndRxTxTransaction>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800659a:	2300      	movs	r3, #0
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e000      	b.n	80065c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3720      	adds	r7, #32
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b088      	sub	sp, #32
 80065de:	af02      	add	r7, sp, #8
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f6:	d112      	bne.n	800661e <HAL_SPI_Receive+0x44>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10e      	bne.n	800661e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2204      	movs	r2, #4
 8006604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006608:	88fa      	ldrh	r2, [r7, #6]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	4613      	mov	r3, r2
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f8f1 	bl	80067fc <HAL_SPI_TransmitReceive>
 800661a:	4603      	mov	r3, r0
 800661c:	e0ea      	b.n	80067f4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_SPI_Receive+0x52>
 8006628:	2302      	movs	r3, #2
 800662a:	e0e3      	b.n	80067f4 <HAL_SPI_Receive+0x21a>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006634:	f7fb fc88 	bl	8001f48 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b01      	cmp	r3, #1
 8006644:	d002      	beq.n	800664c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006646:	2302      	movs	r3, #2
 8006648:	75fb      	strb	r3, [r7, #23]
    goto error;
 800664a:	e0ca      	b.n	80067e2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_SPI_Receive+0x7e>
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800665c:	e0c1      	b.n	80067e2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2204      	movs	r2, #4
 8006662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a4:	d10f      	bne.n	80066c6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d007      	beq.n	80066e4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d162      	bne.n	80067b2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066ec:	e02e      	b.n	800674c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d115      	bne.n	8006728 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f103 020c 	add.w	r2, r3, #12
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	7812      	ldrb	r2, [r2, #0]
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006726:	e011      	b.n	800674c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006728:	f7fb fc0e 	bl	8001f48 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d803      	bhi.n	8006740 <HAL_SPI_Receive+0x166>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d102      	bne.n	8006746 <HAL_SPI_Receive+0x16c>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d102      	bne.n	800674c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	75fb      	strb	r3, [r7, #23]
          goto error;
 800674a:	e04a      	b.n	80067e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1cb      	bne.n	80066ee <HAL_SPI_Receive+0x114>
 8006756:	e031      	b.n	80067bc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b01      	cmp	r3, #1
 8006764:	d113      	bne.n	800678e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	b292      	uxth	r2, r2
 8006772:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	1c9a      	adds	r2, r3, #2
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800678c:	e011      	b.n	80067b2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800678e:	f7fb fbdb 	bl	8001f48 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d803      	bhi.n	80067a6 <HAL_SPI_Receive+0x1cc>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d102      	bne.n	80067ac <HAL_SPI_Receive+0x1d2>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067b0:	e017      	b.n	80067e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1cd      	bne.n	8006758 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fa45 	bl	8006c50 <SPI_EndRxTransaction>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
 80067de:	e000      	b.n	80067e2 <HAL_SPI_Receive+0x208>
  }

error :
 80067e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08c      	sub	sp, #48	; 0x30
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800680a:	2301      	movs	r3, #1
 800680c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x26>
 800681e:	2302      	movs	r3, #2
 8006820:	e18a      	b.n	8006b38 <HAL_SPI_TransmitReceive+0x33c>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800682a:	f7fb fb8d 	bl	8001f48 <HAL_GetTick>
 800682e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006840:	887b      	ldrh	r3, [r7, #2]
 8006842:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006848:	2b01      	cmp	r3, #1
 800684a:	d00f      	beq.n	800686c <HAL_SPI_TransmitReceive+0x70>
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006852:	d107      	bne.n	8006864 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d103      	bne.n	8006864 <HAL_SPI_TransmitReceive+0x68>
 800685c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006860:	2b04      	cmp	r3, #4
 8006862:	d003      	beq.n	800686c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006864:	2302      	movs	r3, #2
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800686a:	e15b      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <HAL_SPI_TransmitReceive+0x82>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_SPI_TransmitReceive+0x82>
 8006878:	887b      	ldrh	r3, [r7, #2]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006884:	e14e      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b04      	cmp	r3, #4
 8006890:	d003      	beq.n	800689a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2205      	movs	r2, #5
 8006896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	887a      	ldrh	r2, [r7, #2]
 80068aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	887a      	ldrh	r2, [r7, #2]
 80068b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	887a      	ldrh	r2, [r7, #2]
 80068bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	887a      	ldrh	r2, [r7, #2]
 80068c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b40      	cmp	r3, #64	; 0x40
 80068dc:	d007      	beq.n	80068ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f6:	d178      	bne.n	80069ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_SPI_TransmitReceive+0x10a>
 8006900:	8b7b      	ldrh	r3, [r7, #26]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d166      	bne.n	80069d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	1c9a      	adds	r2, r3, #2
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800692a:	e053      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b02      	cmp	r3, #2
 8006938:	d11b      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x176>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d016      	beq.n	8006972 <HAL_SPI_TransmitReceive+0x176>
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d113      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b01      	cmp	r3, #1
 800697e:	d119      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x1b8>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d014      	beq.n	80069b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	b292      	uxth	r2, r2
 8006996:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	1c9a      	adds	r2, r3, #2
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069b0:	2301      	movs	r3, #1
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069b4:	f7fb fac8 	bl	8001f48 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d807      	bhi.n	80069d4 <HAL_SPI_TransmitReceive+0x1d8>
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d003      	beq.n	80069d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069d2:	e0a7      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1a6      	bne.n	800692c <HAL_SPI_TransmitReceive+0x130>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1a1      	bne.n	800692c <HAL_SPI_TransmitReceive+0x130>
 80069e8:	e07c      	b.n	8006ae4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0x1fc>
 80069f2:	8b7b      	ldrh	r3, [r7, #26]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d16b      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	330c      	adds	r3, #12
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a1e:	e057      	b.n	8006ad0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d11c      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x26c>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d017      	beq.n	8006a68 <HAL_SPI_TransmitReceive+0x26c>
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d114      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d119      	bne.n	8006aaa <HAL_SPI_TransmitReceive+0x2ae>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d014      	beq.n	8006aaa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006aaa:	f7fb fa4d 	bl	8001f48 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d803      	bhi.n	8006ac2 <HAL_SPI_TransmitReceive+0x2c6>
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac0:	d102      	bne.n	8006ac8 <HAL_SPI_TransmitReceive+0x2cc>
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d103      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ace:	e029      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1a2      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x224>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d19d      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f917 	bl	8006d1c <SPI_EndRxTxTransaction>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d006      	beq.n	8006b02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2220      	movs	r2, #32
 8006afe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b00:	e010      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10b      	bne.n	8006b22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	e000      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3730      	adds	r7, #48	; 0x30
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b50:	f7fb f9fa 	bl	8001f48 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b60:	f7fb f9f2 	bl	8001f48 <HAL_GetTick>
 8006b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b66:	4b39      	ldr	r3, [pc, #228]	; (8006c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	015b      	lsls	r3, r3, #5
 8006b6c:	0d1b      	lsrs	r3, r3, #20
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	fb02 f303 	mul.w	r3, r2, r3
 8006b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b76:	e054      	b.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d050      	beq.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b80:	f7fb f9e2 	bl	8001f48 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d902      	bls.n	8006b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d13d      	bne.n	8006c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bae:	d111      	bne.n	8006bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb8:	d004      	beq.n	8006bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc2:	d107      	bne.n	8006bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bdc:	d10f      	bne.n	8006bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e017      	b.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	bf0c      	ite	eq
 8006c32:	2301      	moveq	r3, #1
 8006c34:	2300      	movne	r3, #0
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d19b      	bne.n	8006b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3720      	adds	r7, #32
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000008 	.word	0x20000008

08006c50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c64:	d111      	bne.n	8006c8a <SPI_EndRxTransaction+0x3a>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6e:	d004      	beq.n	8006c7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c78:	d107      	bne.n	8006c8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c92:	d12a      	bne.n	8006cea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9c:	d012      	beq.n	8006cc4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2180      	movs	r1, #128	; 0x80
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7ff ff49 	bl	8006b40 <SPI_WaitFlagStateUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d02d      	beq.n	8006d10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e026      	b.n	8006d12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2101      	movs	r1, #1
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff ff36 	bl	8006b40 <SPI_WaitFlagStateUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01a      	beq.n	8006d10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	f043 0220 	orr.w	r2, r3, #32
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e013      	b.n	8006d12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff ff23 	bl	8006b40 <SPI_WaitFlagStateUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d007      	beq.n	8006d10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d04:	f043 0220 	orr.w	r2, r3, #32
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e000      	b.n	8006d12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <SPI_EndRxTxTransaction+0x7c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <SPI_EndRxTxTransaction+0x80>)
 8006d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d32:	0d5b      	lsrs	r3, r3, #21
 8006d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d38:	fb02 f303 	mul.w	r3, r2, r3
 8006d3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d46:	d112      	bne.n	8006d6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2180      	movs	r1, #128	; 0x80
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fef4 	bl	8006b40 <SPI_WaitFlagStateUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e00f      	b.n	8006d8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d84:	2b80      	cmp	r3, #128	; 0x80
 8006d86:	d0f2      	beq.n	8006d6e <SPI_EndRxTxTransaction+0x52>
 8006d88:	e000      	b.n	8006d8c <SPI_EndRxTxTransaction+0x70>
        break;
 8006d8a:	bf00      	nop
  }

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000008 	.word	0x20000008
 8006d9c:	165e9f81 	.word	0x165e9f81

08006da0 <std>:
 8006da0:	2300      	movs	r3, #0
 8006da2:	b510      	push	{r4, lr}
 8006da4:	4604      	mov	r4, r0
 8006da6:	e9c0 3300 	strd	r3, r3, [r0]
 8006daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dae:	6083      	str	r3, [r0, #8]
 8006db0:	8181      	strh	r1, [r0, #12]
 8006db2:	6643      	str	r3, [r0, #100]	; 0x64
 8006db4:	81c2      	strh	r2, [r0, #14]
 8006db6:	6183      	str	r3, [r0, #24]
 8006db8:	4619      	mov	r1, r3
 8006dba:	2208      	movs	r2, #8
 8006dbc:	305c      	adds	r0, #92	; 0x5c
 8006dbe:	f000 f9e5 	bl	800718c <memset>
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <std+0x38>)
 8006dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <std+0x3c>)
 8006dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dca:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <std+0x40>)
 8006dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dce:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <std+0x44>)
 8006dd0:	6224      	str	r4, [r4, #32]
 8006dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8006dd4:	bd10      	pop	{r4, pc}
 8006dd6:	bf00      	nop
 8006dd8:	08006fdd 	.word	0x08006fdd
 8006ddc:	08006fff 	.word	0x08006fff
 8006de0:	08007037 	.word	0x08007037
 8006de4:	0800705b 	.word	0x0800705b

08006de8 <stdio_exit_handler>:
 8006de8:	4a02      	ldr	r2, [pc, #8]	; (8006df4 <stdio_exit_handler+0xc>)
 8006dea:	4903      	ldr	r1, [pc, #12]	; (8006df8 <stdio_exit_handler+0x10>)
 8006dec:	4803      	ldr	r0, [pc, #12]	; (8006dfc <stdio_exit_handler+0x14>)
 8006dee:	f000 b869 	b.w	8006ec4 <_fwalk_sglue>
 8006df2:	bf00      	nop
 8006df4:	20000014 	.word	0x20000014
 8006df8:	08007b41 	.word	0x08007b41
 8006dfc:	20000020 	.word	0x20000020

08006e00 <cleanup_stdio>:
 8006e00:	6841      	ldr	r1, [r0, #4]
 8006e02:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <cleanup_stdio+0x34>)
 8006e04:	4299      	cmp	r1, r3
 8006e06:	b510      	push	{r4, lr}
 8006e08:	4604      	mov	r4, r0
 8006e0a:	d001      	beq.n	8006e10 <cleanup_stdio+0x10>
 8006e0c:	f000 fe98 	bl	8007b40 <_fflush_r>
 8006e10:	68a1      	ldr	r1, [r4, #8]
 8006e12:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <cleanup_stdio+0x38>)
 8006e14:	4299      	cmp	r1, r3
 8006e16:	d002      	beq.n	8006e1e <cleanup_stdio+0x1e>
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 fe91 	bl	8007b40 <_fflush_r>
 8006e1e:	68e1      	ldr	r1, [r4, #12]
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <cleanup_stdio+0x3c>)
 8006e22:	4299      	cmp	r1, r3
 8006e24:	d004      	beq.n	8006e30 <cleanup_stdio+0x30>
 8006e26:	4620      	mov	r0, r4
 8006e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e2c:	f000 be88 	b.w	8007b40 <_fflush_r>
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	bf00      	nop
 8006e34:	2001f688 	.word	0x2001f688
 8006e38:	2001f6f0 	.word	0x2001f6f0
 8006e3c:	2001f758 	.word	0x2001f758

08006e40 <global_stdio_init.part.0>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <global_stdio_init.part.0+0x30>)
 8006e44:	4c0b      	ldr	r4, [pc, #44]	; (8006e74 <global_stdio_init.part.0+0x34>)
 8006e46:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <global_stdio_init.part.0+0x38>)
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2104      	movs	r1, #4
 8006e50:	f7ff ffa6 	bl	8006da0 <std>
 8006e54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e58:	2201      	movs	r2, #1
 8006e5a:	2109      	movs	r1, #9
 8006e5c:	f7ff ffa0 	bl	8006da0 <std>
 8006e60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e64:	2202      	movs	r2, #2
 8006e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e6a:	2112      	movs	r1, #18
 8006e6c:	f7ff bf98 	b.w	8006da0 <std>
 8006e70:	2001f7c0 	.word	0x2001f7c0
 8006e74:	2001f688 	.word	0x2001f688
 8006e78:	08006de9 	.word	0x08006de9

08006e7c <__sfp_lock_acquire>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <__sfp_lock_acquire+0x8>)
 8006e7e:	f000 b9fd 	b.w	800727c <__retarget_lock_acquire_recursive>
 8006e82:	bf00      	nop
 8006e84:	2001f7c9 	.word	0x2001f7c9

08006e88 <__sfp_lock_release>:
 8006e88:	4801      	ldr	r0, [pc, #4]	; (8006e90 <__sfp_lock_release+0x8>)
 8006e8a:	f000 b9f8 	b.w	800727e <__retarget_lock_release_recursive>
 8006e8e:	bf00      	nop
 8006e90:	2001f7c9 	.word	0x2001f7c9

08006e94 <__sinit>:
 8006e94:	b510      	push	{r4, lr}
 8006e96:	4604      	mov	r4, r0
 8006e98:	f7ff fff0 	bl	8006e7c <__sfp_lock_acquire>
 8006e9c:	6a23      	ldr	r3, [r4, #32]
 8006e9e:	b11b      	cbz	r3, 8006ea8 <__sinit+0x14>
 8006ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea4:	f7ff bff0 	b.w	8006e88 <__sfp_lock_release>
 8006ea8:	4b04      	ldr	r3, [pc, #16]	; (8006ebc <__sinit+0x28>)
 8006eaa:	6223      	str	r3, [r4, #32]
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <__sinit+0x2c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f5      	bne.n	8006ea0 <__sinit+0xc>
 8006eb4:	f7ff ffc4 	bl	8006e40 <global_stdio_init.part.0>
 8006eb8:	e7f2      	b.n	8006ea0 <__sinit+0xc>
 8006eba:	bf00      	nop
 8006ebc:	08006e01 	.word	0x08006e01
 8006ec0:	2001f7c0 	.word	0x2001f7c0

08006ec4 <_fwalk_sglue>:
 8006ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	4607      	mov	r7, r0
 8006eca:	4688      	mov	r8, r1
 8006ecc:	4614      	mov	r4, r2
 8006ece:	2600      	movs	r6, #0
 8006ed0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ed4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ed8:	d505      	bpl.n	8006ee6 <_fwalk_sglue+0x22>
 8006eda:	6824      	ldr	r4, [r4, #0]
 8006edc:	2c00      	cmp	r4, #0
 8006ede:	d1f7      	bne.n	8006ed0 <_fwalk_sglue+0xc>
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ee6:	89ab      	ldrh	r3, [r5, #12]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d907      	bls.n	8006efc <_fwalk_sglue+0x38>
 8006eec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	d003      	beq.n	8006efc <_fwalk_sglue+0x38>
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	47c0      	blx	r8
 8006efa:	4306      	orrs	r6, r0
 8006efc:	3568      	adds	r5, #104	; 0x68
 8006efe:	e7e9      	b.n	8006ed4 <_fwalk_sglue+0x10>

08006f00 <iprintf>:
 8006f00:	b40f      	push	{r0, r1, r2, r3}
 8006f02:	b507      	push	{r0, r1, r2, lr}
 8006f04:	4906      	ldr	r1, [pc, #24]	; (8006f20 <iprintf+0x20>)
 8006f06:	ab04      	add	r3, sp, #16
 8006f08:	6808      	ldr	r0, [r1, #0]
 8006f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0e:	6881      	ldr	r1, [r0, #8]
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	f000 fae5 	bl	80074e0 <_vfiprintf_r>
 8006f16:	b003      	add	sp, #12
 8006f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f1c:	b004      	add	sp, #16
 8006f1e:	4770      	bx	lr
 8006f20:	2000006c 	.word	0x2000006c

08006f24 <_puts_r>:
 8006f24:	6a03      	ldr	r3, [r0, #32]
 8006f26:	b570      	push	{r4, r5, r6, lr}
 8006f28:	6884      	ldr	r4, [r0, #8]
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	460e      	mov	r6, r1
 8006f2e:	b90b      	cbnz	r3, 8006f34 <_puts_r+0x10>
 8006f30:	f7ff ffb0 	bl	8006e94 <__sinit>
 8006f34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f36:	07db      	lsls	r3, r3, #31
 8006f38:	d405      	bmi.n	8006f46 <_puts_r+0x22>
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	0598      	lsls	r0, r3, #22
 8006f3e:	d402      	bmi.n	8006f46 <_puts_r+0x22>
 8006f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f42:	f000 f99b 	bl	800727c <__retarget_lock_acquire_recursive>
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	0719      	lsls	r1, r3, #28
 8006f4a:	d513      	bpl.n	8006f74 <_puts_r+0x50>
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	b18b      	cbz	r3, 8006f74 <_puts_r+0x50>
 8006f50:	3e01      	subs	r6, #1
 8006f52:	68a3      	ldr	r3, [r4, #8]
 8006f54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	60a3      	str	r3, [r4, #8]
 8006f5c:	b9e9      	cbnz	r1, 8006f9a <_puts_r+0x76>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	da2e      	bge.n	8006fc0 <_puts_r+0x9c>
 8006f62:	4622      	mov	r2, r4
 8006f64:	210a      	movs	r1, #10
 8006f66:	4628      	mov	r0, r5
 8006f68:	f000 f87b 	bl	8007062 <__swbuf_r>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d007      	beq.n	8006f80 <_puts_r+0x5c>
 8006f70:	250a      	movs	r5, #10
 8006f72:	e007      	b.n	8006f84 <_puts_r+0x60>
 8006f74:	4621      	mov	r1, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 f8b0 	bl	80070dc <__swsetup_r>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d0e7      	beq.n	8006f50 <_puts_r+0x2c>
 8006f80:	f04f 35ff 	mov.w	r5, #4294967295
 8006f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f86:	07da      	lsls	r2, r3, #31
 8006f88:	d405      	bmi.n	8006f96 <_puts_r+0x72>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	059b      	lsls	r3, r3, #22
 8006f8e:	d402      	bmi.n	8006f96 <_puts_r+0x72>
 8006f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f92:	f000 f974 	bl	800727e <__retarget_lock_release_recursive>
 8006f96:	4628      	mov	r0, r5
 8006f98:	bd70      	pop	{r4, r5, r6, pc}
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	da04      	bge.n	8006fa8 <_puts_r+0x84>
 8006f9e:	69a2      	ldr	r2, [r4, #24]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	dc06      	bgt.n	8006fb2 <_puts_r+0x8e>
 8006fa4:	290a      	cmp	r1, #10
 8006fa6:	d004      	beq.n	8006fb2 <_puts_r+0x8e>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	7019      	strb	r1, [r3, #0]
 8006fb0:	e7cf      	b.n	8006f52 <_puts_r+0x2e>
 8006fb2:	4622      	mov	r2, r4
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f000 f854 	bl	8007062 <__swbuf_r>
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d1c9      	bne.n	8006f52 <_puts_r+0x2e>
 8006fbe:	e7df      	b.n	8006f80 <_puts_r+0x5c>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	250a      	movs	r5, #10
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	6022      	str	r2, [r4, #0]
 8006fc8:	701d      	strb	r5, [r3, #0]
 8006fca:	e7db      	b.n	8006f84 <_puts_r+0x60>

08006fcc <puts>:
 8006fcc:	4b02      	ldr	r3, [pc, #8]	; (8006fd8 <puts+0xc>)
 8006fce:	4601      	mov	r1, r0
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	f7ff bfa7 	b.w	8006f24 <_puts_r>
 8006fd6:	bf00      	nop
 8006fd8:	2000006c 	.word	0x2000006c

08006fdc <__sread>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe4:	f000 f8fc 	bl	80071e0 <_read_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	bfab      	itete	ge
 8006fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ff0:	181b      	addge	r3, r3, r0
 8006ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ff6:	bfac      	ite	ge
 8006ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ffa:	81a3      	strhlt	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__swrite>:
 8006ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007002:	461f      	mov	r7, r3
 8007004:	898b      	ldrh	r3, [r1, #12]
 8007006:	05db      	lsls	r3, r3, #23
 8007008:	4605      	mov	r5, r0
 800700a:	460c      	mov	r4, r1
 800700c:	4616      	mov	r6, r2
 800700e:	d505      	bpl.n	800701c <__swrite+0x1e>
 8007010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007014:	2302      	movs	r3, #2
 8007016:	2200      	movs	r2, #0
 8007018:	f000 f8d0 	bl	80071bc <_lseek_r>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	4632      	mov	r2, r6
 800702a:	463b      	mov	r3, r7
 800702c:	4628      	mov	r0, r5
 800702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007032:	f000 b8e7 	b.w	8007204 <_write_r>

08007036 <__sseek>:
 8007036:	b510      	push	{r4, lr}
 8007038:	460c      	mov	r4, r1
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 f8bd 	bl	80071bc <_lseek_r>
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	bf15      	itete	ne
 8007048:	6560      	strne	r0, [r4, #84]	; 0x54
 800704a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800704e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007052:	81a3      	strheq	r3, [r4, #12]
 8007054:	bf18      	it	ne
 8007056:	81a3      	strhne	r3, [r4, #12]
 8007058:	bd10      	pop	{r4, pc}

0800705a <__sclose>:
 800705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705e:	f000 b89d 	b.w	800719c <_close_r>

08007062 <__swbuf_r>:
 8007062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007064:	460e      	mov	r6, r1
 8007066:	4614      	mov	r4, r2
 8007068:	4605      	mov	r5, r0
 800706a:	b118      	cbz	r0, 8007074 <__swbuf_r+0x12>
 800706c:	6a03      	ldr	r3, [r0, #32]
 800706e:	b90b      	cbnz	r3, 8007074 <__swbuf_r+0x12>
 8007070:	f7ff ff10 	bl	8006e94 <__sinit>
 8007074:	69a3      	ldr	r3, [r4, #24]
 8007076:	60a3      	str	r3, [r4, #8]
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	071a      	lsls	r2, r3, #28
 800707c:	d525      	bpl.n	80070ca <__swbuf_r+0x68>
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	b31b      	cbz	r3, 80070ca <__swbuf_r+0x68>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	6922      	ldr	r2, [r4, #16]
 8007086:	1a98      	subs	r0, r3, r2
 8007088:	6963      	ldr	r3, [r4, #20]
 800708a:	b2f6      	uxtb	r6, r6
 800708c:	4283      	cmp	r3, r0
 800708e:	4637      	mov	r7, r6
 8007090:	dc04      	bgt.n	800709c <__swbuf_r+0x3a>
 8007092:	4621      	mov	r1, r4
 8007094:	4628      	mov	r0, r5
 8007096:	f000 fd53 	bl	8007b40 <_fflush_r>
 800709a:	b9e0      	cbnz	r0, 80070d6 <__swbuf_r+0x74>
 800709c:	68a3      	ldr	r3, [r4, #8]
 800709e:	3b01      	subs	r3, #1
 80070a0:	60a3      	str	r3, [r4, #8]
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	6022      	str	r2, [r4, #0]
 80070a8:	701e      	strb	r6, [r3, #0]
 80070aa:	6962      	ldr	r2, [r4, #20]
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d004      	beq.n	80070bc <__swbuf_r+0x5a>
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	07db      	lsls	r3, r3, #31
 80070b6:	d506      	bpl.n	80070c6 <__swbuf_r+0x64>
 80070b8:	2e0a      	cmp	r6, #10
 80070ba:	d104      	bne.n	80070c6 <__swbuf_r+0x64>
 80070bc:	4621      	mov	r1, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 fd3e 	bl	8007b40 <_fflush_r>
 80070c4:	b938      	cbnz	r0, 80070d6 <__swbuf_r+0x74>
 80070c6:	4638      	mov	r0, r7
 80070c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ca:	4621      	mov	r1, r4
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 f805 	bl	80070dc <__swsetup_r>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d0d5      	beq.n	8007082 <__swbuf_r+0x20>
 80070d6:	f04f 37ff 	mov.w	r7, #4294967295
 80070da:	e7f4      	b.n	80070c6 <__swbuf_r+0x64>

080070dc <__swsetup_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4b2a      	ldr	r3, [pc, #168]	; (8007188 <__swsetup_r+0xac>)
 80070e0:	4605      	mov	r5, r0
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	460c      	mov	r4, r1
 80070e6:	b118      	cbz	r0, 80070f0 <__swsetup_r+0x14>
 80070e8:	6a03      	ldr	r3, [r0, #32]
 80070ea:	b90b      	cbnz	r3, 80070f0 <__swsetup_r+0x14>
 80070ec:	f7ff fed2 	bl	8006e94 <__sinit>
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070f6:	0718      	lsls	r0, r3, #28
 80070f8:	d422      	bmi.n	8007140 <__swsetup_r+0x64>
 80070fa:	06d9      	lsls	r1, r3, #27
 80070fc:	d407      	bmi.n	800710e <__swsetup_r+0x32>
 80070fe:	2309      	movs	r3, #9
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007106:	81a3      	strh	r3, [r4, #12]
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	e034      	b.n	8007178 <__swsetup_r+0x9c>
 800710e:	0758      	lsls	r0, r3, #29
 8007110:	d512      	bpl.n	8007138 <__swsetup_r+0x5c>
 8007112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007114:	b141      	cbz	r1, 8007128 <__swsetup_r+0x4c>
 8007116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800711a:	4299      	cmp	r1, r3
 800711c:	d002      	beq.n	8007124 <__swsetup_r+0x48>
 800711e:	4628      	mov	r0, r5
 8007120:	f000 f8bc 	bl	800729c <_free_r>
 8007124:	2300      	movs	r3, #0
 8007126:	6363      	str	r3, [r4, #52]	; 0x34
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800712e:	81a3      	strh	r3, [r4, #12]
 8007130:	2300      	movs	r3, #0
 8007132:	6063      	str	r3, [r4, #4]
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	f043 0308 	orr.w	r3, r3, #8
 800713e:	81a3      	strh	r3, [r4, #12]
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	b94b      	cbnz	r3, 8007158 <__swsetup_r+0x7c>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800714a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800714e:	d003      	beq.n	8007158 <__swsetup_r+0x7c>
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 fd42 	bl	8007bdc <__smakebuf_r>
 8007158:	89a0      	ldrh	r0, [r4, #12]
 800715a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800715e:	f010 0301 	ands.w	r3, r0, #1
 8007162:	d00a      	beq.n	800717a <__swsetup_r+0x9e>
 8007164:	2300      	movs	r3, #0
 8007166:	60a3      	str	r3, [r4, #8]
 8007168:	6963      	ldr	r3, [r4, #20]
 800716a:	425b      	negs	r3, r3
 800716c:	61a3      	str	r3, [r4, #24]
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	b943      	cbnz	r3, 8007184 <__swsetup_r+0xa8>
 8007172:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007176:	d1c4      	bne.n	8007102 <__swsetup_r+0x26>
 8007178:	bd38      	pop	{r3, r4, r5, pc}
 800717a:	0781      	lsls	r1, r0, #30
 800717c:	bf58      	it	pl
 800717e:	6963      	ldrpl	r3, [r4, #20]
 8007180:	60a3      	str	r3, [r4, #8]
 8007182:	e7f4      	b.n	800716e <__swsetup_r+0x92>
 8007184:	2000      	movs	r0, #0
 8007186:	e7f7      	b.n	8007178 <__swsetup_r+0x9c>
 8007188:	2000006c 	.word	0x2000006c

0800718c <memset>:
 800718c:	4402      	add	r2, r0
 800718e:	4603      	mov	r3, r0
 8007190:	4293      	cmp	r3, r2
 8007192:	d100      	bne.n	8007196 <memset+0xa>
 8007194:	4770      	bx	lr
 8007196:	f803 1b01 	strb.w	r1, [r3], #1
 800719a:	e7f9      	b.n	8007190 <memset+0x4>

0800719c <_close_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4d06      	ldr	r5, [pc, #24]	; (80071b8 <_close_r+0x1c>)
 80071a0:	2300      	movs	r3, #0
 80071a2:	4604      	mov	r4, r0
 80071a4:	4608      	mov	r0, r1
 80071a6:	602b      	str	r3, [r5, #0]
 80071a8:	f7fa fdc1 	bl	8001d2e <_close>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	d102      	bne.n	80071b6 <_close_r+0x1a>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	b103      	cbz	r3, 80071b6 <_close_r+0x1a>
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	2001f7c4 	.word	0x2001f7c4

080071bc <_lseek_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4d07      	ldr	r5, [pc, #28]	; (80071dc <_lseek_r+0x20>)
 80071c0:	4604      	mov	r4, r0
 80071c2:	4608      	mov	r0, r1
 80071c4:	4611      	mov	r1, r2
 80071c6:	2200      	movs	r2, #0
 80071c8:	602a      	str	r2, [r5, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f7fa fdd6 	bl	8001d7c <_lseek>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_lseek_r+0x1e>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	b103      	cbz	r3, 80071da <_lseek_r+0x1e>
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	2001f7c4 	.word	0x2001f7c4

080071e0 <_read_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4d07      	ldr	r5, [pc, #28]	; (8007200 <_read_r+0x20>)
 80071e4:	4604      	mov	r4, r0
 80071e6:	4608      	mov	r0, r1
 80071e8:	4611      	mov	r1, r2
 80071ea:	2200      	movs	r2, #0
 80071ec:	602a      	str	r2, [r5, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	f7fa fd64 	bl	8001cbc <_read>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_read_r+0x1e>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_read_r+0x1e>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	2001f7c4 	.word	0x2001f7c4

08007204 <_write_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4d07      	ldr	r5, [pc, #28]	; (8007224 <_write_r+0x20>)
 8007208:	4604      	mov	r4, r0
 800720a:	4608      	mov	r0, r1
 800720c:	4611      	mov	r1, r2
 800720e:	2200      	movs	r2, #0
 8007210:	602a      	str	r2, [r5, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	f7fa fd6f 	bl	8001cf6 <_write>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_write_r+0x1e>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_write_r+0x1e>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	2001f7c4 	.word	0x2001f7c4

08007228 <__errno>:
 8007228:	4b01      	ldr	r3, [pc, #4]	; (8007230 <__errno+0x8>)
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	2000006c 	.word	0x2000006c

08007234 <__libc_init_array>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	4d0d      	ldr	r5, [pc, #52]	; (800726c <__libc_init_array+0x38>)
 8007238:	4c0d      	ldr	r4, [pc, #52]	; (8007270 <__libc_init_array+0x3c>)
 800723a:	1b64      	subs	r4, r4, r5
 800723c:	10a4      	asrs	r4, r4, #2
 800723e:	2600      	movs	r6, #0
 8007240:	42a6      	cmp	r6, r4
 8007242:	d109      	bne.n	8007258 <__libc_init_array+0x24>
 8007244:	4d0b      	ldr	r5, [pc, #44]	; (8007274 <__libc_init_array+0x40>)
 8007246:	4c0c      	ldr	r4, [pc, #48]	; (8007278 <__libc_init_array+0x44>)
 8007248:	f000 fd36 	bl	8007cb8 <_init>
 800724c:	1b64      	subs	r4, r4, r5
 800724e:	10a4      	asrs	r4, r4, #2
 8007250:	2600      	movs	r6, #0
 8007252:	42a6      	cmp	r6, r4
 8007254:	d105      	bne.n	8007262 <__libc_init_array+0x2e>
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	f855 3b04 	ldr.w	r3, [r5], #4
 800725c:	4798      	blx	r3
 800725e:	3601      	adds	r6, #1
 8007260:	e7ee      	b.n	8007240 <__libc_init_array+0xc>
 8007262:	f855 3b04 	ldr.w	r3, [r5], #4
 8007266:	4798      	blx	r3
 8007268:	3601      	adds	r6, #1
 800726a:	e7f2      	b.n	8007252 <__libc_init_array+0x1e>
 800726c:	08007dac 	.word	0x08007dac
 8007270:	08007dac 	.word	0x08007dac
 8007274:	08007dac 	.word	0x08007dac
 8007278:	08007db0 	.word	0x08007db0

0800727c <__retarget_lock_acquire_recursive>:
 800727c:	4770      	bx	lr

0800727e <__retarget_lock_release_recursive>:
 800727e:	4770      	bx	lr

08007280 <memcpy>:
 8007280:	440a      	add	r2, r1
 8007282:	4291      	cmp	r1, r2
 8007284:	f100 33ff 	add.w	r3, r0, #4294967295
 8007288:	d100      	bne.n	800728c <memcpy+0xc>
 800728a:	4770      	bx	lr
 800728c:	b510      	push	{r4, lr}
 800728e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007296:	4291      	cmp	r1, r2
 8007298:	d1f9      	bne.n	800728e <memcpy+0xe>
 800729a:	bd10      	pop	{r4, pc}

0800729c <_free_r>:
 800729c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800729e:	2900      	cmp	r1, #0
 80072a0:	d044      	beq.n	800732c <_free_r+0x90>
 80072a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a6:	9001      	str	r0, [sp, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f1a1 0404 	sub.w	r4, r1, #4
 80072ae:	bfb8      	it	lt
 80072b0:	18e4      	addlt	r4, r4, r3
 80072b2:	f000 f8df 	bl	8007474 <__malloc_lock>
 80072b6:	4a1e      	ldr	r2, [pc, #120]	; (8007330 <_free_r+0x94>)
 80072b8:	9801      	ldr	r0, [sp, #4]
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	b933      	cbnz	r3, 80072cc <_free_r+0x30>
 80072be:	6063      	str	r3, [r4, #4]
 80072c0:	6014      	str	r4, [r2, #0]
 80072c2:	b003      	add	sp, #12
 80072c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072c8:	f000 b8da 	b.w	8007480 <__malloc_unlock>
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	d908      	bls.n	80072e2 <_free_r+0x46>
 80072d0:	6825      	ldr	r5, [r4, #0]
 80072d2:	1961      	adds	r1, r4, r5
 80072d4:	428b      	cmp	r3, r1
 80072d6:	bf01      	itttt	eq
 80072d8:	6819      	ldreq	r1, [r3, #0]
 80072da:	685b      	ldreq	r3, [r3, #4]
 80072dc:	1949      	addeq	r1, r1, r5
 80072de:	6021      	streq	r1, [r4, #0]
 80072e0:	e7ed      	b.n	80072be <_free_r+0x22>
 80072e2:	461a      	mov	r2, r3
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	b10b      	cbz	r3, 80072ec <_free_r+0x50>
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d9fa      	bls.n	80072e2 <_free_r+0x46>
 80072ec:	6811      	ldr	r1, [r2, #0]
 80072ee:	1855      	adds	r5, r2, r1
 80072f0:	42a5      	cmp	r5, r4
 80072f2:	d10b      	bne.n	800730c <_free_r+0x70>
 80072f4:	6824      	ldr	r4, [r4, #0]
 80072f6:	4421      	add	r1, r4
 80072f8:	1854      	adds	r4, r2, r1
 80072fa:	42a3      	cmp	r3, r4
 80072fc:	6011      	str	r1, [r2, #0]
 80072fe:	d1e0      	bne.n	80072c2 <_free_r+0x26>
 8007300:	681c      	ldr	r4, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	6053      	str	r3, [r2, #4]
 8007306:	440c      	add	r4, r1
 8007308:	6014      	str	r4, [r2, #0]
 800730a:	e7da      	b.n	80072c2 <_free_r+0x26>
 800730c:	d902      	bls.n	8007314 <_free_r+0x78>
 800730e:	230c      	movs	r3, #12
 8007310:	6003      	str	r3, [r0, #0]
 8007312:	e7d6      	b.n	80072c2 <_free_r+0x26>
 8007314:	6825      	ldr	r5, [r4, #0]
 8007316:	1961      	adds	r1, r4, r5
 8007318:	428b      	cmp	r3, r1
 800731a:	bf04      	itt	eq
 800731c:	6819      	ldreq	r1, [r3, #0]
 800731e:	685b      	ldreq	r3, [r3, #4]
 8007320:	6063      	str	r3, [r4, #4]
 8007322:	bf04      	itt	eq
 8007324:	1949      	addeq	r1, r1, r5
 8007326:	6021      	streq	r1, [r4, #0]
 8007328:	6054      	str	r4, [r2, #4]
 800732a:	e7ca      	b.n	80072c2 <_free_r+0x26>
 800732c:	b003      	add	sp, #12
 800732e:	bd30      	pop	{r4, r5, pc}
 8007330:	2001f7cc 	.word	0x2001f7cc

08007334 <sbrk_aligned>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4e0e      	ldr	r6, [pc, #56]	; (8007370 <sbrk_aligned+0x3c>)
 8007338:	460c      	mov	r4, r1
 800733a:	6831      	ldr	r1, [r6, #0]
 800733c:	4605      	mov	r5, r0
 800733e:	b911      	cbnz	r1, 8007346 <sbrk_aligned+0x12>
 8007340:	f000 fcaa 	bl	8007c98 <_sbrk_r>
 8007344:	6030      	str	r0, [r6, #0]
 8007346:	4621      	mov	r1, r4
 8007348:	4628      	mov	r0, r5
 800734a:	f000 fca5 	bl	8007c98 <_sbrk_r>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	d00a      	beq.n	8007368 <sbrk_aligned+0x34>
 8007352:	1cc4      	adds	r4, r0, #3
 8007354:	f024 0403 	bic.w	r4, r4, #3
 8007358:	42a0      	cmp	r0, r4
 800735a:	d007      	beq.n	800736c <sbrk_aligned+0x38>
 800735c:	1a21      	subs	r1, r4, r0
 800735e:	4628      	mov	r0, r5
 8007360:	f000 fc9a 	bl	8007c98 <_sbrk_r>
 8007364:	3001      	adds	r0, #1
 8007366:	d101      	bne.n	800736c <sbrk_aligned+0x38>
 8007368:	f04f 34ff 	mov.w	r4, #4294967295
 800736c:	4620      	mov	r0, r4
 800736e:	bd70      	pop	{r4, r5, r6, pc}
 8007370:	2001f7d0 	.word	0x2001f7d0

08007374 <_malloc_r>:
 8007374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007378:	1ccd      	adds	r5, r1, #3
 800737a:	f025 0503 	bic.w	r5, r5, #3
 800737e:	3508      	adds	r5, #8
 8007380:	2d0c      	cmp	r5, #12
 8007382:	bf38      	it	cc
 8007384:	250c      	movcc	r5, #12
 8007386:	2d00      	cmp	r5, #0
 8007388:	4607      	mov	r7, r0
 800738a:	db01      	blt.n	8007390 <_malloc_r+0x1c>
 800738c:	42a9      	cmp	r1, r5
 800738e:	d905      	bls.n	800739c <_malloc_r+0x28>
 8007390:	230c      	movs	r3, #12
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	2600      	movs	r6, #0
 8007396:	4630      	mov	r0, r6
 8007398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800739c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007470 <_malloc_r+0xfc>
 80073a0:	f000 f868 	bl	8007474 <__malloc_lock>
 80073a4:	f8d8 3000 	ldr.w	r3, [r8]
 80073a8:	461c      	mov	r4, r3
 80073aa:	bb5c      	cbnz	r4, 8007404 <_malloc_r+0x90>
 80073ac:	4629      	mov	r1, r5
 80073ae:	4638      	mov	r0, r7
 80073b0:	f7ff ffc0 	bl	8007334 <sbrk_aligned>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	4604      	mov	r4, r0
 80073b8:	d155      	bne.n	8007466 <_malloc_r+0xf2>
 80073ba:	f8d8 4000 	ldr.w	r4, [r8]
 80073be:	4626      	mov	r6, r4
 80073c0:	2e00      	cmp	r6, #0
 80073c2:	d145      	bne.n	8007450 <_malloc_r+0xdc>
 80073c4:	2c00      	cmp	r4, #0
 80073c6:	d048      	beq.n	800745a <_malloc_r+0xe6>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	4631      	mov	r1, r6
 80073cc:	4638      	mov	r0, r7
 80073ce:	eb04 0903 	add.w	r9, r4, r3
 80073d2:	f000 fc61 	bl	8007c98 <_sbrk_r>
 80073d6:	4581      	cmp	r9, r0
 80073d8:	d13f      	bne.n	800745a <_malloc_r+0xe6>
 80073da:	6821      	ldr	r1, [r4, #0]
 80073dc:	1a6d      	subs	r5, r5, r1
 80073de:	4629      	mov	r1, r5
 80073e0:	4638      	mov	r0, r7
 80073e2:	f7ff ffa7 	bl	8007334 <sbrk_aligned>
 80073e6:	3001      	adds	r0, #1
 80073e8:	d037      	beq.n	800745a <_malloc_r+0xe6>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	442b      	add	r3, r5
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	f8d8 3000 	ldr.w	r3, [r8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d038      	beq.n	800746a <_malloc_r+0xf6>
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	42a2      	cmp	r2, r4
 80073fc:	d12b      	bne.n	8007456 <_malloc_r+0xe2>
 80073fe:	2200      	movs	r2, #0
 8007400:	605a      	str	r2, [r3, #4]
 8007402:	e00f      	b.n	8007424 <_malloc_r+0xb0>
 8007404:	6822      	ldr	r2, [r4, #0]
 8007406:	1b52      	subs	r2, r2, r5
 8007408:	d41f      	bmi.n	800744a <_malloc_r+0xd6>
 800740a:	2a0b      	cmp	r2, #11
 800740c:	d917      	bls.n	800743e <_malloc_r+0xca>
 800740e:	1961      	adds	r1, r4, r5
 8007410:	42a3      	cmp	r3, r4
 8007412:	6025      	str	r5, [r4, #0]
 8007414:	bf18      	it	ne
 8007416:	6059      	strne	r1, [r3, #4]
 8007418:	6863      	ldr	r3, [r4, #4]
 800741a:	bf08      	it	eq
 800741c:	f8c8 1000 	streq.w	r1, [r8]
 8007420:	5162      	str	r2, [r4, r5]
 8007422:	604b      	str	r3, [r1, #4]
 8007424:	4638      	mov	r0, r7
 8007426:	f104 060b 	add.w	r6, r4, #11
 800742a:	f000 f829 	bl	8007480 <__malloc_unlock>
 800742e:	f026 0607 	bic.w	r6, r6, #7
 8007432:	1d23      	adds	r3, r4, #4
 8007434:	1af2      	subs	r2, r6, r3
 8007436:	d0ae      	beq.n	8007396 <_malloc_r+0x22>
 8007438:	1b9b      	subs	r3, r3, r6
 800743a:	50a3      	str	r3, [r4, r2]
 800743c:	e7ab      	b.n	8007396 <_malloc_r+0x22>
 800743e:	42a3      	cmp	r3, r4
 8007440:	6862      	ldr	r2, [r4, #4]
 8007442:	d1dd      	bne.n	8007400 <_malloc_r+0x8c>
 8007444:	f8c8 2000 	str.w	r2, [r8]
 8007448:	e7ec      	b.n	8007424 <_malloc_r+0xb0>
 800744a:	4623      	mov	r3, r4
 800744c:	6864      	ldr	r4, [r4, #4]
 800744e:	e7ac      	b.n	80073aa <_malloc_r+0x36>
 8007450:	4634      	mov	r4, r6
 8007452:	6876      	ldr	r6, [r6, #4]
 8007454:	e7b4      	b.n	80073c0 <_malloc_r+0x4c>
 8007456:	4613      	mov	r3, r2
 8007458:	e7cc      	b.n	80073f4 <_malloc_r+0x80>
 800745a:	230c      	movs	r3, #12
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	4638      	mov	r0, r7
 8007460:	f000 f80e 	bl	8007480 <__malloc_unlock>
 8007464:	e797      	b.n	8007396 <_malloc_r+0x22>
 8007466:	6025      	str	r5, [r4, #0]
 8007468:	e7dc      	b.n	8007424 <_malloc_r+0xb0>
 800746a:	605b      	str	r3, [r3, #4]
 800746c:	deff      	udf	#255	; 0xff
 800746e:	bf00      	nop
 8007470:	2001f7cc 	.word	0x2001f7cc

08007474 <__malloc_lock>:
 8007474:	4801      	ldr	r0, [pc, #4]	; (800747c <__malloc_lock+0x8>)
 8007476:	f7ff bf01 	b.w	800727c <__retarget_lock_acquire_recursive>
 800747a:	bf00      	nop
 800747c:	2001f7c8 	.word	0x2001f7c8

08007480 <__malloc_unlock>:
 8007480:	4801      	ldr	r0, [pc, #4]	; (8007488 <__malloc_unlock+0x8>)
 8007482:	f7ff befc 	b.w	800727e <__retarget_lock_release_recursive>
 8007486:	bf00      	nop
 8007488:	2001f7c8 	.word	0x2001f7c8

0800748c <__sfputc_r>:
 800748c:	6893      	ldr	r3, [r2, #8]
 800748e:	3b01      	subs	r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	b410      	push	{r4}
 8007494:	6093      	str	r3, [r2, #8]
 8007496:	da08      	bge.n	80074aa <__sfputc_r+0x1e>
 8007498:	6994      	ldr	r4, [r2, #24]
 800749a:	42a3      	cmp	r3, r4
 800749c:	db01      	blt.n	80074a2 <__sfputc_r+0x16>
 800749e:	290a      	cmp	r1, #10
 80074a0:	d103      	bne.n	80074aa <__sfputc_r+0x1e>
 80074a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a6:	f7ff bddc 	b.w	8007062 <__swbuf_r>
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	1c58      	adds	r0, r3, #1
 80074ae:	6010      	str	r0, [r2, #0]
 80074b0:	7019      	strb	r1, [r3, #0]
 80074b2:	4608      	mov	r0, r1
 80074b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <__sfputs_r>:
 80074ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074bc:	4606      	mov	r6, r0
 80074be:	460f      	mov	r7, r1
 80074c0:	4614      	mov	r4, r2
 80074c2:	18d5      	adds	r5, r2, r3
 80074c4:	42ac      	cmp	r4, r5
 80074c6:	d101      	bne.n	80074cc <__sfputs_r+0x12>
 80074c8:	2000      	movs	r0, #0
 80074ca:	e007      	b.n	80074dc <__sfputs_r+0x22>
 80074cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d0:	463a      	mov	r2, r7
 80074d2:	4630      	mov	r0, r6
 80074d4:	f7ff ffda 	bl	800748c <__sfputc_r>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d1f3      	bne.n	80074c4 <__sfputs_r+0xa>
 80074dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074e0 <_vfiprintf_r>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	460d      	mov	r5, r1
 80074e6:	b09d      	sub	sp, #116	; 0x74
 80074e8:	4614      	mov	r4, r2
 80074ea:	4698      	mov	r8, r3
 80074ec:	4606      	mov	r6, r0
 80074ee:	b118      	cbz	r0, 80074f8 <_vfiprintf_r+0x18>
 80074f0:	6a03      	ldr	r3, [r0, #32]
 80074f2:	b90b      	cbnz	r3, 80074f8 <_vfiprintf_r+0x18>
 80074f4:	f7ff fcce 	bl	8006e94 <__sinit>
 80074f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074fa:	07d9      	lsls	r1, r3, #31
 80074fc:	d405      	bmi.n	800750a <_vfiprintf_r+0x2a>
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	059a      	lsls	r2, r3, #22
 8007502:	d402      	bmi.n	800750a <_vfiprintf_r+0x2a>
 8007504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007506:	f7ff feb9 	bl	800727c <__retarget_lock_acquire_recursive>
 800750a:	89ab      	ldrh	r3, [r5, #12]
 800750c:	071b      	lsls	r3, r3, #28
 800750e:	d501      	bpl.n	8007514 <_vfiprintf_r+0x34>
 8007510:	692b      	ldr	r3, [r5, #16]
 8007512:	b99b      	cbnz	r3, 800753c <_vfiprintf_r+0x5c>
 8007514:	4629      	mov	r1, r5
 8007516:	4630      	mov	r0, r6
 8007518:	f7ff fde0 	bl	80070dc <__swsetup_r>
 800751c:	b170      	cbz	r0, 800753c <_vfiprintf_r+0x5c>
 800751e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007520:	07dc      	lsls	r4, r3, #31
 8007522:	d504      	bpl.n	800752e <_vfiprintf_r+0x4e>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	b01d      	add	sp, #116	; 0x74
 800752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752e:	89ab      	ldrh	r3, [r5, #12]
 8007530:	0598      	lsls	r0, r3, #22
 8007532:	d4f7      	bmi.n	8007524 <_vfiprintf_r+0x44>
 8007534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007536:	f7ff fea2 	bl	800727e <__retarget_lock_release_recursive>
 800753a:	e7f3      	b.n	8007524 <_vfiprintf_r+0x44>
 800753c:	2300      	movs	r3, #0
 800753e:	9309      	str	r3, [sp, #36]	; 0x24
 8007540:	2320      	movs	r3, #32
 8007542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007546:	f8cd 800c 	str.w	r8, [sp, #12]
 800754a:	2330      	movs	r3, #48	; 0x30
 800754c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007700 <_vfiprintf_r+0x220>
 8007550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007554:	f04f 0901 	mov.w	r9, #1
 8007558:	4623      	mov	r3, r4
 800755a:	469a      	mov	sl, r3
 800755c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007560:	b10a      	cbz	r2, 8007566 <_vfiprintf_r+0x86>
 8007562:	2a25      	cmp	r2, #37	; 0x25
 8007564:	d1f9      	bne.n	800755a <_vfiprintf_r+0x7a>
 8007566:	ebba 0b04 	subs.w	fp, sl, r4
 800756a:	d00b      	beq.n	8007584 <_vfiprintf_r+0xa4>
 800756c:	465b      	mov	r3, fp
 800756e:	4622      	mov	r2, r4
 8007570:	4629      	mov	r1, r5
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff ffa1 	bl	80074ba <__sfputs_r>
 8007578:	3001      	adds	r0, #1
 800757a:	f000 80a9 	beq.w	80076d0 <_vfiprintf_r+0x1f0>
 800757e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007580:	445a      	add	r2, fp
 8007582:	9209      	str	r2, [sp, #36]	; 0x24
 8007584:	f89a 3000 	ldrb.w	r3, [sl]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 80a1 	beq.w	80076d0 <_vfiprintf_r+0x1f0>
 800758e:	2300      	movs	r3, #0
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007598:	f10a 0a01 	add.w	sl, sl, #1
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	9307      	str	r3, [sp, #28]
 80075a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075a4:	931a      	str	r3, [sp, #104]	; 0x68
 80075a6:	4654      	mov	r4, sl
 80075a8:	2205      	movs	r2, #5
 80075aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ae:	4854      	ldr	r0, [pc, #336]	; (8007700 <_vfiprintf_r+0x220>)
 80075b0:	f7f8 fe0e 	bl	80001d0 <memchr>
 80075b4:	9a04      	ldr	r2, [sp, #16]
 80075b6:	b9d8      	cbnz	r0, 80075f0 <_vfiprintf_r+0x110>
 80075b8:	06d1      	lsls	r1, r2, #27
 80075ba:	bf44      	itt	mi
 80075bc:	2320      	movmi	r3, #32
 80075be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075c2:	0713      	lsls	r3, r2, #28
 80075c4:	bf44      	itt	mi
 80075c6:	232b      	movmi	r3, #43	; 0x2b
 80075c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075cc:	f89a 3000 	ldrb.w	r3, [sl]
 80075d0:	2b2a      	cmp	r3, #42	; 0x2a
 80075d2:	d015      	beq.n	8007600 <_vfiprintf_r+0x120>
 80075d4:	9a07      	ldr	r2, [sp, #28]
 80075d6:	4654      	mov	r4, sl
 80075d8:	2000      	movs	r0, #0
 80075da:	f04f 0c0a 	mov.w	ip, #10
 80075de:	4621      	mov	r1, r4
 80075e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e4:	3b30      	subs	r3, #48	; 0x30
 80075e6:	2b09      	cmp	r3, #9
 80075e8:	d94d      	bls.n	8007686 <_vfiprintf_r+0x1a6>
 80075ea:	b1b0      	cbz	r0, 800761a <_vfiprintf_r+0x13a>
 80075ec:	9207      	str	r2, [sp, #28]
 80075ee:	e014      	b.n	800761a <_vfiprintf_r+0x13a>
 80075f0:	eba0 0308 	sub.w	r3, r0, r8
 80075f4:	fa09 f303 	lsl.w	r3, r9, r3
 80075f8:	4313      	orrs	r3, r2
 80075fa:	9304      	str	r3, [sp, #16]
 80075fc:	46a2      	mov	sl, r4
 80075fe:	e7d2      	b.n	80075a6 <_vfiprintf_r+0xc6>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	1d19      	adds	r1, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	9103      	str	r1, [sp, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	bfbb      	ittet	lt
 800760c:	425b      	neglt	r3, r3
 800760e:	f042 0202 	orrlt.w	r2, r2, #2
 8007612:	9307      	strge	r3, [sp, #28]
 8007614:	9307      	strlt	r3, [sp, #28]
 8007616:	bfb8      	it	lt
 8007618:	9204      	strlt	r2, [sp, #16]
 800761a:	7823      	ldrb	r3, [r4, #0]
 800761c:	2b2e      	cmp	r3, #46	; 0x2e
 800761e:	d10c      	bne.n	800763a <_vfiprintf_r+0x15a>
 8007620:	7863      	ldrb	r3, [r4, #1]
 8007622:	2b2a      	cmp	r3, #42	; 0x2a
 8007624:	d134      	bne.n	8007690 <_vfiprintf_r+0x1b0>
 8007626:	9b03      	ldr	r3, [sp, #12]
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	9203      	str	r2, [sp, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	bfb8      	it	lt
 8007632:	f04f 33ff 	movlt.w	r3, #4294967295
 8007636:	3402      	adds	r4, #2
 8007638:	9305      	str	r3, [sp, #20]
 800763a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007710 <_vfiprintf_r+0x230>
 800763e:	7821      	ldrb	r1, [r4, #0]
 8007640:	2203      	movs	r2, #3
 8007642:	4650      	mov	r0, sl
 8007644:	f7f8 fdc4 	bl	80001d0 <memchr>
 8007648:	b138      	cbz	r0, 800765a <_vfiprintf_r+0x17a>
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	eba0 000a 	sub.w	r0, r0, sl
 8007650:	2240      	movs	r2, #64	; 0x40
 8007652:	4082      	lsls	r2, r0
 8007654:	4313      	orrs	r3, r2
 8007656:	3401      	adds	r4, #1
 8007658:	9304      	str	r3, [sp, #16]
 800765a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800765e:	4829      	ldr	r0, [pc, #164]	; (8007704 <_vfiprintf_r+0x224>)
 8007660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007664:	2206      	movs	r2, #6
 8007666:	f7f8 fdb3 	bl	80001d0 <memchr>
 800766a:	2800      	cmp	r0, #0
 800766c:	d03f      	beq.n	80076ee <_vfiprintf_r+0x20e>
 800766e:	4b26      	ldr	r3, [pc, #152]	; (8007708 <_vfiprintf_r+0x228>)
 8007670:	bb1b      	cbnz	r3, 80076ba <_vfiprintf_r+0x1da>
 8007672:	9b03      	ldr	r3, [sp, #12]
 8007674:	3307      	adds	r3, #7
 8007676:	f023 0307 	bic.w	r3, r3, #7
 800767a:	3308      	adds	r3, #8
 800767c:	9303      	str	r3, [sp, #12]
 800767e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007680:	443b      	add	r3, r7
 8007682:	9309      	str	r3, [sp, #36]	; 0x24
 8007684:	e768      	b.n	8007558 <_vfiprintf_r+0x78>
 8007686:	fb0c 3202 	mla	r2, ip, r2, r3
 800768a:	460c      	mov	r4, r1
 800768c:	2001      	movs	r0, #1
 800768e:	e7a6      	b.n	80075de <_vfiprintf_r+0xfe>
 8007690:	2300      	movs	r3, #0
 8007692:	3401      	adds	r4, #1
 8007694:	9305      	str	r3, [sp, #20]
 8007696:	4619      	mov	r1, r3
 8007698:	f04f 0c0a 	mov.w	ip, #10
 800769c:	4620      	mov	r0, r4
 800769e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076a2:	3a30      	subs	r2, #48	; 0x30
 80076a4:	2a09      	cmp	r2, #9
 80076a6:	d903      	bls.n	80076b0 <_vfiprintf_r+0x1d0>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0c6      	beq.n	800763a <_vfiprintf_r+0x15a>
 80076ac:	9105      	str	r1, [sp, #20]
 80076ae:	e7c4      	b.n	800763a <_vfiprintf_r+0x15a>
 80076b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076b4:	4604      	mov	r4, r0
 80076b6:	2301      	movs	r3, #1
 80076b8:	e7f0      	b.n	800769c <_vfiprintf_r+0x1bc>
 80076ba:	ab03      	add	r3, sp, #12
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	462a      	mov	r2, r5
 80076c0:	4b12      	ldr	r3, [pc, #72]	; (800770c <_vfiprintf_r+0x22c>)
 80076c2:	a904      	add	r1, sp, #16
 80076c4:	4630      	mov	r0, r6
 80076c6:	f3af 8000 	nop.w
 80076ca:	4607      	mov	r7, r0
 80076cc:	1c78      	adds	r0, r7, #1
 80076ce:	d1d6      	bne.n	800767e <_vfiprintf_r+0x19e>
 80076d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076d2:	07d9      	lsls	r1, r3, #31
 80076d4:	d405      	bmi.n	80076e2 <_vfiprintf_r+0x202>
 80076d6:	89ab      	ldrh	r3, [r5, #12]
 80076d8:	059a      	lsls	r2, r3, #22
 80076da:	d402      	bmi.n	80076e2 <_vfiprintf_r+0x202>
 80076dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076de:	f7ff fdce 	bl	800727e <__retarget_lock_release_recursive>
 80076e2:	89ab      	ldrh	r3, [r5, #12]
 80076e4:	065b      	lsls	r3, r3, #25
 80076e6:	f53f af1d 	bmi.w	8007524 <_vfiprintf_r+0x44>
 80076ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076ec:	e71c      	b.n	8007528 <_vfiprintf_r+0x48>
 80076ee:	ab03      	add	r3, sp, #12
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	462a      	mov	r2, r5
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <_vfiprintf_r+0x22c>)
 80076f6:	a904      	add	r1, sp, #16
 80076f8:	4630      	mov	r0, r6
 80076fa:	f000 f879 	bl	80077f0 <_printf_i>
 80076fe:	e7e4      	b.n	80076ca <_vfiprintf_r+0x1ea>
 8007700:	08007d70 	.word	0x08007d70
 8007704:	08007d7a 	.word	0x08007d7a
 8007708:	00000000 	.word	0x00000000
 800770c:	080074bb 	.word	0x080074bb
 8007710:	08007d76 	.word	0x08007d76

08007714 <_printf_common>:
 8007714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007718:	4616      	mov	r6, r2
 800771a:	4699      	mov	r9, r3
 800771c:	688a      	ldr	r2, [r1, #8]
 800771e:	690b      	ldr	r3, [r1, #16]
 8007720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007724:	4293      	cmp	r3, r2
 8007726:	bfb8      	it	lt
 8007728:	4613      	movlt	r3, r2
 800772a:	6033      	str	r3, [r6, #0]
 800772c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007730:	4607      	mov	r7, r0
 8007732:	460c      	mov	r4, r1
 8007734:	b10a      	cbz	r2, 800773a <_printf_common+0x26>
 8007736:	3301      	adds	r3, #1
 8007738:	6033      	str	r3, [r6, #0]
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	0699      	lsls	r1, r3, #26
 800773e:	bf42      	ittt	mi
 8007740:	6833      	ldrmi	r3, [r6, #0]
 8007742:	3302      	addmi	r3, #2
 8007744:	6033      	strmi	r3, [r6, #0]
 8007746:	6825      	ldr	r5, [r4, #0]
 8007748:	f015 0506 	ands.w	r5, r5, #6
 800774c:	d106      	bne.n	800775c <_printf_common+0x48>
 800774e:	f104 0a19 	add.w	sl, r4, #25
 8007752:	68e3      	ldr	r3, [r4, #12]
 8007754:	6832      	ldr	r2, [r6, #0]
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	42ab      	cmp	r3, r5
 800775a:	dc26      	bgt.n	80077aa <_printf_common+0x96>
 800775c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007760:	1e13      	subs	r3, r2, #0
 8007762:	6822      	ldr	r2, [r4, #0]
 8007764:	bf18      	it	ne
 8007766:	2301      	movne	r3, #1
 8007768:	0692      	lsls	r2, r2, #26
 800776a:	d42b      	bmi.n	80077c4 <_printf_common+0xb0>
 800776c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007770:	4649      	mov	r1, r9
 8007772:	4638      	mov	r0, r7
 8007774:	47c0      	blx	r8
 8007776:	3001      	adds	r0, #1
 8007778:	d01e      	beq.n	80077b8 <_printf_common+0xa4>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	6922      	ldr	r2, [r4, #16]
 800777e:	f003 0306 	and.w	r3, r3, #6
 8007782:	2b04      	cmp	r3, #4
 8007784:	bf02      	ittt	eq
 8007786:	68e5      	ldreq	r5, [r4, #12]
 8007788:	6833      	ldreq	r3, [r6, #0]
 800778a:	1aed      	subeq	r5, r5, r3
 800778c:	68a3      	ldr	r3, [r4, #8]
 800778e:	bf0c      	ite	eq
 8007790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007794:	2500      	movne	r5, #0
 8007796:	4293      	cmp	r3, r2
 8007798:	bfc4      	itt	gt
 800779a:	1a9b      	subgt	r3, r3, r2
 800779c:	18ed      	addgt	r5, r5, r3
 800779e:	2600      	movs	r6, #0
 80077a0:	341a      	adds	r4, #26
 80077a2:	42b5      	cmp	r5, r6
 80077a4:	d11a      	bne.n	80077dc <_printf_common+0xc8>
 80077a6:	2000      	movs	r0, #0
 80077a8:	e008      	b.n	80077bc <_printf_common+0xa8>
 80077aa:	2301      	movs	r3, #1
 80077ac:	4652      	mov	r2, sl
 80077ae:	4649      	mov	r1, r9
 80077b0:	4638      	mov	r0, r7
 80077b2:	47c0      	blx	r8
 80077b4:	3001      	adds	r0, #1
 80077b6:	d103      	bne.n	80077c0 <_printf_common+0xac>
 80077b8:	f04f 30ff 	mov.w	r0, #4294967295
 80077bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c0:	3501      	adds	r5, #1
 80077c2:	e7c6      	b.n	8007752 <_printf_common+0x3e>
 80077c4:	18e1      	adds	r1, r4, r3
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	2030      	movs	r0, #48	; 0x30
 80077ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077ce:	4422      	add	r2, r4
 80077d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077d8:	3302      	adds	r3, #2
 80077da:	e7c7      	b.n	800776c <_printf_common+0x58>
 80077dc:	2301      	movs	r3, #1
 80077de:	4622      	mov	r2, r4
 80077e0:	4649      	mov	r1, r9
 80077e2:	4638      	mov	r0, r7
 80077e4:	47c0      	blx	r8
 80077e6:	3001      	adds	r0, #1
 80077e8:	d0e6      	beq.n	80077b8 <_printf_common+0xa4>
 80077ea:	3601      	adds	r6, #1
 80077ec:	e7d9      	b.n	80077a2 <_printf_common+0x8e>
	...

080077f0 <_printf_i>:
 80077f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f4:	7e0f      	ldrb	r7, [r1, #24]
 80077f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077f8:	2f78      	cmp	r7, #120	; 0x78
 80077fa:	4691      	mov	r9, r2
 80077fc:	4680      	mov	r8, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	469a      	mov	sl, r3
 8007802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007806:	d807      	bhi.n	8007818 <_printf_i+0x28>
 8007808:	2f62      	cmp	r7, #98	; 0x62
 800780a:	d80a      	bhi.n	8007822 <_printf_i+0x32>
 800780c:	2f00      	cmp	r7, #0
 800780e:	f000 80d4 	beq.w	80079ba <_printf_i+0x1ca>
 8007812:	2f58      	cmp	r7, #88	; 0x58
 8007814:	f000 80c0 	beq.w	8007998 <_printf_i+0x1a8>
 8007818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800781c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007820:	e03a      	b.n	8007898 <_printf_i+0xa8>
 8007822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007826:	2b15      	cmp	r3, #21
 8007828:	d8f6      	bhi.n	8007818 <_printf_i+0x28>
 800782a:	a101      	add	r1, pc, #4	; (adr r1, 8007830 <_printf_i+0x40>)
 800782c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007830:	08007889 	.word	0x08007889
 8007834:	0800789d 	.word	0x0800789d
 8007838:	08007819 	.word	0x08007819
 800783c:	08007819 	.word	0x08007819
 8007840:	08007819 	.word	0x08007819
 8007844:	08007819 	.word	0x08007819
 8007848:	0800789d 	.word	0x0800789d
 800784c:	08007819 	.word	0x08007819
 8007850:	08007819 	.word	0x08007819
 8007854:	08007819 	.word	0x08007819
 8007858:	08007819 	.word	0x08007819
 800785c:	080079a1 	.word	0x080079a1
 8007860:	080078c9 	.word	0x080078c9
 8007864:	0800795b 	.word	0x0800795b
 8007868:	08007819 	.word	0x08007819
 800786c:	08007819 	.word	0x08007819
 8007870:	080079c3 	.word	0x080079c3
 8007874:	08007819 	.word	0x08007819
 8007878:	080078c9 	.word	0x080078c9
 800787c:	08007819 	.word	0x08007819
 8007880:	08007819 	.word	0x08007819
 8007884:	08007963 	.word	0x08007963
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	1d1a      	adds	r2, r3, #4
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	602a      	str	r2, [r5, #0]
 8007890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007898:	2301      	movs	r3, #1
 800789a:	e09f      	b.n	80079dc <_printf_i+0x1ec>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	682b      	ldr	r3, [r5, #0]
 80078a0:	0607      	lsls	r7, r0, #24
 80078a2:	f103 0104 	add.w	r1, r3, #4
 80078a6:	6029      	str	r1, [r5, #0]
 80078a8:	d501      	bpl.n	80078ae <_printf_i+0xbe>
 80078aa:	681e      	ldr	r6, [r3, #0]
 80078ac:	e003      	b.n	80078b6 <_printf_i+0xc6>
 80078ae:	0646      	lsls	r6, r0, #25
 80078b0:	d5fb      	bpl.n	80078aa <_printf_i+0xba>
 80078b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80078b6:	2e00      	cmp	r6, #0
 80078b8:	da03      	bge.n	80078c2 <_printf_i+0xd2>
 80078ba:	232d      	movs	r3, #45	; 0x2d
 80078bc:	4276      	negs	r6, r6
 80078be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c2:	485a      	ldr	r0, [pc, #360]	; (8007a2c <_printf_i+0x23c>)
 80078c4:	230a      	movs	r3, #10
 80078c6:	e012      	b.n	80078ee <_printf_i+0xfe>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	1d19      	adds	r1, r3, #4
 80078ce:	6029      	str	r1, [r5, #0]
 80078d0:	0605      	lsls	r5, r0, #24
 80078d2:	d501      	bpl.n	80078d8 <_printf_i+0xe8>
 80078d4:	681e      	ldr	r6, [r3, #0]
 80078d6:	e002      	b.n	80078de <_printf_i+0xee>
 80078d8:	0641      	lsls	r1, r0, #25
 80078da:	d5fb      	bpl.n	80078d4 <_printf_i+0xe4>
 80078dc:	881e      	ldrh	r6, [r3, #0]
 80078de:	4853      	ldr	r0, [pc, #332]	; (8007a2c <_printf_i+0x23c>)
 80078e0:	2f6f      	cmp	r7, #111	; 0x6f
 80078e2:	bf0c      	ite	eq
 80078e4:	2308      	moveq	r3, #8
 80078e6:	230a      	movne	r3, #10
 80078e8:	2100      	movs	r1, #0
 80078ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078ee:	6865      	ldr	r5, [r4, #4]
 80078f0:	60a5      	str	r5, [r4, #8]
 80078f2:	2d00      	cmp	r5, #0
 80078f4:	bfa2      	ittt	ge
 80078f6:	6821      	ldrge	r1, [r4, #0]
 80078f8:	f021 0104 	bicge.w	r1, r1, #4
 80078fc:	6021      	strge	r1, [r4, #0]
 80078fe:	b90e      	cbnz	r6, 8007904 <_printf_i+0x114>
 8007900:	2d00      	cmp	r5, #0
 8007902:	d04b      	beq.n	800799c <_printf_i+0x1ac>
 8007904:	4615      	mov	r5, r2
 8007906:	fbb6 f1f3 	udiv	r1, r6, r3
 800790a:	fb03 6711 	mls	r7, r3, r1, r6
 800790e:	5dc7      	ldrb	r7, [r0, r7]
 8007910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007914:	4637      	mov	r7, r6
 8007916:	42bb      	cmp	r3, r7
 8007918:	460e      	mov	r6, r1
 800791a:	d9f4      	bls.n	8007906 <_printf_i+0x116>
 800791c:	2b08      	cmp	r3, #8
 800791e:	d10b      	bne.n	8007938 <_printf_i+0x148>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	07de      	lsls	r6, r3, #31
 8007924:	d508      	bpl.n	8007938 <_printf_i+0x148>
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	6861      	ldr	r1, [r4, #4]
 800792a:	4299      	cmp	r1, r3
 800792c:	bfde      	ittt	le
 800792e:	2330      	movle	r3, #48	; 0x30
 8007930:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007934:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007938:	1b52      	subs	r2, r2, r5
 800793a:	6122      	str	r2, [r4, #16]
 800793c:	f8cd a000 	str.w	sl, [sp]
 8007940:	464b      	mov	r3, r9
 8007942:	aa03      	add	r2, sp, #12
 8007944:	4621      	mov	r1, r4
 8007946:	4640      	mov	r0, r8
 8007948:	f7ff fee4 	bl	8007714 <_printf_common>
 800794c:	3001      	adds	r0, #1
 800794e:	d14a      	bne.n	80079e6 <_printf_i+0x1f6>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	b004      	add	sp, #16
 8007956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	f043 0320 	orr.w	r3, r3, #32
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	4833      	ldr	r0, [pc, #204]	; (8007a30 <_printf_i+0x240>)
 8007964:	2778      	movs	r7, #120	; 0x78
 8007966:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	6829      	ldr	r1, [r5, #0]
 800796e:	061f      	lsls	r7, r3, #24
 8007970:	f851 6b04 	ldr.w	r6, [r1], #4
 8007974:	d402      	bmi.n	800797c <_printf_i+0x18c>
 8007976:	065f      	lsls	r7, r3, #25
 8007978:	bf48      	it	mi
 800797a:	b2b6      	uxthmi	r6, r6
 800797c:	07df      	lsls	r7, r3, #31
 800797e:	bf48      	it	mi
 8007980:	f043 0320 	orrmi.w	r3, r3, #32
 8007984:	6029      	str	r1, [r5, #0]
 8007986:	bf48      	it	mi
 8007988:	6023      	strmi	r3, [r4, #0]
 800798a:	b91e      	cbnz	r6, 8007994 <_printf_i+0x1a4>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	f023 0320 	bic.w	r3, r3, #32
 8007992:	6023      	str	r3, [r4, #0]
 8007994:	2310      	movs	r3, #16
 8007996:	e7a7      	b.n	80078e8 <_printf_i+0xf8>
 8007998:	4824      	ldr	r0, [pc, #144]	; (8007a2c <_printf_i+0x23c>)
 800799a:	e7e4      	b.n	8007966 <_printf_i+0x176>
 800799c:	4615      	mov	r5, r2
 800799e:	e7bd      	b.n	800791c <_printf_i+0x12c>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	6826      	ldr	r6, [r4, #0]
 80079a4:	6961      	ldr	r1, [r4, #20]
 80079a6:	1d18      	adds	r0, r3, #4
 80079a8:	6028      	str	r0, [r5, #0]
 80079aa:	0635      	lsls	r5, r6, #24
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	d501      	bpl.n	80079b4 <_printf_i+0x1c4>
 80079b0:	6019      	str	r1, [r3, #0]
 80079b2:	e002      	b.n	80079ba <_printf_i+0x1ca>
 80079b4:	0670      	lsls	r0, r6, #25
 80079b6:	d5fb      	bpl.n	80079b0 <_printf_i+0x1c0>
 80079b8:	8019      	strh	r1, [r3, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	4615      	mov	r5, r2
 80079c0:	e7bc      	b.n	800793c <_printf_i+0x14c>
 80079c2:	682b      	ldr	r3, [r5, #0]
 80079c4:	1d1a      	adds	r2, r3, #4
 80079c6:	602a      	str	r2, [r5, #0]
 80079c8:	681d      	ldr	r5, [r3, #0]
 80079ca:	6862      	ldr	r2, [r4, #4]
 80079cc:	2100      	movs	r1, #0
 80079ce:	4628      	mov	r0, r5
 80079d0:	f7f8 fbfe 	bl	80001d0 <memchr>
 80079d4:	b108      	cbz	r0, 80079da <_printf_i+0x1ea>
 80079d6:	1b40      	subs	r0, r0, r5
 80079d8:	6060      	str	r0, [r4, #4]
 80079da:	6863      	ldr	r3, [r4, #4]
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	2300      	movs	r3, #0
 80079e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e4:	e7aa      	b.n	800793c <_printf_i+0x14c>
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	462a      	mov	r2, r5
 80079ea:	4649      	mov	r1, r9
 80079ec:	4640      	mov	r0, r8
 80079ee:	47d0      	blx	sl
 80079f0:	3001      	adds	r0, #1
 80079f2:	d0ad      	beq.n	8007950 <_printf_i+0x160>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	079b      	lsls	r3, r3, #30
 80079f8:	d413      	bmi.n	8007a22 <_printf_i+0x232>
 80079fa:	68e0      	ldr	r0, [r4, #12]
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	4298      	cmp	r0, r3
 8007a00:	bfb8      	it	lt
 8007a02:	4618      	movlt	r0, r3
 8007a04:	e7a6      	b.n	8007954 <_printf_i+0x164>
 8007a06:	2301      	movs	r3, #1
 8007a08:	4632      	mov	r2, r6
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	47d0      	blx	sl
 8007a10:	3001      	adds	r0, #1
 8007a12:	d09d      	beq.n	8007950 <_printf_i+0x160>
 8007a14:	3501      	adds	r5, #1
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	9903      	ldr	r1, [sp, #12]
 8007a1a:	1a5b      	subs	r3, r3, r1
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dcf2      	bgt.n	8007a06 <_printf_i+0x216>
 8007a20:	e7eb      	b.n	80079fa <_printf_i+0x20a>
 8007a22:	2500      	movs	r5, #0
 8007a24:	f104 0619 	add.w	r6, r4, #25
 8007a28:	e7f5      	b.n	8007a16 <_printf_i+0x226>
 8007a2a:	bf00      	nop
 8007a2c:	08007d81 	.word	0x08007d81
 8007a30:	08007d92 	.word	0x08007d92

08007a34 <__sflush_r>:
 8007a34:	898a      	ldrh	r2, [r1, #12]
 8007a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	0710      	lsls	r0, r2, #28
 8007a3e:	460c      	mov	r4, r1
 8007a40:	d458      	bmi.n	8007af4 <__sflush_r+0xc0>
 8007a42:	684b      	ldr	r3, [r1, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	dc05      	bgt.n	8007a54 <__sflush_r+0x20>
 8007a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dc02      	bgt.n	8007a54 <__sflush_r+0x20>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a56:	2e00      	cmp	r6, #0
 8007a58:	d0f9      	beq.n	8007a4e <__sflush_r+0x1a>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a60:	682f      	ldr	r7, [r5, #0]
 8007a62:	6a21      	ldr	r1, [r4, #32]
 8007a64:	602b      	str	r3, [r5, #0]
 8007a66:	d032      	beq.n	8007ace <__sflush_r+0x9a>
 8007a68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	075a      	lsls	r2, r3, #29
 8007a6e:	d505      	bpl.n	8007a7c <__sflush_r+0x48>
 8007a70:	6863      	ldr	r3, [r4, #4]
 8007a72:	1ac0      	subs	r0, r0, r3
 8007a74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a76:	b10b      	cbz	r3, 8007a7c <__sflush_r+0x48>
 8007a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a7a:	1ac0      	subs	r0, r0, r3
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4602      	mov	r2, r0
 8007a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a82:	6a21      	ldr	r1, [r4, #32]
 8007a84:	4628      	mov	r0, r5
 8007a86:	47b0      	blx	r6
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	d106      	bne.n	8007a9c <__sflush_r+0x68>
 8007a8e:	6829      	ldr	r1, [r5, #0]
 8007a90:	291d      	cmp	r1, #29
 8007a92:	d82b      	bhi.n	8007aec <__sflush_r+0xb8>
 8007a94:	4a29      	ldr	r2, [pc, #164]	; (8007b3c <__sflush_r+0x108>)
 8007a96:	410a      	asrs	r2, r1
 8007a98:	07d6      	lsls	r6, r2, #31
 8007a9a:	d427      	bmi.n	8007aec <__sflush_r+0xb8>
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	6062      	str	r2, [r4, #4]
 8007aa0:	04d9      	lsls	r1, r3, #19
 8007aa2:	6922      	ldr	r2, [r4, #16]
 8007aa4:	6022      	str	r2, [r4, #0]
 8007aa6:	d504      	bpl.n	8007ab2 <__sflush_r+0x7e>
 8007aa8:	1c42      	adds	r2, r0, #1
 8007aaa:	d101      	bne.n	8007ab0 <__sflush_r+0x7c>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b903      	cbnz	r3, 8007ab2 <__sflush_r+0x7e>
 8007ab0:	6560      	str	r0, [r4, #84]	; 0x54
 8007ab2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ab4:	602f      	str	r7, [r5, #0]
 8007ab6:	2900      	cmp	r1, #0
 8007ab8:	d0c9      	beq.n	8007a4e <__sflush_r+0x1a>
 8007aba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007abe:	4299      	cmp	r1, r3
 8007ac0:	d002      	beq.n	8007ac8 <__sflush_r+0x94>
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f7ff fbea 	bl	800729c <_free_r>
 8007ac8:	2000      	movs	r0, #0
 8007aca:	6360      	str	r0, [r4, #52]	; 0x34
 8007acc:	e7c0      	b.n	8007a50 <__sflush_r+0x1c>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b0      	blx	r6
 8007ad4:	1c41      	adds	r1, r0, #1
 8007ad6:	d1c8      	bne.n	8007a6a <__sflush_r+0x36>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d0c5      	beq.n	8007a6a <__sflush_r+0x36>
 8007ade:	2b1d      	cmp	r3, #29
 8007ae0:	d001      	beq.n	8007ae6 <__sflush_r+0xb2>
 8007ae2:	2b16      	cmp	r3, #22
 8007ae4:	d101      	bne.n	8007aea <__sflush_r+0xb6>
 8007ae6:	602f      	str	r7, [r5, #0]
 8007ae8:	e7b1      	b.n	8007a4e <__sflush_r+0x1a>
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	e7ad      	b.n	8007a50 <__sflush_r+0x1c>
 8007af4:	690f      	ldr	r7, [r1, #16]
 8007af6:	2f00      	cmp	r7, #0
 8007af8:	d0a9      	beq.n	8007a4e <__sflush_r+0x1a>
 8007afa:	0793      	lsls	r3, r2, #30
 8007afc:	680e      	ldr	r6, [r1, #0]
 8007afe:	bf08      	it	eq
 8007b00:	694b      	ldreq	r3, [r1, #20]
 8007b02:	600f      	str	r7, [r1, #0]
 8007b04:	bf18      	it	ne
 8007b06:	2300      	movne	r3, #0
 8007b08:	eba6 0807 	sub.w	r8, r6, r7
 8007b0c:	608b      	str	r3, [r1, #8]
 8007b0e:	f1b8 0f00 	cmp.w	r8, #0
 8007b12:	dd9c      	ble.n	8007a4e <__sflush_r+0x1a>
 8007b14:	6a21      	ldr	r1, [r4, #32]
 8007b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b18:	4643      	mov	r3, r8
 8007b1a:	463a      	mov	r2, r7
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	47b0      	blx	r6
 8007b20:	2800      	cmp	r0, #0
 8007b22:	dc06      	bgt.n	8007b32 <__sflush_r+0xfe>
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b2a:	81a3      	strh	r3, [r4, #12]
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	e78e      	b.n	8007a50 <__sflush_r+0x1c>
 8007b32:	4407      	add	r7, r0
 8007b34:	eba8 0800 	sub.w	r8, r8, r0
 8007b38:	e7e9      	b.n	8007b0e <__sflush_r+0xda>
 8007b3a:	bf00      	nop
 8007b3c:	dfbffffe 	.word	0xdfbffffe

08007b40 <_fflush_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	690b      	ldr	r3, [r1, #16]
 8007b44:	4605      	mov	r5, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	b913      	cbnz	r3, 8007b50 <_fflush_r+0x10>
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	b118      	cbz	r0, 8007b5a <_fflush_r+0x1a>
 8007b52:	6a03      	ldr	r3, [r0, #32]
 8007b54:	b90b      	cbnz	r3, 8007b5a <_fflush_r+0x1a>
 8007b56:	f7ff f99d 	bl	8006e94 <__sinit>
 8007b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0f3      	beq.n	8007b4a <_fflush_r+0xa>
 8007b62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b64:	07d0      	lsls	r0, r2, #31
 8007b66:	d404      	bmi.n	8007b72 <_fflush_r+0x32>
 8007b68:	0599      	lsls	r1, r3, #22
 8007b6a:	d402      	bmi.n	8007b72 <_fflush_r+0x32>
 8007b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b6e:	f7ff fb85 	bl	800727c <__retarget_lock_acquire_recursive>
 8007b72:	4628      	mov	r0, r5
 8007b74:	4621      	mov	r1, r4
 8007b76:	f7ff ff5d 	bl	8007a34 <__sflush_r>
 8007b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b7c:	07da      	lsls	r2, r3, #31
 8007b7e:	4605      	mov	r5, r0
 8007b80:	d4e4      	bmi.n	8007b4c <_fflush_r+0xc>
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	059b      	lsls	r3, r3, #22
 8007b86:	d4e1      	bmi.n	8007b4c <_fflush_r+0xc>
 8007b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b8a:	f7ff fb78 	bl	800727e <__retarget_lock_release_recursive>
 8007b8e:	e7dd      	b.n	8007b4c <_fflush_r+0xc>

08007b90 <__swhatbuf_r>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	460c      	mov	r4, r1
 8007b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	b096      	sub	sp, #88	; 0x58
 8007b9c:	4615      	mov	r5, r2
 8007b9e:	461e      	mov	r6, r3
 8007ba0:	da0d      	bge.n	8007bbe <__swhatbuf_r+0x2e>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ba8:	f04f 0100 	mov.w	r1, #0
 8007bac:	bf0c      	ite	eq
 8007bae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007bb2:	2340      	movne	r3, #64	; 0x40
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	6031      	str	r1, [r6, #0]
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	b016      	add	sp, #88	; 0x58
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
 8007bbe:	466a      	mov	r2, sp
 8007bc0:	f000 f848 	bl	8007c54 <_fstat_r>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	dbec      	blt.n	8007ba2 <__swhatbuf_r+0x12>
 8007bc8:	9901      	ldr	r1, [sp, #4]
 8007bca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007bce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007bd2:	4259      	negs	r1, r3
 8007bd4:	4159      	adcs	r1, r3
 8007bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bda:	e7eb      	b.n	8007bb4 <__swhatbuf_r+0x24>

08007bdc <__smakebuf_r>:
 8007bdc:	898b      	ldrh	r3, [r1, #12]
 8007bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007be0:	079d      	lsls	r5, r3, #30
 8007be2:	4606      	mov	r6, r0
 8007be4:	460c      	mov	r4, r1
 8007be6:	d507      	bpl.n	8007bf8 <__smakebuf_r+0x1c>
 8007be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	6123      	str	r3, [r4, #16]
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	6163      	str	r3, [r4, #20]
 8007bf4:	b002      	add	sp, #8
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}
 8007bf8:	ab01      	add	r3, sp, #4
 8007bfa:	466a      	mov	r2, sp
 8007bfc:	f7ff ffc8 	bl	8007b90 <__swhatbuf_r>
 8007c00:	9900      	ldr	r1, [sp, #0]
 8007c02:	4605      	mov	r5, r0
 8007c04:	4630      	mov	r0, r6
 8007c06:	f7ff fbb5 	bl	8007374 <_malloc_r>
 8007c0a:	b948      	cbnz	r0, 8007c20 <__smakebuf_r+0x44>
 8007c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c10:	059a      	lsls	r2, r3, #22
 8007c12:	d4ef      	bmi.n	8007bf4 <__smakebuf_r+0x18>
 8007c14:	f023 0303 	bic.w	r3, r3, #3
 8007c18:	f043 0302 	orr.w	r3, r3, #2
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	e7e3      	b.n	8007be8 <__smakebuf_r+0xc>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	6020      	str	r0, [r4, #0]
 8007c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	9b00      	ldr	r3, [sp, #0]
 8007c2c:	6163      	str	r3, [r4, #20]
 8007c2e:	9b01      	ldr	r3, [sp, #4]
 8007c30:	6120      	str	r0, [r4, #16]
 8007c32:	b15b      	cbz	r3, 8007c4c <__smakebuf_r+0x70>
 8007c34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f000 f81d 	bl	8007c78 <_isatty_r>
 8007c3e:	b128      	cbz	r0, 8007c4c <__smakebuf_r+0x70>
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	f023 0303 	bic.w	r3, r3, #3
 8007c46:	f043 0301 	orr.w	r3, r3, #1
 8007c4a:	81a3      	strh	r3, [r4, #12]
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	431d      	orrs	r5, r3
 8007c50:	81a5      	strh	r5, [r4, #12]
 8007c52:	e7cf      	b.n	8007bf4 <__smakebuf_r+0x18>

08007c54 <_fstat_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d07      	ldr	r5, [pc, #28]	; (8007c74 <_fstat_r+0x20>)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	4611      	mov	r1, r2
 8007c60:	602b      	str	r3, [r5, #0]
 8007c62:	f7fa f870 	bl	8001d46 <_fstat>
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	d102      	bne.n	8007c70 <_fstat_r+0x1c>
 8007c6a:	682b      	ldr	r3, [r5, #0]
 8007c6c:	b103      	cbz	r3, 8007c70 <_fstat_r+0x1c>
 8007c6e:	6023      	str	r3, [r4, #0]
 8007c70:	bd38      	pop	{r3, r4, r5, pc}
 8007c72:	bf00      	nop
 8007c74:	2001f7c4 	.word	0x2001f7c4

08007c78 <_isatty_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d06      	ldr	r5, [pc, #24]	; (8007c94 <_isatty_r+0x1c>)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	4608      	mov	r0, r1
 8007c82:	602b      	str	r3, [r5, #0]
 8007c84:	f7fa f86f 	bl	8001d66 <_isatty>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_isatty_r+0x1a>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_isatty_r+0x1a>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	2001f7c4 	.word	0x2001f7c4

08007c98 <_sbrk_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d06      	ldr	r5, [pc, #24]	; (8007cb4 <_sbrk_r+0x1c>)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	602b      	str	r3, [r5, #0]
 8007ca4:	f7fa f878 	bl	8001d98 <_sbrk>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_sbrk_r+0x1a>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_sbrk_r+0x1a>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	2001f7c4 	.word	0x2001f7c4

08007cb8 <_init>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	bf00      	nop
 8007cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cbe:	bc08      	pop	{r3}
 8007cc0:	469e      	mov	lr, r3
 8007cc2:	4770      	bx	lr

08007cc4 <_fini>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	bf00      	nop
 8007cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cca:	bc08      	pop	{r3}
 8007ccc:	469e      	mov	lr, r3
 8007cce:	4770      	bx	lr
