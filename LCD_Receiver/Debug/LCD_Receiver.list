
LCD_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003758  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003908  08003908  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003910  08003910  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003910  08003910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003918  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000434  20000018  20000018  00020018  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000044c  2000044c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b626  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e18  00000000  00000000  0002b6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c20  00000000  00000000  0002d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000094a  00000000  00000000  0002e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002192c  00000000  00000000  0002ea3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e010  00000000  00000000  00050366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8789  00000000  00000000  0005e376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000323c  00000000  00000000  00126b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00129d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038c8 	.word	0x080038c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080038c8 	.word	0x080038c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <NRF24_DelayMicroSeconds>:
static SPI_HandleTypeDef nrf24_hspi;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <NRF24_DelayMicroSeconds+0x3c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <NRF24_DelayMicroSeconds+0x40>)
 80004d6:	fba2 2303 	umull	r2, r3, r2, r3
 80004da:	0c9a      	lsrs	r2, r3, #18
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	fb02 f303 	mul.w	r3, r2, r3
 80004e2:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80004e4:	bf00      	nop
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	1e5a      	subs	r2, r3, #1
 80004ea:	60fa      	str	r2, [r7, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1fa      	bne.n	80004e6 <NRF24_DelayMicroSeconds+0x22>
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	2000000c 	.word	0x2000000c
 8000504:	165e9f81 	.word	0x165e9f81

08000508 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d008      	beq.n	8000528 <NRF24_csn+0x20>
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <NRF24_csn+0x38>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <NRF24_csn+0x3c>)
 800051c:	8811      	ldrh	r1, [r2, #0]
 800051e:	2201      	movs	r2, #1
 8000520:	4618      	mov	r0, r3
 8000522:	f001 fced 	bl	8001f00 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000526:	e007      	b.n	8000538 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <NRF24_csn+0x38>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <NRF24_csn+0x3c>)
 800052e:	8811      	ldrh	r1, [r2, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fce4 	bl	8001f00 <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000044 	.word	0x20000044
 8000544:	20000048 	.word	0x20000048

08000548 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d008      	beq.n	8000568 <NRF24_ce+0x20>
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <NRF24_ce+0x38>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <NRF24_ce+0x3c>)
 800055c:	8811      	ldrh	r1, [r2, #0]
 800055e:	2201      	movs	r2, #1
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fccd 	bl	8001f00 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000566:	e007      	b.n	8000578 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <NRF24_ce+0x38>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a05      	ldr	r2, [pc, #20]	; (8000584 <NRF24_ce+0x3c>)
 800056e:	8811      	ldrh	r1, [r2, #0]
 8000570:	2200      	movs	r2, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fcc4 	bl	8001f00 <HAL_GPIO_WritePin>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000044 	.word	0x20000044
 8000584:	2000004a 	.word	0x2000004a

08000588 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff ffb8 	bl	8000508 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f003 031f 	and.w	r3, r3, #31
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80005a2:	f107 010c 	add.w	r1, r7, #12
 80005a6:	2364      	movs	r3, #100	; 0x64
 80005a8:	2201      	movs	r2, #1
 80005aa:	480a      	ldr	r0, [pc, #40]	; (80005d4 <NRF24_read_register+0x4c>)
 80005ac:	f002 fb13 	bl	8002bd6 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	1c59      	adds	r1, r3, #1
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	2201      	movs	r2, #1
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <NRF24_read_register+0x4c>)
 80005bc:	f002 fc47 	bl	8002e4e <HAL_SPI_Receive>
	retData = spiBuf[1];
 80005c0:	7b7b      	ldrb	r3, [r7, #13]
 80005c2:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f7ff ff9f 	bl	8000508 <NRF24_csn>
	return retData;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000004c 	.word	0x2000004c

080005d8 <NRF24_write_register>:
	//Bring CSN high
	NRF24_csn(1);
}
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff ff8d 	bl	8000508 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80005fc:	f107 010c 	add.w	r1, r7, #12
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	2202      	movs	r2, #2
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <NRF24_write_register+0x40>)
 8000606:	f002 fae6 	bl	8002bd6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f7ff ff7c 	bl	8000508 <NRF24_csn>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000004c 	.word	0x2000004c

0800061c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff6b 	bl	8000508 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f043 0320 	orr.w	r3, r3, #32
 8000638:	b2db      	uxtb	r3, r3
 800063a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800063c:	f107 010c 	add.w	r1, r7, #12
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <NRF24_write_registerN+0x4c>)
 8000646:	f002 fac6 	bl	8002bd6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	b29a      	uxth	r2, r3
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	6839      	ldr	r1, [r7, #0]
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <NRF24_write_registerN+0x4c>)
 8000654:	f002 fabf 	bl	8002bd6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff ff55 	bl	8000508 <NRF24_csn>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000004c 	.word	0x2000004c

0800066c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000678:	f000 fa14 	bl	8000aa4 <NRF24_getPayloadSize>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	4293      	cmp	r3, r2
 8000684:	d303      	bcc.n	800068e <NRF24_read_payload+0x22>
 8000686:	f000 fa0d 	bl	8000aa4 <NRF24_getPayloadSize>
 800068a:	4603      	mov	r3, r0
 800068c:	e000      	b.n	8000690 <NRF24_read_payload+0x24>
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff ff38 	bl	8000508 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000698:	2361      	movs	r3, #97	; 0x61
 800069a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800069c:	f107 010e 	add.w	r1, r7, #14
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	2201      	movs	r2, #1
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <NRF24_read_payload+0x5c>)
 80006a6:	f002 fa96 	bl	8002bd6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	2364      	movs	r3, #100	; 0x64
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <NRF24_read_payload+0x5c>)
 80006b4:	f002 fbcb 	bl	8002e4e <HAL_SPI_Receive>
	NRF24_csn(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ff25 	bl	8000508 <NRF24_csn>
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000004c 	.word	0x2000004c

080006cc <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80006d0:	21ff      	movs	r1, #255	; 0xff
 80006d2:	20e1      	movs	r0, #225	; 0xe1
 80006d4:	f7ff ff80 	bl	80005d8 <NRF24_write_register>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80006e0:	21ff      	movs	r1, #255	; 0xff
 80006e2:	20e2      	movs	r0, #226	; 0xe2
 80006e4:	f7ff ff78 	bl	80005d8 <NRF24_write_register>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80006f2:	2007      	movs	r0, #7
 80006f4:	f7ff ff48 	bl	8000588 <NRF24_read_register>
 80006f8:	4603      	mov	r3, r0
 80006fa:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80006fc:	79fb      	ldrb	r3, [r7, #7]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000708:	b082      	sub	sp, #8
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	460b      	mov	r3, r1
 8000716:	807b      	strh	r3, [r7, #2]
 8000718:	4613      	mov	r3, r2
 800071a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800071c:	4b65      	ldr	r3, [pc, #404]	; (80008b4 <NRF24_begin+0x1ac>)
 800071e:	4618      	mov	r0, r3
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	2258      	movs	r2, #88	; 0x58
 8000726:	4619      	mov	r1, r3
 8000728:	f003 f8c0 	bl	80038ac <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800072c:	4a62      	ldr	r2, [pc, #392]	; (80008b8 <NRF24_begin+0x1b0>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000732:	4a62      	ldr	r2, [pc, #392]	; (80008bc <NRF24_begin+0x1b4>)
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000738:	4a61      	ldr	r2, [pc, #388]	; (80008c0 <NRF24_begin+0x1b8>)
 800073a:	883b      	ldrh	r3, [r7, #0]
 800073c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff fee2 	bl	8000508 <NRF24_csn>
	NRF24_ce(0);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff feff 	bl	8000548 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800074a:	2005      	movs	r0, #5
 800074c:	f001 f932 	bl	80019b4 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000750:	2108      	movs	r1, #8
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ff40 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000758:	213f      	movs	r1, #63	; 0x3f
 800075a:	2001      	movs	r0, #1
 800075c:	f7ff ff3c 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000760:	2103      	movs	r1, #3
 8000762:	2002      	movs	r0, #2
 8000764:	f7ff ff38 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000768:	2103      	movs	r1, #3
 800076a:	2003      	movs	r0, #3
 800076c:	f7ff ff34 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000770:	2103      	movs	r1, #3
 8000772:	2004      	movs	r0, #4
 8000774:	f7ff ff30 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000778:	2102      	movs	r1, #2
 800077a:	2005      	movs	r0, #5
 800077c:	f7ff ff2c 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000780:	210f      	movs	r1, #15
 8000782:	2006      	movs	r0, #6
 8000784:	f7ff ff28 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000788:	210e      	movs	r1, #14
 800078a:	2007      	movs	r0, #7
 800078c:	f7ff ff24 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000790:	2100      	movs	r1, #0
 8000792:	2008      	movs	r0, #8
 8000794:	f7ff ff20 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000798:	2100      	movs	r1, #0
 800079a:	2009      	movs	r0, #9
 800079c:	f7ff ff1c 	bl	80005d8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80007a0:	23e7      	movs	r3, #231	; 0xe7
 80007a2:	733b      	strb	r3, [r7, #12]
 80007a4:	23e7      	movs	r3, #231	; 0xe7
 80007a6:	72fb      	strb	r3, [r7, #11]
 80007a8:	23e7      	movs	r3, #231	; 0xe7
 80007aa:	72bb      	strb	r3, [r7, #10]
 80007ac:	23e7      	movs	r3, #231	; 0xe7
 80007ae:	727b      	strb	r3, [r7, #9]
 80007b0:	23e7      	movs	r3, #231	; 0xe7
 80007b2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2205      	movs	r2, #5
 80007ba:	4619      	mov	r1, r3
 80007bc:	200a      	movs	r0, #10
 80007be:	f7ff ff2d 	bl	800061c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80007c2:	23c2      	movs	r3, #194	; 0xc2
 80007c4:	733b      	strb	r3, [r7, #12]
 80007c6:	23c2      	movs	r3, #194	; 0xc2
 80007c8:	72fb      	strb	r3, [r7, #11]
 80007ca:	23c2      	movs	r3, #194	; 0xc2
 80007cc:	72bb      	strb	r3, [r7, #10]
 80007ce:	23c2      	movs	r3, #194	; 0xc2
 80007d0:	727b      	strb	r3, [r7, #9]
 80007d2:	23c2      	movs	r3, #194	; 0xc2
 80007d4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2205      	movs	r2, #5
 80007dc:	4619      	mov	r1, r3
 80007de:	200b      	movs	r0, #11
 80007e0:	f7ff ff1c 	bl	800061c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80007e4:	21c3      	movs	r1, #195	; 0xc3
 80007e6:	200c      	movs	r0, #12
 80007e8:	f7ff fef6 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80007ec:	21c4      	movs	r1, #196	; 0xc4
 80007ee:	200d      	movs	r0, #13
 80007f0:	f7ff fef2 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80007f4:	21c5      	movs	r1, #197	; 0xc5
 80007f6:	200e      	movs	r0, #14
 80007f8:	f7ff feee 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80007fc:	21c6      	movs	r1, #198	; 0xc6
 80007fe:	200f      	movs	r0, #15
 8000800:	f7ff feea 	bl	80005d8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000804:	23e7      	movs	r3, #231	; 0xe7
 8000806:	733b      	strb	r3, [r7, #12]
 8000808:	23e7      	movs	r3, #231	; 0xe7
 800080a:	72fb      	strb	r3, [r7, #11]
 800080c:	23e7      	movs	r3, #231	; 0xe7
 800080e:	72bb      	strb	r3, [r7, #10]
 8000810:	23e7      	movs	r3, #231	; 0xe7
 8000812:	727b      	strb	r3, [r7, #9]
 8000814:	23e7      	movs	r3, #231	; 0xe7
 8000816:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2205      	movs	r2, #5
 800081e:	4619      	mov	r1, r3
 8000820:	2010      	movs	r0, #16
 8000822:	f7ff fefb 	bl	800061c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000826:	2100      	movs	r1, #0
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff fed5 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800082e:	2100      	movs	r1, #0
 8000830:	2012      	movs	r0, #18
 8000832:	f7ff fed1 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000836:	2100      	movs	r1, #0
 8000838:	2013      	movs	r0, #19
 800083a:	f7ff fecd 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800083e:	2100      	movs	r1, #0
 8000840:	2014      	movs	r0, #20
 8000842:	f7ff fec9 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000846:	2100      	movs	r1, #0
 8000848:	2015      	movs	r0, #21
 800084a:	f7ff fec5 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800084e:	2100      	movs	r1, #0
 8000850:	2016      	movs	r0, #22
 8000852:	f7ff fec1 	bl	80005d8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000856:	f000 fa55 	bl	8000d04 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800085a:	2100      	movs	r1, #0
 800085c:	201c      	movs	r0, #28
 800085e:	f7ff febb 	bl	80005d8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000862:	2100      	movs	r1, #0
 8000864:	201d      	movs	r0, #29
 8000866:	f7ff feb7 	bl	80005d8 <NRF24_write_register>

	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800086a:	210f      	movs	r1, #15
 800086c:	200f      	movs	r0, #15
 800086e:	f000 f8d1 	bl	8000a14 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000872:	2003      	movs	r0, #3
 8000874:	f000 f957 	bl	8000b26 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000878:	2001      	movs	r0, #1
 800087a:	f000 f98d 	bl	8000b98 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800087e:	2002      	movs	r0, #2
 8000880:	f000 f9d0 	bl	8000c24 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000884:	f000 f922 	bl	8000acc <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000888:	2020      	movs	r0, #32
 800088a:	f000 f8f3 	bl	8000a74 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 800088e:	f000 fa30 	bl	8000cf2 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000892:	204c      	movs	r0, #76	; 0x4c
 8000894:	f000 f8d9 	bl	8000a4a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000898:	f7ff ff18 	bl	80006cc <NRF24_flush_tx>
	NRF24_flush_rx();
 800089c:	f7ff ff1e 	bl	80006dc <NRF24_flush_rx>

	NRF24_powerDown();
 80008a0:	f000 f9e8 	bl	8000c74 <NRF24_powerDown>

}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008ae:	b002      	add	sp, #8
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2000004c 	.word	0x2000004c
 80008b8:	20000044 	.word	0x20000044
 80008bc:	20000048 	.word	0x20000048
 80008c0:	2000004a 	.word	0x2000004a

080008c4 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff fe5d 	bl	8000588 <NRF24_read_register>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f043 0303 	orr.w	r3, r3, #3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff fe7d 	bl	80005d8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <NRF24_startListening+0x48>)
 80008e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	d004      	beq.n	80008f2 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80008e8:	2205      	movs	r2, #5
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <NRF24_startListening+0x48>)
 80008ec:	200a      	movs	r0, #10
 80008ee:	f7ff fe95 	bl	800061c <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 80008f2:	f7ff feeb 	bl	80006cc <NRF24_flush_tx>
	NRF24_flush_rx();
 80008f6:	f7ff fef1 	bl	80006dc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fe24 	bl	8000548 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000900:	2096      	movs	r0, #150	; 0x96
 8000902:	f7ff fddf 	bl	80004c4 <NRF24_DelayMicroSeconds>
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000038 	.word	0x20000038

08000910 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff fe17 	bl	8000548 <NRF24_ce>
	NRF24_flush_tx();
 800091a:	f7ff fed7 	bl	80006cc <NRF24_flush_tx>
	NRF24_flush_rx();
 800091e:	f7ff fedd 	bl	80006dc <NRF24_flush_rx>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}

08000926 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f9b1 	bl	8000c92 <NRF24_availablePipe>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}

08000936 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	4619      	mov	r1, r3
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fe90 	bl	800066c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800094c:	2017      	movs	r0, #23
 800094e:	f7ff fe1b 	bl	8000588 <NRF24_read_register>
 8000952:	4603      	mov	r3, r0
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 800095a:	f7ff febf 	bl	80006dc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800095e:	f000 f8ad 	bl	8000abc <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	2b00      	cmp	r3, #0
 8000966:	bf14      	ite	ne
 8000968:	2301      	movne	r3, #1
 800096a:	2300      	moveq	r3, #0
 800096c:	b2db      	uxtb	r3, r3
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4601      	mov	r1, r0
 8000980:	e9c7 2300 	strd	r2, r3, [r7]
 8000984:	460b      	mov	r3, r1
 8000986:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 800098e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000992:	491c      	ldr	r1, [pc, #112]	; (8000a04 <NRF24_openReadingPipe+0x8c>)
 8000994:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b06      	cmp	r3, #6
 800099c:	d82d      	bhi.n	80009fa <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d808      	bhi.n	80009b6 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <NRF24_openReadingPipe+0x90>)
 80009a8:	5cd3      	ldrb	r3, [r2, r3]
 80009aa:	4639      	mov	r1, r7
 80009ac:	2205      	movs	r2, #5
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe34 	bl	800061c <NRF24_write_registerN>
 80009b4:	e007      	b.n	80009c6 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <NRF24_openReadingPipe+0x90>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	4639      	mov	r1, r7
 80009be:	2201      	movs	r2, #1
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe2b 	bl	800061c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <NRF24_openReadingPipe+0x94>)
 80009ca:	5cd3      	ldrb	r3, [r2, r3]
 80009cc:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <NRF24_openReadingPipe+0x98>)
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fe00 	bl	80005d8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80009d8:	2002      	movs	r0, #2
 80009da:	f7ff fdd5 	bl	8000588 <NRF24_read_register>
 80009de:	4603      	mov	r3, r0
 80009e0:	b25a      	sxtb	r2, r3
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4619      	mov	r1, r3
 80009f4:	2002      	movs	r0, #2
 80009f6:	f7ff fdef 	bl	80005d8 <NRF24_write_register>
	}

}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000038 	.word	0x20000038
 8000a08:	080038e0 	.word	0x080038e0
 8000a0c:	080038e8 	.word	0x080038e8
 8000a10:	20000040 	.word	0x20000040

08000a14 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	4613      	mov	r3, r2
 8000a22:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	b25a      	sxtb	r2, r3
 8000a2a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	4313      	orrs	r3, r2
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	2004      	movs	r0, #4
 8000a3e:	f7ff fdcb 	bl	80005d8 <NRF24_write_register>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000a54:	237f      	movs	r3, #127	; 0x7f
 8000a56:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	bf28      	it	cs
 8000a60:	4613      	movcs	r3, r2
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	2005      	movs	r0, #5
 8000a68:	f7ff fdb6 	bl	80005d8 <NRF24_write_register>
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000a7e:	2320      	movs	r3, #32
 8000a80:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000a82:	7bfa      	ldrb	r2, [r7, #15]
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	4293      	cmp	r3, r2
 8000a88:	bf28      	it	cs
 8000a8a:	4613      	movcs	r3, r2
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <NRF24_setPayloadSize+0x2c>)
 8000a90:	701a      	strb	r2, [r3, #0]
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000040 	.word	0x20000040

08000aa4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	return payload_size;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <NRF24_getPayloadSize+0x14>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000040 	.word	0x20000040

08000abc <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000ac0:	2060      	movs	r0, #96	; 0x60
 8000ac2:	f7ff fd61 	bl	8000588 <NRF24_read_register>
 8000ac6:	4603      	mov	r3, r0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	bd80      	pop	{r7, pc}

08000acc <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ad0:	201d      	movs	r0, #29
 8000ad2:	f7ff fd59 	bl	8000588 <NRF24_read_register>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f023 0304 	bic.w	r3, r3, #4
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	201d      	movs	r0, #29
 8000ae2:	f7ff fd79 	bl	80005d8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	201c      	movs	r0, #28
 8000aea:	f7ff fd75 	bl	80005d8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000aee:	4b02      	ldr	r3, [pc, #8]	; (8000af8 <NRF24_disableDynamicPayloads+0x2c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000041 	.word	0x20000041

08000afc <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d004      	beq.n	8000b16 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000b0c:	213f      	movs	r1, #63	; 0x3f
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f7ff fd62 	bl	80005d8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000b14:	e003      	b.n	8000b1e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000b16:	2100      	movs	r1, #0
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fd5d 	bl	80005d8 <NRF24_write_register>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000b30:	2006      	movs	r0, #6
 8000b32:	f7ff fd29 	bl	8000588 <NRF24_read_register>
 8000b36:	4603      	mov	r3, r0
 8000b38:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	f023 0306 	bic.w	r3, r3, #6
 8000b40:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d104      	bne.n	8000b52 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	f043 0306 	orr.w	r3, r3, #6
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e019      	b.n	8000b86 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d104      	bne.n	8000b62 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e011      	b.n	8000b86 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d104      	bne.n	8000b72 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e009      	b.n	8000b86 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d103      	bne.n	8000b86 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	f043 0306 	orr.w	r3, r3, #6
 8000b84:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2006      	movs	r0, #6
 8000b8c:	f7ff fd24 	bl	80005d8 <NRF24_write_register>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ba6:	2006      	movs	r0, #6
 8000ba8:	f7ff fcee 	bl	8000588 <NRF24_read_register>
 8000bac:	4603      	mov	r3, r0
 8000bae:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <NRF24_setDataRate+0x88>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000bb6:	7bbb      	ldrb	r3, [r7, #14]
 8000bb8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000bbc:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d107      	bne.n	8000bd4 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <NRF24_setDataRate+0x88>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000bca:	7bbb      	ldrb	r3, [r7, #14]
 8000bcc:	f043 0320 	orr.w	r3, r3, #32
 8000bd0:	73bb      	strb	r3, [r7, #14]
 8000bd2:	e00d      	b.n	8000bf0 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d107      	bne.n	8000bea <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <NRF24_setDataRate+0x88>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	73bb      	strb	r3, [r7, #14]
 8000be8:	e002      	b.n	8000bf0 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <NRF24_setDataRate+0x88>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	f7ff fcef 	bl	80005d8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000bfa:	2006      	movs	r0, #6
 8000bfc:	f7ff fcc4 	bl	8000588 <NRF24_read_register>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d102      	bne.n	8000c10 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e002      	b.n	8000c16 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <NRF24_setDataRate+0x88>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000042 	.word	0x20000042

08000c24 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff fcaa 	bl	8000588 <NRF24_read_register>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f023 030c 	bic.w	r3, r3, #12
 8000c3a:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00f      	beq.n	8000c62 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d104      	bne.n	8000c52 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e007      	b.n	8000c62 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	4619      	mov	r1, r3
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fcb6 	bl	80005d8 <NRF24_write_register>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fc85 	bl	8000588 <NRF24_read_register>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f023 0302 	bic.w	r3, r3, #2
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4619      	mov	r1, r3
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fca5 	bl	80005d8 <NRF24_write_register>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000c9a:	f7ff fd27 	bl	80006ec <NRF24_get_status>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d017      	beq.n	8000ce8 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d007      	beq.n	8000cce <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	085b      	lsrs	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000cce:	2140      	movs	r1, #64	; 0x40
 8000cd0:	2007      	movs	r0, #7
 8000cd2:	f7ff fc81 	bl	80005d8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	f003 0320 	and.w	r3, r3, #32
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f7ff fc78 	bl	80005d8 <NRF24_write_register>
    }
  }
  return result;
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000cf6:	2170      	movs	r1, #112	; 0x70
 8000cf8:	2007      	movs	r0, #7
 8000cfa:	f7ff fc6d 	bl	80005d8 <NRF24_write_register>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff fbfc 	bl	8000508 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000d10:	2350      	movs	r3, #80	; 0x50
 8000d12:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000d14:	2373      	movs	r3, #115	; 0x73
 8000d16:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000d18:	1d39      	adds	r1, r7, #4
 8000d1a:	2364      	movs	r3, #100	; 0x64
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <NRF24_ACTIVATE_cmd+0x30>)
 8000d20:	f001 ff59 	bl	8002bd6 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fbef 	bl	8000508 <NRF24_csn>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000004c 	.word	0x2000004c

08000d38 <Ili9341_SetArea>:
/*** Internal Function Declarations ***/
static void Ili9341_ReadData();

/*** External Function Defines ***/
void Ili9341_SetArea(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	4608      	mov	r0, r1
 8000d42:	4611      	mov	r1, r2
 8000d44:	461a      	mov	r2, r3
 8000d46:	4623      	mov	r3, r4
 8000d48:	80fb      	strh	r3, [r7, #6]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80bb      	strh	r3, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	807b      	strh	r3, [r7, #2]
 8000d52:	4613      	mov	r3, r2
 8000d54:	803b      	strh	r3, [r7, #0]
  Ili9341_WriteCmd(0x2a);
 8000d56:	202a      	movs	r0, #42	; 0x2a
 8000d58:	f000 f958 	bl	800100c <Ili9341_WriteCmd>
  Ili9341_WriteData(xStart >> 8);
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	0a1b      	lsrs	r3, r3, #8
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f962 	bl	800102c <Ili9341_WriteData>
  Ili9341_WriteData(xStart & 0xff);
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f95c 	bl	800102c <Ili9341_WriteData>
  Ili9341_WriteData(xEnd >> 8);
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	0a1b      	lsrs	r3, r3, #8
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f956 	bl	800102c <Ili9341_WriteData>
  Ili9341_WriteData(xEnd & 0xff);
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f950 	bl	800102c <Ili9341_WriteData>

  Ili9341_WriteCmd(0x2b);
 8000d8c:	202b      	movs	r0, #43	; 0x2b
 8000d8e:	f000 f93d 	bl	800100c <Ili9341_WriteCmd>
  Ili9341_WriteData(yStart >> 8);
 8000d92:	88bb      	ldrh	r3, [r7, #4]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f947 	bl	800102c <Ili9341_WriteData>
  Ili9341_WriteData(yStart & 0xff);
 8000d9e:	88bb      	ldrh	r3, [r7, #4]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f941 	bl	800102c <Ili9341_WriteData>
  Ili9341_WriteData(yEnd >> 8);
 8000daa:	883b      	ldrh	r3, [r7, #0]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f93b 	bl	800102c <Ili9341_WriteData>
  Ili9341_WriteData(yEnd & 0xff);
 8000db6:	883b      	ldrh	r3, [r7, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f935 	bl	800102c <Ili9341_WriteData>

  Ili9341_WriteCmd(0x2c);
 8000dc2:	202c      	movs	r0, #44	; 0x2c
 8000dc4:	f000 f922 	bl	800100c <Ili9341_WriteCmd>
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}

08000dd0 <Ili9341_DrawRect>:
  // the first read is invalid
  Ili9341_ReadData();
}

void Ili9341_DrawRect(uint16_t xStart, uint16_t yStart, uint16_t width, uint16_t height, uint16_t color)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	4608      	mov	r0, r1
 8000dda:	4611      	mov	r1, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4623      	mov	r3, r4
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	4603      	mov	r3, r0
 8000de4:	80bb      	strh	r3, [r7, #4]
 8000de6:	460b      	mov	r3, r1
 8000de8:	807b      	strh	r3, [r7, #2]
 8000dea:	4613      	mov	r3, r2
 8000dec:	803b      	strh	r3, [r7, #0]
  Ili9341_SetArea(xStart, yStart, xStart + width - 1, yStart + height - 1);
 8000dee:	88fa      	ldrh	r2, [r7, #6]
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	4413      	add	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b29c      	uxth	r4, r3
 8000dfa:	88ba      	ldrh	r2, [r7, #4]
 8000dfc:	883b      	ldrh	r3, [r7, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	88b9      	ldrh	r1, [r7, #4]
 8000e08:	88f8      	ldrh	r0, [r7, #6]
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	f7ff ff94 	bl	8000d38 <Ili9341_SetArea>
  for( uint16_t y = 0; y < height; y++ ){
 8000e10:	2300      	movs	r3, #0
 8000e12:	81fb      	strh	r3, [r7, #14]
 8000e14:	e00f      	b.n	8000e36 <Ili9341_DrawRect+0x66>
    for( uint16_t x = 0; x < width; x++ ){
 8000e16:	2300      	movs	r3, #0
 8000e18:	81bb      	strh	r3, [r7, #12]
 8000e1a:	e005      	b.n	8000e28 <Ili9341_DrawRect+0x58>
      LCD_DATA = color;
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <Ili9341_DrawRect+0x78>)
 8000e1e:	8c3b      	ldrh	r3, [r7, #32]
 8000e20:	8013      	strh	r3, [r2, #0]
    for( uint16_t x = 0; x < width; x++ ){
 8000e22:	89bb      	ldrh	r3, [r7, #12]
 8000e24:	3301      	adds	r3, #1
 8000e26:	81bb      	strh	r3, [r7, #12]
 8000e28:	89ba      	ldrh	r2, [r7, #12]
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3f5      	bcc.n	8000e1c <Ili9341_DrawRect+0x4c>
  for( uint16_t y = 0; y < height; y++ ){
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	3301      	adds	r3, #1
 8000e34:	81fb      	strh	r3, [r7, #14]
 8000e36:	89fa      	ldrh	r2, [r7, #14]
 8000e38:	883b      	ldrh	r3, [r7, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3eb      	bcc.n	8000e16 <Ili9341_DrawRect+0x46>
    }
  }
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	60020000 	.word	0x60020000

08000e4c <Ili9341_Init>:
{
  return (uint16_t*)LCD_DATA_ADDR;
}

void Ili9341_Init(uint16_t width, uint16_t height)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	4603      	mov	r3, r0
 8000e54:	460a      	mov	r2, r1
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);HAL_Delay(10);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2108      	movs	r1, #8
 8000e60:	4869      	ldr	r0, [pc, #420]	; (8001008 <Ili9341_Init+0x1bc>)
 8000e62:	f001 f84d 	bl	8001f00 <HAL_GPIO_WritePin>
 8000e66:	200a      	movs	r0, #10
 8000e68:	f000 fda4 	bl	80019b4 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_RESET);HAL_Delay(10);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2108      	movs	r1, #8
 8000e70:	4865      	ldr	r0, [pc, #404]	; (8001008 <Ili9341_Init+0x1bc>)
 8000e72:	f001 f845 	bl	8001f00 <HAL_GPIO_WritePin>
 8000e76:	200a      	movs	r0, #10
 8000e78:	f000 fd9c 	bl	80019b4 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);HAL_Delay(10);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2108      	movs	r1, #8
 8000e80:	4861      	ldr	r0, [pc, #388]	; (8001008 <Ili9341_Init+0x1bc>)
 8000e82:	f001 f83d 	bl	8001f00 <HAL_GPIO_WritePin>
 8000e86:	200a      	movs	r0, #10
 8000e88:	f000 fd94 	bl	80019b4 <HAL_Delay>

	Ili9341_WriteCmd(0x01); 		//software reset
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f000 f8bd 	bl	800100c <Ili9341_WriteCmd>
	HAL_Delay(50);
 8000e92:	2032      	movs	r0, #50	; 0x32
 8000e94:	f000 fd8e 	bl	80019b4 <HAL_Delay>
	Ili9341_WriteCmd(0x11); 		//exit sleep
 8000e98:	2011      	movs	r0, #17
 8000e9a:	f000 f8b7 	bl	800100c <Ili9341_WriteCmd>
	HAL_Delay(50);
 8000e9e:	2032      	movs	r0, #50	; 0x32
 8000ea0:	f000 fd88 	bl	80019b4 <HAL_Delay>

	Ili9341_WriteCmd(0xB6);
 8000ea4:	20b6      	movs	r0, #182	; 0xb6
 8000ea6:	f000 f8b1 	bl	800100c <Ili9341_WriteCmd>
	Ili9341_WriteData(0x0A);
 8000eaa:	200a      	movs	r0, #10
 8000eac:	f000 f8be 	bl	800102c <Ili9341_WriteData>
	Ili9341_WriteData(0xC2);
 8000eb0:	20c2      	movs	r0, #194	; 0xc2
 8000eb2:	f000 f8bb 	bl	800102c <Ili9341_WriteData>

	Ili9341_WriteCmd(0x36);   	// memory access control
 8000eb6:	2036      	movs	r0, #54	; 0x36
 8000eb8:	f000 f8a8 	bl	800100c <Ili9341_WriteCmd>
	Ili9341_WriteData(0x68);    // BGR -> seems RGB
 8000ebc:	2068      	movs	r0, #104	; 0x68
 8000ebe:	f000 f8b5 	bl	800102c <Ili9341_WriteData>

	Ili9341_WriteCmd(0x3A); 	// pixel format
 8000ec2:	203a      	movs	r0, #58	; 0x3a
 8000ec4:	f000 f8a2 	bl	800100c <Ili9341_WriteCmd>
	Ili9341_WriteData(0x55); 	// RGB565 (16bit)
 8000ec8:	2055      	movs	r0, #85	; 0x55
 8000eca:	f000 f8af 	bl	800102c <Ili9341_WriteData>

	Ili9341_WriteCmd(0xE0); 		//gamma
 8000ece:	20e0      	movs	r0, #224	; 0xe0
 8000ed0:	f000 f89c 	bl	800100c <Ili9341_WriteCmd>
	Ili9341_WriteData(0x10);
 8000ed4:	2010      	movs	r0, #16
 8000ed6:	f000 f8a9 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x10);
 8000eda:	2010      	movs	r0, #16
 8000edc:	f000 f8a6 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x10);
 8000ee0:	2010      	movs	r0, #16
 8000ee2:	f000 f8a3 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x08);
 8000ee6:	2008      	movs	r0, #8
 8000ee8:	f000 f8a0 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x0E);
 8000eec:	200e      	movs	r0, #14
 8000eee:	f000 f89d 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x06);
 8000ef2:	2006      	movs	r0, #6
 8000ef4:	f000 f89a 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x42);
 8000ef8:	2042      	movs	r0, #66	; 0x42
 8000efa:	f000 f897 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x28);
 8000efe:	2028      	movs	r0, #40	; 0x28
 8000f00:	f000 f894 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x36);
 8000f04:	2036      	movs	r0, #54	; 0x36
 8000f06:	f000 f891 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x03);
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	f000 f88e 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x0E);
 8000f10:	200e      	movs	r0, #14
 8000f12:	f000 f88b 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x04);
 8000f16:	2004      	movs	r0, #4
 8000f18:	f000 f888 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x13);
 8000f1c:	2013      	movs	r0, #19
 8000f1e:	f000 f885 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x0E);
 8000f22:	200e      	movs	r0, #14
 8000f24:	f000 f882 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x0C);
 8000f28:	200c      	movs	r0, #12
 8000f2a:	f000 f87f 	bl	800102c <Ili9341_WriteData>

  	Ili9341_WriteCmd(0XE1);
 8000f2e:	20e1      	movs	r0, #225	; 0xe1
 8000f30:	f000 f86c 	bl	800100c <Ili9341_WriteCmd>
  	Ili9341_WriteData(0x0C);
 8000f34:	200c      	movs	r0, #12
 8000f36:	f000 f879 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x23);
 8000f3a:	2023      	movs	r0, #35	; 0x23
 8000f3c:	f000 f876 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x26);
 8000f40:	2026      	movs	r0, #38	; 0x26
 8000f42:	f000 f873 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x04);
 8000f46:	2004      	movs	r0, #4
 8000f48:	f000 f870 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x0C);
 8000f4c:	200c      	movs	r0, #12
 8000f4e:	f000 f86d 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x04);
 8000f52:	2004      	movs	r0, #4
 8000f54:	f000 f86a 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x39);
 8000f58:	2039      	movs	r0, #57	; 0x39
 8000f5a:	f000 f867 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x24);
 8000f5e:	2024      	movs	r0, #36	; 0x24
 8000f60:	f000 f864 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x4B);
 8000f64:	204b      	movs	r0, #75	; 0x4b
 8000f66:	f000 f861 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x03);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f85e 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x0B);
 8000f70:	200b      	movs	r0, #11
 8000f72:	f000 f85b 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x0B);
 8000f76:	200b      	movs	r0, #11
 8000f78:	f000 f858 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x33);
 8000f7c:	2033      	movs	r0, #51	; 0x33
 8000f7e:	f000 f855 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x37);
 8000f82:	2037      	movs	r0, #55	; 0x37
 8000f84:	f000 f852 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x0F);
 8000f88:	200f      	movs	r0, #15
 8000f8a:	f000 f84f 	bl	800102c <Ili9341_WriteData>

  	Ili9341_WriteCmd(0x2a);
 8000f8e:	202a      	movs	r0, #42	; 0x2a
 8000f90:	f000 f83c 	bl	800100c <Ili9341_WriteCmd>
  	Ili9341_WriteData(0x00);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 f849 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x00);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f846 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x00);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f843 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0xef);
 8000fa6:	20ef      	movs	r0, #239	; 0xef
 8000fa8:	f000 f840 	bl	800102c <Ili9341_WriteData>

  	Ili9341_WriteCmd(0x2b);
 8000fac:	202b      	movs	r0, #43	; 0x2b
 8000fae:	f000 f82d 	bl	800100c <Ili9341_WriteCmd>
  	Ili9341_WriteData(0x00);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f83a 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x00);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f837 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x01);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 f834 	bl	800102c <Ili9341_WriteData>
  	Ili9341_WriteData(0x3f);
 8000fc4:	203f      	movs	r0, #63	; 0x3f
 8000fc6:	f000 f831 	bl	800102c <Ili9341_WriteData>

  	Ili9341_WriteCmd(0x29);
 8000fca:	2029      	movs	r0, #41	; 0x29
 8000fcc:	f000 f81e 	bl	800100c <Ili9341_WriteCmd>
  	HAL_Delay(10);
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f000 fcef 	bl	80019b4 <HAL_Delay>
  	Ili9341_WriteCmd(0x2C);
 8000fd6:	202c      	movs	r0, #44	; 0x2c
 8000fd8:	f000 f818 	bl	800100c <Ili9341_WriteCmd>


  	Ili9341_DrawRect(0, 0, width, height, LCD_ILI9341_COLOR_BLACK);
 8000fdc:	88bb      	ldrh	r3, [r7, #4]
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	9100      	str	r1, [sp, #0]
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff fef2 	bl	8000dd0 <Ili9341_DrawRect>
  	Ili9341_SetArea(0, 0, width - 1, height - 1);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fe9c 	bl	8000d38 <Ili9341_SetArea>

}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000

0800100c <Ili9341_WriteCmd>:



/*** Internal Function Defines ***/
void Ili9341_WriteCmd(uint16_t cmd)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
	LCD_CMD = cmd;
 8001016:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	8013      	strh	r3, [r2, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <Ili9341_WriteData>:


void Ili9341_WriteData(uint16_t data)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
	LCD_DATA = data;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <Ili9341_WriteData+0x1c>)
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	8013      	strh	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	60020000 	.word	0x60020000

0800104c <parseNrfOutput>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void parseNrfOutput(uint8_t *rx_data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	newPixelIndex = ((uint16_t)rx_data[1] + ((uint16_t)rx_data[0] << 8));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3301      	adds	r3, #1
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b29a      	uxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b29b      	uxth	r3, r3
 8001066:	4413      	add	r3, r2
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <parseNrfOutput+0x118>)
 800106c:	801a      	strh	r2, [r3, #0]

    if(newPixelIndex != oldPixelIndex)
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <parseNrfOutput+0x118>)
 8001070:	881a      	ldrh	r2, [r3, #0]
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <parseNrfOutput+0x11c>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d070      	beq.n	800115c <parseNrfOutput+0x110>
    {

        for(int i = 0; i < 30; i+=2)
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e064      	b.n	800114a <parseNrfOutput+0xfe>
        {
            if(pixelCounter == (1600 - 320))
 8001080:	4b3a      	ldr	r3, [pc, #232]	; (800116c <parseNrfOutput+0x120>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001088:	d14a      	bne.n	8001120 <parseNrfOutput+0xd4>
            {
                dummyLine[lineCounter] = ((uint16_t)rx_data[i+1] + ((uint16_t)rx_data[i] << 8));
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b29a      	uxth	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	440b      	add	r3, r1
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4932      	ldr	r1, [pc, #200]	; (8001170 <parseNrfOutput+0x124>)
 80010a6:	8809      	ldrh	r1, [r1, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b31      	ldr	r3, [pc, #196]	; (8001174 <parseNrfOutput+0x128>)
 80010ae:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                Ili9341_WriteData(dummyLine[lineCounter]);
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <parseNrfOutput+0x124>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <parseNrfOutput+0x128>)
 80010ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ffb4 	bl	800102c <Ili9341_WriteData>
                lineCounter++;
 80010c4:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <parseNrfOutput+0x124>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <parseNrfOutput+0x124>)
 80010ce:	801a      	strh	r2, [r3, #0]

                if(lineCounter == 320)
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <parseNrfOutput+0x124>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010d8:	d134      	bne.n	8001144 <parseNrfOutput+0xf8>
                {
                    // Dont Lose any data while writing dummy data
                    NRF24_stopListening();
 80010da:	f7ff fc19 	bl	8000910 <NRF24_stopListening>
                    lineCounter  = 0;
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <parseNrfOutput+0x124>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	801a      	strh	r2, [r3, #0]
                    pixelCounter = 0;
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <parseNrfOutput+0x120>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	801a      	strh	r2, [r3, #0]

                    for(int i = 0; i < 320; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	e009      	b.n	8001104 <parseNrfOutput+0xb8>
                        Ili9341_WriteData(dummyLine[i]);
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <parseNrfOutput+0x128>)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff97 	bl	800102c <Ili9341_WriteData>
                    for(int i = 0; i < 320; i++)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	3301      	adds	r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800110a:	dbf1      	blt.n	80010f0 <parseNrfOutput+0xa4>

                    Ili9341_SetArea(0, 0, LCD_ILI9341_WIDTH, LCD_ILI9341_HEIGHT);
 800110c:	23f0      	movs	r3, #240	; 0xf0
 800110e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001112:	2100      	movs	r1, #0
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fe0f 	bl	8000d38 <Ili9341_SetArea>
                    NRF24_startListening();
 800111a:	f7ff fbd3 	bl	80008c4 <NRF24_startListening>
 800111e:	e011      	b.n	8001144 <parseNrfOutput+0xf8>
                }
            }
            else
            {
                Ili9341_WriteData(((uint16_t)rx_data[i+1] + ((uint16_t)rx_data[i] << 8)));
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b29a      	uxth	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	440b      	add	r3, r1
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b29b      	uxth	r3, r3
 800113a:	4413      	add	r3, r2
 800113c:	b29b      	uxth	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff74 	bl	800102c <Ili9341_WriteData>
        for(int i = 0; i < 30; i+=2)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3302      	adds	r3, #2
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b1d      	cmp	r3, #29
 800114e:	dd97      	ble.n	8001080 <parseNrfOutput+0x34>
            }
        }

        pixelCounter += 15;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <parseNrfOutput+0x120>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	330f      	adds	r3, #15
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <parseNrfOutput+0x120>)
 800115a:	801a      	strh	r2, [r3, #0]


    }
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000000a 	.word	0x2000000a
 8001168:	20000008 	.word	0x20000008
 800116c:	20000440 	.word	0x20000440
 8001170:	20000442 	.word	0x20000442
 8001174:	200001c0 	.word	0x200001c0

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b097      	sub	sp, #92	; 0x5c
 800117c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f000 fba7 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f849 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 f915 	bl	80013b4 <MX_GPIO_Init>
  MX_FSMC_Init();
 800118a:	f000 f9a7 	bl	80014dc <MX_FSMC_Init>
  MX_I2C2_Init();
 800118e:	f000 f8ad 	bl	80012ec <MX_I2C2_Init>
  MX_SPI2_Init();
 8001192:	f000 f8d9 	bl	8001348 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  Ili9341_Init(LCD_ILI9341_WIDTH, LCD_ILI9341_HEIGHT);
 8001196:	21f0      	movs	r1, #240	; 0xf0
 8001198:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800119c:	f7ff fe56 	bl	8000e4c <Ili9341_Init>
  Ili9341_SetArea(0, 0, LCD_ILI9341_WIDTH, LCD_ILI9341_HEIGHT);
 80011a0:	23f0      	movs	r3, #240	; 0xf0
 80011a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011a6:	2100      	movs	r1, #0
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fdc5 	bl	8000d38 <Ili9341_SetArea>

  /* Initialize NRF24 Module with Auto-ACK */
  NRF24_begin(GPIOA, GPIO_PIN_2, GPIO_PIN_1, hspi2);
 80011ae:	4c16      	ldr	r4, [pc, #88]	; (8001208 <main+0x90>)
 80011b0:	4668      	mov	r0, sp
 80011b2:	1d23      	adds	r3, r4, #4
 80011b4:	2254      	movs	r2, #84	; 0x54
 80011b6:	4619      	mov	r1, r3
 80011b8:	f002 fb78 	bl	80038ac <memcpy>
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	2202      	movs	r2, #2
 80011c0:	2104      	movs	r1, #4
 80011c2:	4812      	ldr	r0, [pc, #72]	; (800120c <main+0x94>)
 80011c4:	f7ff faa0 	bl	8000708 <NRF24_begin>
  NRF24_setAutoAck(true);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fc97 	bl	8000afc <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80011ce:	2034      	movs	r0, #52	; 0x34
 80011d0:	f7ff fc3b 	bl	8000a4a <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 80011d4:	2020      	movs	r0, #32
 80011d6:	f7ff fc4d 	bl	8000a74 <NRF24_setPayloadSize>
  NRF24_openReadingPipe(1, RxpipeAddrs);
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <main+0x98>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff fbc9 	bl	8000978 <NRF24_openReadingPipe>
  NRF24_startListening();
 80011e6:	f7ff fb6d 	bl	80008c4 <NRF24_startListening>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* RX Pipe cannot be cleared immediately */
	    while(NRF24_available())
 80011ea:	e006      	b.n	80011fa <main+0x82>
	    {

	    NRF24_read(myRxData, 32);
 80011ec:	2120      	movs	r1, #32
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <main+0x9c>)
 80011f0:	f7ff fba1 	bl	8000936 <NRF24_read>
	    parseNrfOutput(myRxData);
 80011f4:	4807      	ldr	r0, [pc, #28]	; (8001214 <main+0x9c>)
 80011f6:	f7ff ff29 	bl	800104c <parseNrfOutput>
	    while(NRF24_available())
 80011fa:	f7ff fb94 	bl	8000926 <NRF24_available>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f3      	bne.n	80011ec <main+0x74>
 8001204:	e7f9      	b.n	80011fa <main+0x82>
 8001206:	bf00      	nop
 8001208:	200000f8 	.word	0x200000f8
 800120c:	40020000 	.word	0x40020000
 8001210:	20000000 	.word	0x20000000
 8001214:	200001a0 	.word	0x200001a0

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	; 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fb14 	bl	8003854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <SystemClock_Config+0xcc>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <SystemClock_Config+0xcc>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <SystemClock_Config+0xcc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <SystemClock_Config+0xd0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <SystemClock_Config+0xd0>)
 8001262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <SystemClock_Config+0xd0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001288:	2308      	movs	r3, #8
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800128c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001292:	2302      	movs	r3, #2
 8001294:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001296:	2307      	movs	r3, #7
 8001298:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 ff8c 	bl	80021bc <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012aa:	f000 f977 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2105      	movs	r1, #5
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 f9ed 	bl	80026ac <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012d8:	f000 f960 	bl	800159c <Error_Handler>
  }
}
 80012dc:	bf00      	nop
 80012de:	3750      	adds	r7, #80	; 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_I2C2_Init+0x50>)
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <MX_I2C2_Init+0x54>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_I2C2_Init+0x50>)
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <MX_I2C2_Init+0x58>)
 80012fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_I2C2_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_I2C2_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_I2C2_Init+0x50>)
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_I2C2_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_I2C2_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_I2C2_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_I2C2_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_I2C2_Init+0x50>)
 800132a:	f000 fe03 	bl	8001f34 <HAL_I2C_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001334:	f000 f932 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000a4 	.word	0x200000a4
 8001340:	40005800 	.word	0x40005800
 8001344:	000186a0 	.word	0x000186a0

08001348 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_SPI2_Init+0x64>)
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <MX_SPI2_Init+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_SPI2_Init+0x64>)
 8001354:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001358:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_SPI2_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_SPI2_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_SPI2_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_SPI2_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_SPI2_Init+0x64>)
 8001374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001378:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI2_Init+0x64>)
 800137c:	2218      	movs	r2, #24
 800137e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_SPI2_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI2_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_SPI2_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI2_Init+0x64>)
 8001394:	220a      	movs	r2, #10
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_SPI2_Init+0x64>)
 800139a:	f001 fb93 	bl	8002ac4 <HAL_SPI_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013a4:	f000 f8fa 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200000f8 	.word	0x200000f8
 80013b0:	40003800 	.word	0x40003800

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <MX_GPIO_Init+0x11c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a3f      	ldr	r2, [pc, #252]	; (80014d0 <MX_GPIO_Init+0x11c>)
 80013d4:	f043 0310 	orr.w	r3, r3, #16
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <MX_GPIO_Init+0x11c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <MX_GPIO_Init+0x11c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a38      	ldr	r2, [pc, #224]	; (80014d0 <MX_GPIO_Init+0x11c>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <MX_GPIO_Init+0x11c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <MX_GPIO_Init+0x11c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a31      	ldr	r2, [pc, #196]	; (80014d0 <MX_GPIO_Init+0x11c>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_GPIO_Init+0x11c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <MX_GPIO_Init+0x11c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a2a      	ldr	r2, [pc, #168]	; (80014d0 <MX_GPIO_Init+0x11c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <MX_GPIO_Init+0x11c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <MX_GPIO_Init+0x11c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a23      	ldr	r2, [pc, #140]	; (80014d0 <MX_GPIO_Init+0x11c>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_GPIO_Init+0x11c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_GPIO_Init+0x11c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <MX_GPIO_Init+0x11c>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_GPIO_Init+0x11c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2108      	movs	r1, #8
 8001476:	4817      	ldr	r0, [pc, #92]	; (80014d4 <MX_GPIO_Init+0x120>)
 8001478:	f000 fd42 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	2102      	movs	r1, #2
 8001480:	4815      	ldr	r0, [pc, #84]	; (80014d8 <MX_GPIO_Init+0x124>)
 8001482:	f000 fd3d 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2104      	movs	r1, #4
 800148a:	4813      	ldr	r0, [pc, #76]	; (80014d8 <MX_GPIO_Init+0x124>)
 800148c:	f000 fd38 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_RESET_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin;
 8001490:	2308      	movs	r3, #8
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_RESET_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	480b      	ldr	r0, [pc, #44]	; (80014d4 <MX_GPIO_Init+0x120>)
 80014a8:	f000 fb8e 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin SPI2_CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|SPI2_CSN_Pin;
 80014ac:	2306      	movs	r3, #6
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2302      	movs	r3, #2
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_GPIO_Init+0x124>)
 80014c4:	f000 fb80 	bl	8001bc8 <HAL_GPIO_Init>

}
 80014c8:	bf00      	nop
 80014ca:	3730      	adds	r7, #48	; 0x30
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40020000 	.word	0x40020000

080014dc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <MX_FSMC_Init+0xb8>)
 80014f6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80014fa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <MX_FSMC_Init+0xb8>)
 80014fe:	4a26      	ldr	r2, [pc, #152]	; (8001598 <MX_FSMC_Init+0xbc>)
 8001500:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <MX_FSMC_Init+0xb8>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <MX_FSMC_Init+0xb8>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <MX_FSMC_Init+0xb8>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <MX_FSMC_Init+0xb8>)
 8001516:	2210      	movs	r2, #16
 8001518:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <MX_FSMC_Init+0xb8>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_FSMC_Init+0xb8>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_FSMC_Init+0xb8>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_FSMC_Init+0xb8>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_FSMC_Init+0xb8>)
 8001534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_FSMC_Init+0xb8>)
 800153c:	2200      	movs	r2, #0
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_FSMC_Init+0xb8>)
 8001542:	2200      	movs	r2, #0
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_FSMC_Init+0xb8>)
 8001548:	2200      	movs	r2, #0
 800154a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_FSMC_Init+0xb8>)
 800154e:	2200      	movs	r2, #0
 8001550:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_FSMC_Init+0xb8>)
 8001554:	2200      	movs	r2, #0
 8001556:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8001558:	2302      	movs	r3, #2
 800155a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800155c:	230f      	movs	r3, #15
 800155e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8001560:	2304      	movs	r3, #4
 8001562:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8001564:	2301      	movs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001568:	2310      	movs	r3, #16
 800156a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800156c:	2311      	movs	r3, #17
 800156e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_FSMC_Init+0xb8>)
 800157c:	f002 f84a 	bl	8003614 <HAL_SRAM_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001586:	f000 f809 	bl	800159c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800158a:	bf00      	nop
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000150 	.word	0x20000150
 8001598:	a0000104 	.word	0xa0000104

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <Error_Handler+0x8>
	...

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <HAL_MspInit+0x4c>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_MspInit+0x4c>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015e6:	2007      	movs	r0, #7
 80015e8:	f000 faba 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800

080015f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_I2C_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12c      	bne.n	8001674 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_I2C_MspInit+0x88>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_I2C_MspInit+0x88>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_I2C_MspInit+0x88>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001636:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163c:	2312      	movs	r3, #18
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001648:	2304      	movs	r3, #4
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	480c      	ldr	r0, [pc, #48]	; (8001684 <HAL_I2C_MspInit+0x8c>)
 8001654:	f000 fab8 	bl	8001bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_I2C_MspInit+0x88>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_I2C_MspInit+0x88>)
 8001662:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_I2C_MspInit+0x88>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40005800 	.word	0x40005800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400

08001688 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a28      	ldr	r2, [pc, #160]	; (8001748 <HAL_SPI_MspInit+0xc0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d14a      	bne.n	8001740 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_SPI_MspInit+0xc4>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a26      	ldr	r2, [pc, #152]	; (800174c <HAL_SPI_MspInit+0xc4>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_SPI_MspInit+0xc4>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_SPI_MspInit+0xc4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a1f      	ldr	r2, [pc, #124]	; (800174c <HAL_SPI_MspInit+0xc4>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_SPI_MspInit+0xc4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_SPI_MspInit+0xc4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a18      	ldr	r2, [pc, #96]	; (800174c <HAL_SPI_MspInit+0xc4>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_SPI_MspInit+0xc4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016fe:	230c      	movs	r3, #12
 8001700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800170e:	2305      	movs	r3, #5
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <HAL_SPI_MspInit+0xc8>)
 800171a:	f000 fa55 	bl	8001bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800171e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001730:	2305      	movs	r3, #5
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <HAL_SPI_MspInit+0xcc>)
 800173c:	f000 fa44 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40003800 	.word	0x40003800
 800174c:	40023800 	.word	0x40023800
 8001750:	40020800 	.word	0x40020800
 8001754:	40020400 	.word	0x40020400

08001758 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_FSMC_MspInit+0x88>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d131      	bne.n	80017d8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_FSMC_MspInit+0x88>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_FSMC_MspInit+0x8c>)
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	4a18      	ldr	r2, [pc, #96]	; (80017e4 <HAL_FSMC_MspInit+0x8c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6393      	str	r3, [r2, #56]	; 0x38
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_FSMC_MspInit+0x8c>)
 800178c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001796:	f64f 7380 	movw	r3, #65408	; 0xff80
 800179a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80017a8:	230c      	movs	r3, #12
 80017aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <HAL_FSMC_MspInit+0x90>)
 80017b2:	f000 fa09 	bl	8001bc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017b6:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80017ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80017c8:	230c      	movs	r3, #12
 80017ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <HAL_FSMC_MspInit+0x94>)
 80017d2:	f000 f9f9 	bl	8001bc8 <HAL_GPIO_Init>
 80017d6:	e000      	b.n	80017da <HAL_FSMC_MspInit+0x82>
    return;
 80017d8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000444 	.word	0x20000444
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40020c00 	.word	0x40020c00

080017f0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80017f8:	f7ff ffae 	bl	8001758 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <NMI_Handler+0x4>

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001850:	f000 f890 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001882:	490e      	ldr	r1, [pc, #56]	; (80018bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001898:	4c0b      	ldr	r4, [pc, #44]	; (80018c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018a6:	f7ff ffd7 	bl	8001858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018aa:	f001 ffdb 	bl	8003864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fc63 	bl	8001178 <main>
  bx  lr    
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80018c0:	08003918 	.word	0x08003918
  ldr r2, =_sbss
 80018c4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80018c8:	2000044c 	.word	0x2000044c

080018cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <HAL_Init+0x40>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_Init+0x40>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <HAL_Init+0x40>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 f931 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	2000      	movs	r0, #0
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fe50 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f93b 	bl	8001bae <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f000 f911 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2000000c 	.word	0x2000000c
 800196c:	20000014 	.word	0x20000014
 8001970:	20000010 	.word	0x20000010

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000014 	.word	0x20000014
 8001998:	20000448 	.word	0x20000448

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000448 	.word	0x20000448

080019b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff ffee 	bl	800199c <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d005      	beq.n	80019da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_Delay+0x44>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019da:	bf00      	nop
 80019dc:	f7ff ffde 	bl	800199c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d8f7      	bhi.n	80019dc <HAL_Delay+0x28>
  {
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000014 	.word	0x20000014

080019fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <__NVIC_GetPriorityGrouping+0x18>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f003 0307 	and.w	r3, r3, #7
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff47 	bl	80019fc <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff5c 	bl	8001a44 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffb0 	bl	8001b1c <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e16b      	b.n	8001ebc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 815a 	bne.w	8001eb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d005      	beq.n	8001c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d130      	bne.n	8001c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	69b9      	ldr	r1, [r7, #24]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80b4 	beq.w	8001eb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a5f      	ldr	r2, [pc, #380]	; (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6a:	4a5b      	ldr	r2, [pc, #364]	; (8001ed8 <HAL_GPIO_Init+0x310>)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_GPIO_Init+0x314>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d02b      	beq.n	8001dee <HAL_GPIO_Init+0x226>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a51      	ldr	r2, [pc, #324]	; (8001ee0 <HAL_GPIO_Init+0x318>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d025      	beq.n	8001dea <HAL_GPIO_Init+0x222>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a50      	ldr	r2, [pc, #320]	; (8001ee4 <HAL_GPIO_Init+0x31c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01f      	beq.n	8001de6 <HAL_GPIO_Init+0x21e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4f      	ldr	r2, [pc, #316]	; (8001ee8 <HAL_GPIO_Init+0x320>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d019      	beq.n	8001de2 <HAL_GPIO_Init+0x21a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4e      	ldr	r2, [pc, #312]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_GPIO_Init+0x216>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4d      	ldr	r2, [pc, #308]	; (8001ef0 <HAL_GPIO_Init+0x328>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00d      	beq.n	8001dda <HAL_GPIO_Init+0x212>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4c      	ldr	r2, [pc, #304]	; (8001ef4 <HAL_GPIO_Init+0x32c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x20e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	; (8001ef8 <HAL_GPIO_Init+0x330>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_GPIO_Init+0x20a>
 8001dce:	2307      	movs	r3, #7
 8001dd0:	e00e      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	e00c      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	e00a      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dda:	2305      	movs	r3, #5
 8001ddc:	e008      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e004      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x228>
 8001dee:	2300      	movs	r3, #0
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	f002 0203 	and.w	r2, r2, #3
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e00:	4935      	ldr	r1, [pc, #212]	; (8001ed8 <HAL_GPIO_Init+0x310>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e32:	4a32      	ldr	r2, [pc, #200]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b0f      	cmp	r3, #15
 8001ec0:	f67f ae90 	bls.w	8001be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40021400 	.word	0x40021400
 8001ef4:	40021800 	.word	0x40021800
 8001ef8:	40021c00 	.word	0x40021c00
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e12b      	b.n	800219e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fb4c 	bl	80015f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2224      	movs	r2, #36	; 0x24
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f98:	f000 fd80 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8001f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a81      	ldr	r2, [pc, #516]	; (80021a8 <HAL_I2C_Init+0x274>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d807      	bhi.n	8001fb8 <HAL_I2C_Init+0x84>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a80      	ldr	r2, [pc, #512]	; (80021ac <HAL_I2C_Init+0x278>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e006      	b.n	8001fc6 <HAL_I2C_Init+0x92>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a7d      	ldr	r2, [pc, #500]	; (80021b0 <HAL_I2C_Init+0x27c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	bf94      	ite	ls
 8001fc0:	2301      	movls	r3, #1
 8001fc2:	2300      	movhi	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0e7      	b.n	800219e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a78      	ldr	r2, [pc, #480]	; (80021b4 <HAL_I2C_Init+0x280>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9b      	lsrs	r3, r3, #18
 8001fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a6a      	ldr	r2, [pc, #424]	; (80021a8 <HAL_I2C_Init+0x274>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d802      	bhi.n	8002008 <HAL_I2C_Init+0xd4>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	e009      	b.n	800201c <HAL_I2C_Init+0xe8>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	4a69      	ldr	r2, [pc, #420]	; (80021b8 <HAL_I2C_Init+0x284>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	3301      	adds	r3, #1
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800202e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	495c      	ldr	r1, [pc, #368]	; (80021a8 <HAL_I2C_Init+0x274>)
 8002038:	428b      	cmp	r3, r1
 800203a:	d819      	bhi.n	8002070 <HAL_I2C_Init+0x13c>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e59      	subs	r1, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fbb1 f3f3 	udiv	r3, r1, r3
 800204a:	1c59      	adds	r1, r3, #1
 800204c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002050:	400b      	ands	r3, r1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_I2C_Init+0x138>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1e59      	subs	r1, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fbb1 f3f3 	udiv	r3, r1, r3
 8002064:	3301      	adds	r3, #1
 8002066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206a:	e051      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 800206c:	2304      	movs	r3, #4
 800206e:	e04f      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d111      	bne.n	800209c <HAL_I2C_Init+0x168>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e012      	b.n	80020c2 <HAL_I2C_Init+0x18e>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	0099      	lsls	r1, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Init+0x196>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e022      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10e      	bne.n	80020f0 <HAL_I2C_Init+0x1bc>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1e58      	subs	r0, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	440b      	add	r3, r1
 80020e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ee:	e00f      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e58      	subs	r0, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	0099      	lsls	r1, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	fbb0 f3f3 	udiv	r3, r0, r3
 8002106:	3301      	adds	r3, #1
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	6809      	ldr	r1, [r1, #0]
 8002114:	4313      	orrs	r3, r2
 8002116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800213e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6911      	ldr	r1, [r2, #16]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68d2      	ldr	r2, [r2, #12]
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	430b      	orrs	r3, r1
 8002152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	000186a0 	.word	0x000186a0
 80021ac:	001e847f 	.word	0x001e847f
 80021b0:	003d08ff 	.word	0x003d08ff
 80021b4:	431bde83 	.word	0x431bde83
 80021b8:	10624dd3 	.word	0x10624dd3

080021bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e267      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d075      	beq.n	80022c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d00c      	beq.n	8002200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e6:	4b85      	ldr	r3, [pc, #532]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d112      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f2:	4b82      	ldr	r3, [pc, #520]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	4b7e      	ldr	r3, [pc, #504]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05b      	beq.n	80022c4 <HAL_RCC_OscConfig+0x108>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d157      	bne.n	80022c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e242      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x74>
 8002222:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a75      	ldr	r2, [pc, #468]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b70      	ldr	r3, [pc, #448]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a6f      	ldr	r2, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b6d      	ldr	r3, [pc, #436]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a6c      	ldr	r2, [pc, #432]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002254:	4b69      	ldr	r3, [pc, #420]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a68      	ldr	r2, [pc, #416]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a65      	ldr	r2, [pc, #404]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fb92 	bl	800199c <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff fb8e 	bl	800199c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e207      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xc0>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff fb7e 	bl	800199c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff fb7a 	bl	800199c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1f3      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	4b51      	ldr	r3, [pc, #324]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0xe8>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d063      	beq.n	800239a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022d2:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022de:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d11c      	bne.n	8002324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ea:	4b44      	ldr	r3, [pc, #272]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d116      	bne.n	8002324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_RCC_OscConfig+0x152>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e1c7      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230e:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4937      	ldr	r1, [pc, #220]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	e03a      	b.n	800239a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800232c:	4b34      	ldr	r3, [pc, #208]	; (8002400 <HAL_RCC_OscConfig+0x244>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7ff fb33 	bl	800199c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff fb2f 	bl	800199c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1a8      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b28      	ldr	r3, [pc, #160]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4925      	ldr	r1, [pc, #148]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e015      	b.n	800239a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_OscConfig+0x244>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff fb12 	bl	800199c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237c:	f7ff fb0e 	bl	800199c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e187      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d036      	beq.n	8002414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_RCC_OscConfig+0x248>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7ff faf2 	bl	800199c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023bc:	f7ff faee 	bl	800199c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e167      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80023d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x200>
 80023da:	e01b      	b.n	8002414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_OscConfig+0x248>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7ff fadb 	bl	800199c <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	e00e      	b.n	8002408 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ea:	f7ff fad7 	bl	800199c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d907      	bls.n	8002408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e150      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
 80023fc:	40023800 	.word	0x40023800
 8002400:	42470000 	.word	0x42470000
 8002404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	4b88      	ldr	r3, [pc, #544]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800240a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ea      	bne.n	80023ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8097 	beq.w	8002550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	4b7d      	ldr	r3, [pc, #500]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a7c      	ldr	r2, [pc, #496]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b7a      	ldr	r3, [pc, #488]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b77      	ldr	r3, [pc, #476]	; (8002630 <HAL_RCC_OscConfig+0x474>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245e:	4b74      	ldr	r3, [pc, #464]	; (8002630 <HAL_RCC_OscConfig+0x474>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a73      	ldr	r2, [pc, #460]	; (8002630 <HAL_RCC_OscConfig+0x474>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7ff fa97 	bl	800199c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7ff fa93 	bl	800199c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e10c      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <HAL_RCC_OscConfig+0x474>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x2ea>
 8002498:	4b64      	ldr	r3, [pc, #400]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a63      	ldr	r2, [pc, #396]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
 80024a4:	e01c      	b.n	80024e0 <HAL_RCC_OscConfig+0x324>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x30c>
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b2:	4a5e      	ldr	r2, [pc, #376]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ba:	4b5c      	ldr	r3, [pc, #368]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a5b      	ldr	r2, [pc, #364]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0x324>
 80024c8:	4b58      	ldr	r3, [pc, #352]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	4a57      	ldr	r2, [pc, #348]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	; 0x70
 80024d4:	4b55      	ldr	r3, [pc, #340]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a54      	ldr	r2, [pc, #336]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024da:	f023 0304 	bic.w	r3, r3, #4
 80024de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d015      	beq.n	8002514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7ff fa58 	bl	800199c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7ff fa54 	bl	800199c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0cb      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002506:	4b49      	ldr	r3, [pc, #292]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0ee      	beq.n	80024f0 <HAL_RCC_OscConfig+0x334>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7ff fa42 	bl	800199c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7ff fa3e 	bl	800199c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0b5      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002532:	4b3e      	ldr	r3, [pc, #248]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ee      	bne.n	800251c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002544:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	4a38      	ldr	r2, [pc, #224]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800254a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a1 	beq.w	800269c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	d05c      	beq.n	8002620 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d141      	bne.n	80025f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fa12 	bl	800199c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff fa0e 	bl	800199c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e087      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	3b01      	subs	r3, #1
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	061b      	lsls	r3, r3, #24
 80025be:	491b      	ldr	r1, [pc, #108]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7ff f9e7 	bl	800199c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d2:	f7ff f9e3 	bl	800199c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e05c      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x416>
 80025f0:	e054      	b.n	800269c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff f9d0 	bl	800199c <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002600:	f7ff f9cc 	bl	800199c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e045      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
 800261e:	e03d      	b.n	800269c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d107      	bne.n	8002638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e038      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000
 8002634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_RCC_OscConfig+0x4ec>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d028      	beq.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d121      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d11a      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800266e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002670:	4293      	cmp	r3, r2
 8002672:	d111      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	3b01      	subs	r3, #1
 8002682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d107      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0cc      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b68      	ldr	r3, [pc, #416]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d90c      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b65      	ldr	r3, [pc, #404]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b8      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	494d      	ldr	r1, [pc, #308]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d044      	beq.n	80027cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d119      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d003      	beq.n	800276a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002766:	2b03      	cmp	r3, #3
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e067      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4934      	ldr	r1, [pc, #208]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800279c:	f7ff f8fe 	bl	800199c <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7ff f8fa 	bl	800199c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e04f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 020c 	and.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1eb      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d20c      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e032      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4916      	ldr	r1, [pc, #88]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002832:	f000 f821 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490a      	ldr	r1, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff f85e 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023c00 	.word	0x40023c00
 8002868:	40023800 	.word	0x40023800
 800286c:	080038f0 	.word	0x080038f0
 8002870:	2000000c 	.word	0x2000000c
 8002874:	20000010 	.word	0x20000010

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800287c:	b094      	sub	sp, #80	; 0x50
 800287e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	647b      	str	r3, [r7, #68]	; 0x44
 8002884:	2300      	movs	r3, #0
 8002886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002888:	2300      	movs	r3, #0
 800288a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002890:	4b79      	ldr	r3, [pc, #484]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d00d      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x40>
 800289c:	2b08      	cmp	r3, #8
 800289e:	f200 80e1 	bhi.w	8002a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x34>
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028aa:	e0db      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028ac:	4b73      	ldr	r3, [pc, #460]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80028ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028b0:	e0db      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b2:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80028b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b6:	e0d8      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b8:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c2:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ce:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	099b      	lsrs	r3, r3, #6
 80028d4:	2200      	movs	r2, #0
 80028d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e0:	633b      	str	r3, [r7, #48]	; 0x30
 80028e2:	2300      	movs	r3, #0
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
 80028e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	f04f 0000 	mov.w	r0, #0
 80028f2:	f04f 0100 	mov.w	r1, #0
 80028f6:	0159      	lsls	r1, r3, #5
 80028f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fc:	0150      	lsls	r0, r2, #5
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4621      	mov	r1, r4
 8002904:	1a51      	subs	r1, r2, r1
 8002906:	6139      	str	r1, [r7, #16]
 8002908:	4629      	mov	r1, r5
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800291c:	4659      	mov	r1, fp
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	4651      	mov	r1, sl
 8002922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002926:	4651      	mov	r1, sl
 8002928:	018a      	lsls	r2, r1, #6
 800292a:	4651      	mov	r1, sl
 800292c:	ebb2 0801 	subs.w	r8, r2, r1
 8002930:	4659      	mov	r1, fp
 8002932:	eb63 0901 	sbc.w	r9, r3, r1
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800294a:	4690      	mov	r8, r2
 800294c:	4699      	mov	r9, r3
 800294e:	4623      	mov	r3, r4
 8002950:	eb18 0303 	adds.w	r3, r8, r3
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	462b      	mov	r3, r5
 8002958:	eb49 0303 	adc.w	r3, r9, r3
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800296a:	4629      	mov	r1, r5
 800296c:	024b      	lsls	r3, r1, #9
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002974:	4621      	mov	r1, r4
 8002976:	024a      	lsls	r2, r1, #9
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297e:	2200      	movs	r2, #0
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
 8002982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002988:	f7fd fc1e 	bl	80001c8 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002994:	e058      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002996:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	2200      	movs	r2, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	4611      	mov	r1, r2
 80029a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029a6:	623b      	str	r3, [r7, #32]
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
 80029ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029b0:	4642      	mov	r2, r8
 80029b2:	464b      	mov	r3, r9
 80029b4:	f04f 0000 	mov.w	r0, #0
 80029b8:	f04f 0100 	mov.w	r1, #0
 80029bc:	0159      	lsls	r1, r3, #5
 80029be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c2:	0150      	lsls	r0, r2, #5
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4641      	mov	r1, r8
 80029ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ce:	4649      	mov	r1, r9
 80029d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029e8:	ebb2 040a 	subs.w	r4, r2, sl
 80029ec:	eb63 050b 	sbc.w	r5, r3, fp
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	00eb      	lsls	r3, r5, #3
 80029fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fe:	00e2      	lsls	r2, r4, #3
 8002a00:	4614      	mov	r4, r2
 8002a02:	461d      	mov	r5, r3
 8002a04:	4643      	mov	r3, r8
 8002a06:	18e3      	adds	r3, r4, r3
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	eb45 0303 	adc.w	r3, r5, r3
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1e:	4629      	mov	r1, r5
 8002a20:	028b      	lsls	r3, r1, #10
 8002a22:	4621      	mov	r1, r4
 8002a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a28:	4621      	mov	r1, r4
 8002a2a:	028a      	lsls	r2, r1, #10
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a32:	2200      	movs	r2, #0
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	61fa      	str	r2, [r7, #28]
 8002a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a3c:	f7fd fbc4 	bl	80001c8 <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4613      	mov	r3, r2
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3750      	adds	r7, #80	; 0x50
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	007a1200 	.word	0x007a1200

08002a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	2000000c 	.word	0x2000000c

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a9b      	lsrs	r3, r3, #10
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	08003900 	.word	0x08003900

08002ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07b      	b.n	8002bce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d108      	bne.n	8002af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae6:	d009      	beq.n	8002afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
 8002aee:	e005      	b.n	8002afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe fdb6 	bl	8001688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	ea42 0103 	orr.w	r1, r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	f003 0104 	and.w	r1, r3, #4
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f003 0210 	and.w	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b088      	sub	sp, #32
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_SPI_Transmit+0x22>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e126      	b.n	8002e46 <HAL_SPI_Transmit+0x270>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c00:	f7fe fecc 	bl	800199c <HAL_GetTick>
 8002c04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d002      	beq.n	8002c1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
 8002c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c1a:	e10b      	b.n	8002e34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_SPI_Transmit+0x52>
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c2c:	e102      	b.n	8002e34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2203      	movs	r2, #3
 8002c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	88fa      	ldrh	r2, [r7, #6]
 8002c46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c74:	d10f      	bne.n	8002c96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d007      	beq.n	8002cb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cbc:	d14b      	bne.n	8002d56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_SPI_Transmit+0xf6>
 8002cc6:	8afb      	ldrh	r3, [r7, #22]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d13e      	bne.n	8002d4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	1c9a      	adds	r2, r3, #2
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cf0:	e02b      	b.n	8002d4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d112      	bne.n	8002d26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d24:	e011      	b.n	8002d4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d26:	f7fe fe39 	bl	800199c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d803      	bhi.n	8002d3e <HAL_SPI_Transmit+0x168>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d102      	bne.n	8002d44 <HAL_SPI_Transmit+0x16e>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d48:	e074      	b.n	8002e34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ce      	bne.n	8002cf2 <HAL_SPI_Transmit+0x11c>
 8002d54:	e04c      	b.n	8002df0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_SPI_Transmit+0x18e>
 8002d5e:	8afb      	ldrh	r3, [r7, #22]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d140      	bne.n	8002de6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d8a:	e02c      	b.n	8002de6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d113      	bne.n	8002dc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	330c      	adds	r3, #12
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dc0:	e011      	b.n	8002de6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc2:	f7fe fdeb 	bl	800199c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d803      	bhi.n	8002dda <HAL_SPI_Transmit+0x204>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d102      	bne.n	8002de0 <HAL_SPI_Transmit+0x20a>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d102      	bne.n	8002de6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002de4:	e026      	b.n	8002e34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1cd      	bne.n	8002d8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	6839      	ldr	r1, [r7, #0]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fbcb 	bl	8003590 <SPI_EndRxTxTransaction>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e000      	b.n	8002e34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b088      	sub	sp, #32
 8002e52:	af02      	add	r7, sp, #8
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e6a:	d112      	bne.n	8002e92 <HAL_SPI_Receive+0x44>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10e      	bne.n	8002e92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2204      	movs	r2, #4
 8002e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	4613      	mov	r3, r2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f8f1 	bl	8003070 <HAL_SPI_TransmitReceive>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	e0ea      	b.n	8003068 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_SPI_Receive+0x52>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e0e3      	b.n	8003068 <HAL_SPI_Receive+0x21a>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ea8:	f7fe fd78 	bl	800199c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ebe:	e0ca      	b.n	8003056 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_SPI_Receive+0x7e>
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ed0:	e0c1      	b.n	8003056 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f18:	d10f      	bne.n	8002f3a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b40      	cmp	r3, #64	; 0x40
 8002f46:	d007      	beq.n	8002f58 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d162      	bne.n	8003026 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f60:	e02e      	b.n	8002fc0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d115      	bne.n	8002f9c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f103 020c 	add.w	r2, r3, #12
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	7812      	ldrb	r2, [r2, #0]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f9a:	e011      	b.n	8002fc0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f9c:	f7fe fcfe 	bl	800199c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d803      	bhi.n	8002fb4 <HAL_SPI_Receive+0x166>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d102      	bne.n	8002fba <HAL_SPI_Receive+0x16c>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fbe:	e04a      	b.n	8003056 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1cb      	bne.n	8002f62 <HAL_SPI_Receive+0x114>
 8002fca:	e031      	b.n	8003030 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d113      	bne.n	8003002 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	b292      	uxth	r2, r2
 8002fe6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	1c9a      	adds	r2, r3, #2
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003000:	e011      	b.n	8003026 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003002:	f7fe fccb 	bl	800199c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d803      	bhi.n	800301a <HAL_SPI_Receive+0x1cc>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d102      	bne.n	8003020 <HAL_SPI_Receive+0x1d2>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003024:	e017      	b.n	8003056 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1cd      	bne.n	8002fcc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	6839      	ldr	r1, [r7, #0]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fa45 	bl	80034c4 <SPI_EndRxTransaction>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
 8003052:	e000      	b.n	8003056 <HAL_SPI_Receive+0x208>
  }

error :
 8003054:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	; 0x30
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800307e:	2301      	movs	r3, #1
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_SPI_TransmitReceive+0x26>
 8003092:	2302      	movs	r3, #2
 8003094:	e18a      	b.n	80033ac <HAL_SPI_TransmitReceive+0x33c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800309e:	f7fe fc7d 	bl	800199c <HAL_GetTick>
 80030a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030b4:	887b      	ldrh	r3, [r7, #2]
 80030b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d00f      	beq.n	80030e0 <HAL_SPI_TransmitReceive+0x70>
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c6:	d107      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x68>
 80030d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d003      	beq.n	80030e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030de:	e15b      	b.n	8003398 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_SPI_TransmitReceive+0x82>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_SPI_TransmitReceive+0x82>
 80030ec:	887b      	ldrh	r3, [r7, #2]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030f8:	e14e      	b.n	8003398 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b04      	cmp	r3, #4
 8003104:	d003      	beq.n	800310e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2205      	movs	r2, #5
 800310a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	887a      	ldrh	r2, [r7, #2]
 800311e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	887a      	ldrh	r2, [r7, #2]
 8003124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	887a      	ldrh	r2, [r7, #2]
 8003130:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	887a      	ldrh	r2, [r7, #2]
 8003136:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d007      	beq.n	8003162 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316a:	d178      	bne.n	800325e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_SPI_TransmitReceive+0x10a>
 8003174:	8b7b      	ldrh	r3, [r7, #26]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d166      	bne.n	8003248 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	881a      	ldrh	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	1c9a      	adds	r2, r3, #2
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800319e:	e053      	b.n	8003248 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d11b      	bne.n	80031e6 <HAL_SPI_TransmitReceive+0x176>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d016      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x176>
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d113      	bne.n	80031e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	881a      	ldrh	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	1c9a      	adds	r2, r3, #2
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d119      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x1b8>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d014      	beq.n	8003228 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	b292      	uxth	r2, r2
 800320a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	1c9a      	adds	r2, r3, #2
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003224:	2301      	movs	r3, #1
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003228:	f7fe fbb8 	bl	800199c <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003234:	429a      	cmp	r2, r3
 8003236:	d807      	bhi.n	8003248 <HAL_SPI_TransmitReceive+0x1d8>
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d003      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003246:	e0a7      	b.n	8003398 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1a6      	bne.n	80031a0 <HAL_SPI_TransmitReceive+0x130>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1a1      	bne.n	80031a0 <HAL_SPI_TransmitReceive+0x130>
 800325c:	e07c      	b.n	8003358 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_SPI_TransmitReceive+0x1fc>
 8003266:	8b7b      	ldrh	r3, [r7, #26]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d16b      	bne.n	8003344 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	330c      	adds	r3, #12
 8003276:	7812      	ldrb	r2, [r2, #0]
 8003278:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003292:	e057      	b.n	8003344 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d11c      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x26c>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d017      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x26c>
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d114      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d119      	bne.n	800331e <HAL_SPI_TransmitReceive+0x2ae>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d014      	beq.n	800331e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800331a:	2301      	movs	r3, #1
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800331e:	f7fe fb3d 	bl	800199c <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800332a:	429a      	cmp	r2, r3
 800332c:	d803      	bhi.n	8003336 <HAL_SPI_TransmitReceive+0x2c6>
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d102      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2cc>
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003342:	e029      	b.n	8003398 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1a2      	bne.n	8003294 <HAL_SPI_TransmitReceive+0x224>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d19d      	bne.n	8003294 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f917 	bl	8003590 <SPI_EndRxTxTransaction>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003374:	e010      	b.n	8003398 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	e000      	b.n	8003398 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003396:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3730      	adds	r7, #48	; 0x30
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033c4:	f7fe faea 	bl	800199c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033d4:	f7fe fae2 	bl	800199c <HAL_GetTick>
 80033d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033da:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	015b      	lsls	r3, r3, #5
 80033e0:	0d1b      	lsrs	r3, r3, #20
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	fb02 f303 	mul.w	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ea:	e054      	b.n	8003496 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d050      	beq.n	8003496 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033f4:	f7fe fad2 	bl	800199c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	429a      	cmp	r2, r3
 8003402:	d902      	bls.n	800340a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d13d      	bne.n	8003486 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003418:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003422:	d111      	bne.n	8003448 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342c:	d004      	beq.n	8003438 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003436:	d107      	bne.n	8003448 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003446:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003450:	d10f      	bne.n	8003472 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003470:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e017      	b.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	3b01      	subs	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d19b      	bne.n	80033ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	2000000c 	.word	0x2000000c

080034c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d8:	d111      	bne.n	80034fe <SPI_EndRxTransaction+0x3a>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e2:	d004      	beq.n	80034ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ec:	d107      	bne.n	80034fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003506:	d12a      	bne.n	800355e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003510:	d012      	beq.n	8003538 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2200      	movs	r2, #0
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff ff49 	bl	80033b4 <SPI_WaitFlagStateUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d02d      	beq.n	8003584 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e026      	b.n	8003586 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	2101      	movs	r1, #1
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff ff36 	bl	80033b4 <SPI_WaitFlagStateUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01a      	beq.n	8003584 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e013      	b.n	8003586 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2200      	movs	r2, #0
 8003566:	2101      	movs	r1, #1
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff ff23 	bl	80033b4 <SPI_WaitFlagStateUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e000      	b.n	8003586 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <SPI_EndRxTxTransaction+0x7c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <SPI_EndRxTxTransaction+0x80>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	0d5b      	lsrs	r3, r3, #21
 80035a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ba:	d112      	bne.n	80035e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2200      	movs	r2, #0
 80035c4:	2180      	movs	r1, #128	; 0x80
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f7ff fef4 	bl	80033b4 <SPI_WaitFlagStateUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e00f      	b.n	8003602 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b80      	cmp	r3, #128	; 0x80
 80035fa:	d0f2      	beq.n	80035e2 <SPI_EndRxTxTransaction+0x52>
 80035fc:	e000      	b.n	8003600 <SPI_EndRxTxTransaction+0x70>
        break;
 80035fe:	bf00      	nop
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	2000000c 	.word	0x2000000c
 8003610:	165e9f81 	.word	0x165e9f81

08003614 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e038      	b.n	800369c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7fe f8d6 	bl	80017f0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3308      	adds	r3, #8
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f000 f828 	bl	80036a4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	461a      	mov	r2, r3
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	f000 f88a 	bl	8003778 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6858      	ldr	r0, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	f000 f8b7 	bl	80037e4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	6892      	ldr	r2, [r2, #8]
 800368a:	f041 0101 	orr.w	r1, r1, #1
 800368e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	f023 0101 	bic.w	r1, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d102      	bne.n	80036d4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80036ce:	2340      	movs	r3, #64	; 0x40
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e001      	b.n	80036d8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80036e4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80036ea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80036f0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80036f6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80036fc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003702:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003708:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800370e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003714:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <FSMC_NORSRAM_Init+0xd0>)
 8003734:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003744:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43db      	mvns	r3, r3
 8003754:	ea02 0103 	and.w	r1, r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4319      	orrs	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	0008fb7f 	.word	0x0008fb7f

08003778 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	431a      	orrs	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	431a      	orrs	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	041b      	lsls	r3, r3, #16
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	051b      	lsls	r3, r3, #20
 80037b6:	431a      	orrs	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	3b02      	subs	r3, #2
 80037be:	061b      	lsls	r3, r3, #24
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	3201      	adds	r2, #1
 80037cc:	4319      	orrs	r1, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037f8:	d11d      	bne.n	8003836 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003804:	4013      	ands	r3, r2
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	6811      	ldr	r1, [r2, #0]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	6852      	ldr	r2, [r2, #4]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	4311      	orrs	r1, r2
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	6892      	ldr	r2, [r2, #8]
 8003816:	0212      	lsls	r2, r2, #8
 8003818:	4311      	orrs	r1, r2
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	6992      	ldr	r2, [r2, #24]
 800381e:	4311      	orrs	r1, r2
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	68d2      	ldr	r2, [r2, #12]
 8003824:	0412      	lsls	r2, r2, #16
 8003826:	430a      	orrs	r2, r1
 8003828:	ea43 0102 	orr.w	r1, r3, r2
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003834:	e005      	b.n	8003842 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800383e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	cff00000 	.word	0xcff00000

08003854 <memset>:
 8003854:	4402      	add	r2, r0
 8003856:	4603      	mov	r3, r0
 8003858:	4293      	cmp	r3, r2
 800385a:	d100      	bne.n	800385e <memset+0xa>
 800385c:	4770      	bx	lr
 800385e:	f803 1b01 	strb.w	r1, [r3], #1
 8003862:	e7f9      	b.n	8003858 <memset+0x4>

08003864 <__libc_init_array>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	4d0d      	ldr	r5, [pc, #52]	; (800389c <__libc_init_array+0x38>)
 8003868:	4c0d      	ldr	r4, [pc, #52]	; (80038a0 <__libc_init_array+0x3c>)
 800386a:	1b64      	subs	r4, r4, r5
 800386c:	10a4      	asrs	r4, r4, #2
 800386e:	2600      	movs	r6, #0
 8003870:	42a6      	cmp	r6, r4
 8003872:	d109      	bne.n	8003888 <__libc_init_array+0x24>
 8003874:	4d0b      	ldr	r5, [pc, #44]	; (80038a4 <__libc_init_array+0x40>)
 8003876:	4c0c      	ldr	r4, [pc, #48]	; (80038a8 <__libc_init_array+0x44>)
 8003878:	f000 f826 	bl	80038c8 <_init>
 800387c:	1b64      	subs	r4, r4, r5
 800387e:	10a4      	asrs	r4, r4, #2
 8003880:	2600      	movs	r6, #0
 8003882:	42a6      	cmp	r6, r4
 8003884:	d105      	bne.n	8003892 <__libc_init_array+0x2e>
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	f855 3b04 	ldr.w	r3, [r5], #4
 800388c:	4798      	blx	r3
 800388e:	3601      	adds	r6, #1
 8003890:	e7ee      	b.n	8003870 <__libc_init_array+0xc>
 8003892:	f855 3b04 	ldr.w	r3, [r5], #4
 8003896:	4798      	blx	r3
 8003898:	3601      	adds	r6, #1
 800389a:	e7f2      	b.n	8003882 <__libc_init_array+0x1e>
 800389c:	08003910 	.word	0x08003910
 80038a0:	08003910 	.word	0x08003910
 80038a4:	08003910 	.word	0x08003910
 80038a8:	08003914 	.word	0x08003914

080038ac <memcpy>:
 80038ac:	440a      	add	r2, r1
 80038ae:	4291      	cmp	r1, r2
 80038b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80038b4:	d100      	bne.n	80038b8 <memcpy+0xc>
 80038b6:	4770      	bx	lr
 80038b8:	b510      	push	{r4, lr}
 80038ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038c2:	4291      	cmp	r1, r2
 80038c4:	d1f9      	bne.n	80038ba <memcpy+0xe>
 80038c6:	bd10      	pop	{r4, pc}

080038c8 <_init>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr

080038d4 <_fini>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr
